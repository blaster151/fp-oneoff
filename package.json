{
  "name": "fp-oneoff",
  "version": "1.0.0",
  "type": "module",
  "main": "./dist/index.js",
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.js",
      "default": "./dist/index.js"
    }
  },
  "files": [
    "dist/**",
    "README.md"
  ],
  "scripts": {
    "dev": "nodemon --exec ts-node src/index.ts",
    "build": "tsc -p .",
    "start": "node dist/index.js",
    "clean": "rm -rf dist",
    "check": "tsc --noEmit -p tsconfig.test.json",
    "typecheck": "tsc --noEmit",
    "examples": "ts-node scripts/run-examples.ts",
    "test": "vitest run --passWithNoTests",
    "test:watch": "vitest",
    "test:cps": "vitest run src/types/__tests__/cont.test.ts src/types/__tests__/cps.test.ts",
    "test:kan": "vitest run src/types/__tests__/ran-set.test.ts",
    "test:codensity": "vitest run src/types/__tests__/codensity-*.test.ts",
    "test:codensity:endX": "vitest run src/types/__tests__/codensity-endX.test.ts",
    "test:codensity:adjunction": "vitest run src/types/__tests__/codensity-adjunction.test.ts",
    "test:codensity:comma": "vitest run src/types/__tests__/codensity-comma-vs-end.test.ts",
    "test:finvect": "vitest run src/types/__tests__/finvect-double-dual.test.ts",
    "test:yoneda": "vitest run src/types/__tests__/yoneda.test.ts",
    "test:isbell": "vitest run src/types/__tests__/isbell-basic.test.ts",
    "test:cat2": "vitest run src/types/__tests__/cat2-basic.test.ts",
    "test:colim:finset": "vitest run src/types/__tests__/finset-colimits.test.ts",
    "test:colim:presheaf": "vitest run src/types/__tests__/presheaf-colimits.test.ts",
    "test:diagram": "vitest run src/types/__tests__/finset-diagram.test.ts",
    "test:psh:transport": "vitest run src/types/__tests__/presheaf-colimits-transport.test.ts",
    "test:psh:colim:transport": "vitest run src/types/__tests__/presheaf-colim-transport.test.ts",
    "test:psh:pushout:general": "vitest run src/types/__tests__/presheaf-pushout-general.test.ts",
    "test:psh:limit:general": "vitest run src/types/__tests__/presheaf-limit-general.test.ts",
    "test:dsl:shapes": "vitest run src/types/__tests__/dsl-shapes.test.ts",
    "test:dsl:psh": "vitest run src/types/__tests__/dsl-presheaf.test.ts",
    "test:dsl:extras": "vitest run src/types/__tests__/dsl-extras.test.ts",
    "test:adt": "vitest run src/types/__tests__/adt-list-tree.test.ts",
    "test:adt:schemes": "vitest run src/types/__tests__/adt-schemes.test.ts",
    "test:gadt": "vitest run src/types/__tests__/gadt-expr.test.ts",
    "test:adt:zygo-histo": "vitest run src/types/__tests__/adt-schemes.test.ts",
    "test:gadt:tmatch": "vitest run src/types/__tests__/gadt-tmatch.test.ts",
    "test:gadt:church": "vitest run src/gadt/__tests__/expr.gadt.church.test.ts",
    "test:adt:rose": "vitest run src/types/__tests__/adt-rose.test.ts",
    "test:adt:exprop": "vitest run src/types/__tests__/adt-expr-op.test.ts",
    "test:bicat": "vitest run src/types/__tests__/bicategory-coherence.test.ts",
    "test:topology:convergence": "vitest run src/types/__tests__/topology-convergence.test.ts",
    "test:ultrafilter": "vitest run src/types/__tests__/ultrafilter-principal.test.ts",
    "test:ultrafilter:em": "vitest run src/types/__tests__/em-algebra-discrete.test.ts",
    "test:ultrafilter:naturality": "vitest run src/types/__tests__/ultrafilter-naturality.test.ts",
    "test:topology": "vitest run src/types/__tests__/topology-basic.test.ts",
    "test:topology:product": "vitest run src/types/__tests__/topology-product.test.ts",
    "test:topology:and-agrees": "vitest run src/types/__tests__/topology-and-agrees.test.ts",
    "test:ultrafilter:demorgan": "vitest run src/types/__tests__/ultrafilter-demorgan.test.ts",
    "test:ultrafilter:distributivity": "vitest run src/types/__tests__/ultrafilter-distributivity.test.ts",
    "demo:cps": "node -e \"const { CPS } = require('./dist/types/index.js'); const id = x => x; const prog = CPS.reset(CPS.Cont.chain(x => CPS.Cont.of()(x + 1))(CPS.shift(k => k(5)))); console.log('shift/reset example =>', CPS.Cont.run(prog, id));\"",
    "demo:kan": "node -e \"const { Kan } = require('./dist/types/index.js'); console.log('Kan demo:'); Kan.demoKanExample();\"",
    "demo:product": "node -e \"const { Kan } = require('./dist/types/index.js'); console.log('Product demo: Discrete category gives product'); console.log('Available:', Object.keys(Kan).filter(k => k.includes('Ran')).join(', '));\"",
    "example:codensity": "ts-node --transpile-only src/examples/codensity-set.ts",
    "tracecheck": "ts-node --transpile-only scripts/tracecheck.ts",
    "math:opps": "ts-node --transpile-only scripts/mathopps.ts --diff",
    "math:build": "ts-node --transpile-only scripts/mathbuild.ts",
    "math:ci": "npm run math:build && npm run tracecheck && npm test",
    "bench:rel": "node scripts/run-rel-benchmark.js",
    "demo:em": "node scripts/run-em-demo.js",
    "prepublishOnly": "npm run check && npm run test && npm run build"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "devDependencies": {
    "@types/node": "^24.3.0",
    "glob": "^10.3.10",
    "nodemon": "^3.1.10",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.2",
    "vitest": "^2.0.0"
  }
}
