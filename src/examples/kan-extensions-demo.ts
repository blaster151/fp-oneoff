/**
 * Developer Demo:
 * - This file is not part of the library build.
 * - Do not import it from 'src/index.ts' or 'src/types/index.ts'.
 */

import { demoKanExample } from '../types/catkit-kan';

console.log('ðŸŽ¯ Kan Extensions Demo');
console.log('======================\n');

console.log('This demo shows how Kan extensions work:');
console.log('â€¢ C = arrow category X â†’ Y (with morphism u: X â†’ Y)');
console.log('â€¢ D = terminal category â€¢ (one object)');
console.log('â€¢ F: C â†’ D (constant functor)');
console.log('â€¢ H: C â†’ Set with H(X) = {x0, x1}, H(Y) = {y0}, H(u) collapsing both x_i to y0');
console.log('');

console.log('Expected results:');
console.log('â€¢ Left Kan: should coequalize H(u), giving 1 element (the coequalizer)');
console.log('â€¢ Right Kan: should give families (Î±_X, Î±_Y) satisfying naturality');
console.log('');

// Run the demo
demoKanExample();

console.log('\nðŸŽ‰ Kan extensions demo completed!');
console.log('');
console.log('What this demonstrates:');
console.log('â€¢ Left Kan extension = coend quotient (âˆ«^c D(Fc,d) Ã— H(c))');
console.log('â€¢ Right Kan extension = end with naturality filter (âˆ«_c H(c)^{D(d,Fc)})');
console.log('â€¢ Both computed explicitly for finite categories using union-find and backtracking');
console.log('â€¢ The categorical abstraction becomes concrete, runnable code');
