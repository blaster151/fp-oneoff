{
  "summary": {
    "totalExports": 1815,
    "totalFiles": 404,
    "potentialDuplicates": 9,
    "barrelFiles": 6,
    "unusedExports": 1693
  },
  "duplicates": [
    {
      "normalizedName": "",
      "definitions": [
        {
          "name": "GroupHom",
          "type": "interface",
          "file": "src/structures/group/Hom.ts",
          "line": 4,
          "isReExport": false
        },
        {
          "name": "GroupIso",
          "type": "type",
          "file": "src/structures/group/iso/GroupIso.ts",
          "line": 8,
          "isReExport": false
        },
        {
          "name": "Eq",
          "type": "type",
          "file": "src/types/eq.ts",
          "line": 1,
          "isReExport": false
        },
        {
          "name": "Category",
          "type": "interface",
          "file": "src/types/catkit-comma-categories.ts",
          "line": 17,
          "isReExport": false
        },
        {
          "name": "Iso",
          "type": "interface",
          "file": "src/types/catkit-equivalence.ts",
          "line": 46,
          "isReExport": false
        },
        {
          "name": "FiniteGroup",
          "type": "interface",
          "file": "src/structures/group/Group.ts",
          "line": 2,
          "isReExport": false
        },
        {
          "name": "SmallCategory",
          "type": "interface",
          "file": "src/types/category-to-nerve-sset.ts",
          "line": 11,
          "isReExport": false
        },
        {
          "name": "Finite",
          "type": "interface",
          "file": "src/types/strong-monad.ts",
          "line": 169,
          "isReExport": false
        }
      ],
      "confidence": 0.625
    },
    {
      "normalizedName": "ring",
      "definitions": [
        {
          "name": "RingHom",
          "type": "type",
          "file": "src/structures/ring/RingHom.ts",
          "line": 3,
          "isReExport": false
        },
        {
          "name": "FiniteRing",
          "type": "type",
          "file": "src/structures/ring/Ring.ts",
          "line": 5,
          "isReExport": false
        },
        {
          "name": "Ring",
          "type": "interface",
          "file": "src/types/algebraic.ts",
          "line": 39,
          "isReExport": false
        },
        {
          "name": "RingEq",
          "type": "type",
          "file": "src/structures/ring/Ring.ts",
          "line": 3,
          "isReExport": false
        }
      ],
      "confidence": 0.5714285714285714
    },
    {
      "normalizedName": "monoid",
      "definitions": [
        {
          "name": "FiniteMonoid",
          "type": "type",
          "file": "src/algebra/semiringlike/Monoid.ts",
          "line": 3,
          "isReExport": false
        },
        {
          "name": "MonoidHom",
          "type": "type",
          "file": "src/algebra/semiringlike/Monoid.ts",
          "line": 18,
          "isReExport": false
        },
        {
          "name": "Monoid",
          "type": "type",
          "file": "src/types/measured-fingertree.ts",
          "line": 10,
          "isReExport": false
        }
      ],
      "confidence": 0.5
    },
    {
      "normalizedName": "semigroup",
      "definitions": [
        {
          "name": "FiniteSemigroup",
          "type": "type",
          "file": "src/algebra/semiringlike/Semigroup.ts",
          "line": 1,
          "isReExport": false
        },
        {
          "name": "Semigroup",
          "type": "interface",
          "file": "src/types/algebraic.ts",
          "line": 22,
          "isReExport": false
        }
      ],
      "confidence": 0.6
    },
    {
      "normalizedName": "set",
      "definitions": [
        {
          "name": "FiniteSet",
          "type": "type",
          "file": "src/set/Set.ts",
          "line": 6,
          "isReExport": false
        },
        {
          "name": "SetHom",
          "type": "interface",
          "file": "src/cat/set/SetCat.ts",
          "line": 24,
          "isReExport": false
        }
      ],
      "confidence": 0.1111111111111111
    },
    {
      "normalizedName": "nat",
      "definitions": [
        {
          "name": "Nat",
          "type": "interface",
          "file": "src/types/catkit-equivalence.ts",
          "line": 10,
          "isReExport": false
        },
        {
          "name": "NatIso",
          "type": "interface",
          "file": "src/types/catkit-equivalence.ts",
          "line": 62,
          "isReExport": false
        }
      ],
      "confidence": 0.1
    },
    {
      "normalizedName": "functor",
      "definitions": [
        {
          "name": "Functor",
          "type": "interface",
          "file": "src/types/functors.ts",
          "line": 9,
          "isReExport": false
        },
        {
          "name": "CategoryFunctor",
          "type": "interface",
          "file": "src/types/category-to-nerve-sset.ts",
          "line": 55,
          "isReExport": false
        }
      ],
      "confidence": 0.4666666666666667
    },
    {
      "normalizedName": "prof",
      "definitions": [
        {
          "name": "FiniteProf",
          "type": "interface",
          "file": "src/types/catkit-adjunction.ts",
          "line": 107,
          "isReExport": false
        },
        {
          "name": "Prof",
          "type": "interface",
          "file": "src/types/catkit-adjunction.ts",
          "line": 101,
          "isReExport": false
        }
      ],
      "confidence": 0.1
    },
    {
      "normalizedName": "setnat",
      "definitions": [
        {
          "name": "SetNat",
          "type": "interface",
          "file": "src/types/catkit-kan-transport.ts",
          "line": 27,
          "isReExport": false
        },
        {
          "name": "SetNatIso",
          "type": "interface",
          "file": "src/types/catkit-kan-transport.ts",
          "line": 32,
          "isReExport": false
        }
      ],
      "confidence": 0.1
    }
  ],
  "barrelFiles": [
    {
      "file": "src/algebra/group/Group.ts",
      "reExportCount": 2,
      "reExports": [
        {
          "symbols": [
            "hom"
          ],
          "from": "../../structures/group/Hom.js",
          "file": "src/algebra/group/Group.ts",
          "line": 61
        },
        {
          "symbols": [
            "idHom",
            "compose as composeHomomorphisms"
          ],
          "from": "../../structures/group/GrpCat.js",
          "file": "src/algebra/group/Group.ts",
          "line": 62
        }
      ]
    },
    {
      "file": "src/types/codensity-index.ts",
      "reExportCount": 3,
      "reExports": [
        {
          "symbols": [
            "CodensitySet as default",
            "CodensitySet",
            "computeDiscreteCardinality",
            "isDiscrete",
            "demonstrateCodensitySet"
          ],
          "from": "./codensity-set.js",
          "file": "src/types/codensity-index.ts",
          "line": 24
        },
        {
          "symbols": [
            "powerFunctor",
            "endToNat",
            "natToEnd",
            "createNaturalTransformation",
            "verifyNaturality",
            "unitNaturalTransformation",
            "evaluationNaturalTransformation",
            "multiPointEvaluation",
            "composeCodensityNats",
            "demonstrateNatView"
          ],
          "from": "./codensity-nat-view.js",
          "file": "src/types/codensity-index.ts",
          "line": 32
        },
        {
          "symbols": [
            "mkCodensityMonad",
            "terminalCodensity",
            "discreteCodensity",
            "codensityToHKTMonad",
            "exampleTerminalCodensity",
            "exampleDiscreteCodensity",
            "exampleMonadicComposition",
            "demonstrateCodensityMonad"
          ],
          "from": "./codensity-monad.js",
          "file": "src/types/codensity-index.ts",
          "line": 45
        }
      ]
    },
    {
      "file": "src/types/index.ts",
      "reExportCount": 4,
      "reExports": [
        {
          "symbols": [
            "Surjection",
            "mkSurjection",
            "getSurjection",
            "getSection",
            "// Note: verifySurjection exported from spec-impl.js",
            "avoiding conflict"
          ],
          "from": "./surjection-types.js",
          "file": "src/types/index.ts",
          "line": 138
        },
        {
          "symbols": [
            "DoubleLaxFunctor",
            "// Note: Square",
            "checkDoubleFunctorLaws exported from category-to-nerve-sset.js",
            "avoiding conflict\n  inclusionWitness as doubleLaxInclusionWitness"
          ],
          "from": "./double-lax-functor-interface.js",
          "file": "src/types/index.ts",
          "line": 144
        },
        {
          "symbols": [
            "SpecImplFunctor",
            "createSpecImplFunctor",
            "verifySpecImplFunctor",
            "// Note: ObjPair",
            "numericRangeAbstraction exported from spec-impl.js",
            "avoiding conflict"
          ],
          "from": "./spec-impl-refactored.js",
          "file": "src/types/index.ts",
          "line": 151
        },
        {
          "symbols": [
            "allegoryLawWitness",
            "equipmentWitness",
            "wpTransportWitness",
            "spTransportWitness",
            "modularLawWitness",
            "// Note: squareWitness exported from witnesses.js",
            "avoiding conflict"
          ],
          "from": "./allegory-witness.js",
          "file": "src/types/index.ts",
          "line": 170
        }
      ]
    },
    {
      "file": "src/types/kan-index.ts",
      "reExportCount": 2,
      "reExports": [
        {
          "symbols": [
            "RightKan_Set as RanSetExisting",
            "LeftKan_Set as LanSetExisting"
          ],
          "from": "./catkit-kan.js",
          "file": "src/types/kan-index.ts",
          "line": 12
        },
        {
          "symbols": [
            "RanSet as RanSetPointwise",
            "RanSetDirect as RanSetDirectEnd"
          ],
          "from": "./ran-set.js",
          "file": "src/types/kan-index.ts",
          "line": 17
        }
      ]
    },
    {
      "file": "src/universal/monad/LawvereMonad.ts",
      "reExportCount": 1,
      "reExports": [
        {
          "symbols": [
            "type FiniteSet"
          ],
          "from": "../../set/Set",
          "file": "src/universal/monad/LawvereMonad.ts",
          "line": 18
        }
      ]
    },
    {
      "file": "src/universal/rewrite/index.ts",
      "reExportCount": 4,
      "reExports": [
        {
          "symbols": [
            "type RewriteRule",
            "rule",
            "key",
            "normalize",
            "normalizeHead",
            "normalizeRecursive"
          ],
          "from": "./Rules",
          "file": "src/universal/rewrite/index.ts",
          "line": 16
        },
        {
          "symbols": [
            "monoidNormalForm",
            "semilatticeNormalForm"
          ],
          "from": "./Oriented",
          "file": "src/universal/rewrite/index.ts",
          "line": 26
        },
        {
          "symbols": [
            "type SetMonad",
            "type FreeAlgebra",
            "createSetMonad",
            "createMonoidSetMonad",
            "createSemilatticeSetMonad",
            "testMonadLaws"
          ],
          "from": "./SetMonad",
          "file": "src/universal/rewrite/index.ts",
          "line": 32
        },
        {
          "symbols": [
            "type FiniteSet"
          ],
          "from": "../../set/Set",
          "file": "src/universal/rewrite/index.ts",
          "line": 42
        }
      ]
    }
  ],
  "unusedExports": [
    {
      "name": "codensityOf",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "deriveIntersectionLaw",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "KleinFour",
      "type": "const",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "CyclicCanonical",
      "type": "function",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "DihedralCanonical",
      "type": "function",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "canonicalRepresentatives",
      "type": "const",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "getCanonical",
      "type": "function",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "listCanonical",
      "type": "function",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "cayleyTable",
      "type": "function",
      "file": "src/algebra/group/Cayley.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "isSameTableUpToRename",
      "type": "function",
      "file": "src/algebra/group/Cayley.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "congruenceFromHom",
      "type": "function",
      "file": "src/algebra/group/Congruence.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "isCongruence",
      "type": "function",
      "file": "src/algebra/group/Congruence.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "Equiv",
      "type": "type",
      "file": "src/algebra/group/EnhancedCongruence.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "isEnhancedCongruence",
      "type": "function",
      "file": "src/algebra/group/EnhancedCongruence.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "EnhancedFiniteGroup",
      "type": "interface",
      "file": "src/algebra/group/EnhancedQuotientGroup.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "EnhancedGroupHom",
      "type": "interface",
      "file": "src/algebra/group/EnhancedGroup.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "enhancedGroupHom",
      "type": "function",
      "file": "src/algebra/group/EnhancedGroupHom.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "enhancedQuotientGroup",
      "type": "function",
      "file": "src/algebra/group/EnhancedQuotientGroup.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "mkFiniteGroup",
      "type": "function",
      "file": "src/algebra/group/FiniteGroups.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "TwoElt",
      "type": "type",
      "file": "src/algebra/group/FiniteGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Z2",
      "type": "const",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "canonicalProjection",
      "type": "function",
      "file": "src/algebra/group/FirstIso.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "GroupHomWitnesses",
      "type": "interface",
      "file": "src/algebra/group/analyzeHom.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "AnalyzedHom",
      "type": "interface",
      "file": "src/algebra/group/FirstIso.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "firstIsomorphism",
      "type": "function",
      "file": "src/structures/group/theorems/FirstIso.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "firstIsomorphismData",
      "type": "function",
      "file": "src/algebra/group/FirstIso.ts",
      "line": 113,
      "isReExport": false
    },
    {
      "name": "factorThroughQuotient",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 159,
      "isReExport": false
    },
    {
      "name": "eqOf",
      "type": "const",
      "file": "src/cat/set/SetCat.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "isGroup",
      "type": "function",
      "file": "src/algebra/group/Group.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "Cyclic",
      "type": "function",
      "file": "src/algebra/group/Group.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "idHom",
      "type": "function",
      "file": "src/structures/group/GrpCat.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "compose",
      "type": "function",
      "file": "src/structures/ring/RingHom.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "imageSubgroup",
      "type": "function",
      "file": "src/algebra/group/Image.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "isoClass",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "sameIsoClass",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "multiplicationTable",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "isCanonicalType",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 86,
      "isReExport": false
    },
    {
      "name": "tagCanonicalType",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "kernelNormalSubgroup",
      "type": "function",
      "file": "src/algebra/group/Kernel.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "isNormal",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "Zplus",
      "type": "const",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "Qplus",
      "type": "const",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "autoZ_id",
      "type": "const",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "autoZ_neg",
      "type": "const",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "autoQ_scale",
      "type": "function",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "Coset",
      "type": "type",
      "file": "src/structures/group/Quotient.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "leftCoset",
      "type": "function",
      "file": "src/algebra/group/Quotient.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "sameCoset",
      "type": "function",
      "file": "src/algebra/group/Quotient.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "cosets",
      "type": "function",
      "file": "src/algebra/group/Quotient.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "quotientGroup",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 59,
      "isReExport": false
    },
    {
      "name": "SecondIsoResult",
      "type": "interface",
      "file": "src/algebra/group/SecondIso.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "secondIsomorphism",
      "type": "function",
      "file": "src/algebra/group/SecondIso.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "makeSubgroup",
      "type": "function",
      "file": "src/algebra/group/SubgroupOps.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "intersectionSubgroup",
      "type": "function",
      "file": "src/algebra/group/SubgroupOps.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "productSet",
      "type": "function",
      "file": "src/algebra/group/SubgroupOps.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "ThirdIsoResult",
      "type": "interface",
      "file": "src/algebra/group/ThirdIso.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "thirdIsomorphism",
      "type": "function",
      "file": "src/algebra/group/ThirdIso.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "WithWitnesses",
      "type": "type",
      "file": "src/algebra/group/WitnessGuard.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "analyzeGroupHom",
      "type": "function",
      "file": "src/algebra/group/analyzeHom.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "Zmod",
      "type": "function",
      "file": "src/algebra/ring/Ring.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "modHom",
      "type": "function",
      "file": "src/algebra/group/examples/cyclic.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "ZmodAdd",
      "type": "function",
      "file": "src/algebra/group/examples.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "V4",
      "type": "function",
      "file": "src/algebra/group/finite/StandardGroups.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "Cn",
      "type": "function",
      "file": "src/algebra/group/finite/StandardGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "ElemId",
      "type": "type",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "CayleyTable",
      "type": "type",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "isLatinSquare",
      "type": "function",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "relabel",
      "type": "function",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "canonicalKey",
      "type": "function",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "EnhancedIsoClass",
      "type": "class",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "IsoClassRegistry",
      "type": "class",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "globalIsoRegistry",
      "type": "const",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 100,
      "isReExport": false
    },
    {
      "name": "createEnhancedIsoClass",
      "type": "function",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "autoClassifyGroup",
      "type": "function",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "groupToTable",
      "type": "function",
      "file": "src/algebra/group/iso/GroupToTable.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "tableToGroup",
      "type": "function",
      "file": "src/algebra/group/iso/GroupToTable.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "groupToIsoClass",
      "type": "function",
      "file": "src/algebra/group/iso/GroupToTable.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "orderSpectrum",
      "type": "function",
      "file": "src/algebra/group/iso/IsoClass.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "RingHom",
      "type": "type",
      "file": "src/structures/ring/RingHom.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "RingWitnesses",
      "type": "interface",
      "file": "src/algebra/ring/Hom.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "ringHom",
      "type": "function",
      "file": "src/algebra/ring/Hom.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "isRingHom",
      "type": "function",
      "file": "src/structures/ring/RingHom.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "analyzeRingHom",
      "type": "function",
      "file": "src/algebra/ring/Hom.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "FiniteRing",
      "type": "type",
      "file": "src/structures/ring/Ring.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "req",
      "type": "const",
      "file": "src/algebra/ring/Ring.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "RProd",
      "type": "function",
      "file": "src/algebra/ring/Ring.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "FiniteMonoid",
      "type": "type",
      "file": "src/algebra/semiringlike/Monoid.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "checkMonoid",
      "type": "function",
      "file": "src/algebra/semiringlike/Monoid.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "MonoidHom",
      "type": "type",
      "file": "src/algebra/semiringlike/Monoid.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "isMonoidHom",
      "type": "function",
      "file": "src/algebra/semiringlike/Monoid.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "FiniteSemigroup",
      "type": "type",
      "file": "src/algebra/semiringlike/Semigroup.ts",
      "line": 1,
      "isReExport": false
    },
    {
      "name": "checkSemigroup",
      "type": "function",
      "file": "src/algebra/semiringlike/Semigroup.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "ZnAdd",
      "type": "function",
      "file": "src/algebra/semiringlike/examples/Monoids.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "StringsOver",
      "type": "function",
      "file": "src/algebra/semiringlike/examples/Monoids.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Word",
      "type": "type",
      "file": "src/algebra/semiringlike/free/FreeMonoid.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "FreeMonoid",
      "type": "function",
      "file": "src/algebra/semiringlike/free/FreeMonoid.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "U_underlying",
      "type": "function",
      "file": "src/algebra/semiringlike/free/FreeMonoid.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "liftToMonoidHom",
      "type": "function",
      "file": "src/algebra/semiringlike/free/FreeMonoid.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "BenchmarkConfig",
      "type": "interface",
      "file": "src/bench/rel-benchmark.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "OperationResult",
      "type": "interface",
      "file": "src/bench/rel-benchmark.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "BenchmarkRun",
      "type": "interface",
      "file": "src/bench/rel-benchmark.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "RelationGenerator",
      "type": "class",
      "file": "src/bench/rel-benchmark.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "timeOperation",
      "type": "function",
      "file": "src/bench/rel-benchmark.ts",
      "line": 96,
      "isReExport": false
    },
    {
      "name": "estimateMemoryUsage",
      "type": "function",
      "file": "src/bench/rel-benchmark.ts",
      "line": 109,
      "isReExport": false
    },
    {
      "name": "transitiveClosure",
      "type": "function",
      "file": "src/bench/rel-benchmark.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "transitiveClosureBit",
      "type": "function",
      "file": "src/bench/rel-benchmark.ts",
      "line": 140,
      "isReExport": false
    },
    {
      "name": "RelBenchmark",
      "type": "class",
      "file": "src/bench/rel-benchmark.ts",
      "line": 175,
      "isReExport": false
    },
    {
      "name": "FiniteSet",
      "type": "type",
      "file": "src/set/Set.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "SetObj",
      "type": "type",
      "file": "src/types/catkit-kan.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "SetHom",
      "type": "interface",
      "file": "src/cat/set/SetCat.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "SetWitnesses",
      "type": "interface",
      "file": "src/cat/set/SetCat.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "setHom",
      "type": "function",
      "file": "src/cat/set/SetCat.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "analyzeSetHom",
      "type": "function",
      "file": "src/cat/set/SetCat.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "refl",
      "type": "const",
      "file": "src/gadt/Reduction.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "coerce",
      "type": "const",
      "file": "src/category/Eq.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "HComp",
      "type": "function",
      "file": "src/category/HComp.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "lanHFunctor",
      "type": "function",
      "file": "src/category/HFunctor.Lan.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "HFunctor",
      "type": "interface",
      "file": "src/gadt/HFun.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "hfunctorLaws",
      "type": "function",
      "file": "src/category/HFunctor.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Lan1",
      "type": "type",
      "file": "src/category/Lan.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "Apply",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "Nat1",
      "type": "type",
      "file": "src/category/Nat.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "LanIdId",
      "type": "type",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "lanIdIdImpl",
      "type": "const",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "LanIdMaybe",
      "type": "type",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "lanIdMaybeImpl",
      "type": "const",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "composeViaLan",
      "type": "const",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "demonstrateLanGadtBridge",
      "type": "const",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "Moore",
      "type": "type",
      "file": "src/coalgebra/Coalgebra.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "isCoalgebraHom",
      "type": "function",
      "file": "src/coalgebra/Coalgebra.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "demo",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 477,
      "isReExport": false
    },
    {
      "name": "testBridgeSafety",
      "type": "function",
      "file": "src/examples/bridge-safety-test.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "witnessDemo",
      "type": "function",
      "file": "src/examples/comprehensive-witness-demo.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "runEMMonoidDemo",
      "type": "function",
      "file": "src/examples/em-monoid-demo.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "finalDemo",
      "type": "function",
      "file": "src/examples/final-comprehensive-demo.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "lawcheckWitnessDemo",
      "type": "function",
      "file": "src/examples/lawcheck-witness-demo.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "opticsLawcheckDemo",
      "type": "function",
      "file": "src/examples/optics-lawcheck-demo.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "demonstrateStrategyAwareness",
      "type": "function",
      "file": "src/examples/parity-guards-demo.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "Category",
      "type": "interface",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "Functor",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "thinCategory",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "monotoneAsFunctor",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "CommaObj",
      "type": "type",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "CommaMor",
      "type": "type",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "demonstratePropertyShrinking",
      "type": "function",
      "file": "src/examples/property-shrinking-demo.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "runQuickstartExamples",
      "type": "function",
      "file": "src/examples/quickstart-examples.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "demonstrateRelBenchmark",
      "type": "function",
      "file": "src/examples/rel-benchmark-demo.ts",
      "line": 345,
      "isReExport": false
    },
    {
      "name": "demonstrateBeforeAfter",
      "type": "function",
      "file": "src/examples/shrinking-before-after-demo.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "simpleWitnessDemo",
      "type": "function",
      "file": "src/examples/simple-witness-demo.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "demonstrateAPI",
      "type": "function",
      "file": "src/examples/snf-surface-api-demo.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "snfWitnessDemo",
      "type": "function",
      "file": "src/examples/snf-witness-demo.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "fuzzSpecImplLaws",
      "type": "function",
      "file": "src/examples/spec-impl-fuzz.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "comprehensiveDemo",
      "type": "function",
      "file": "src/examples/spec-impl-fuzz.ts",
      "line": 161,
      "isReExport": false
    },
    {
      "name": "demonstrateTorusHomology",
      "type": "function",
      "file": "src/examples/torus-homology-demo.ts",
      "line": 167,
      "isReExport": false
    },
    {
      "name": "demonstrateTypeSafeBridge",
      "type": "function",
      "file": "src/examples/type-safe-bridge-demo.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "demonstrateUnifiedLawCheck",
      "type": "function",
      "file": "src/examples/unified-lawcheck-demo.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "demonstrateUniformDisplay",
      "type": "function",
      "file": "src/examples/uniform-display-demo.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "coreWitnessDemo",
      "type": "function",
      "file": "src/examples/witness-core-demo.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "witnessProgressDemo",
      "type": "function",
      "file": "src/examples/witness-propagation-progress.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "demonstrateWriterRewrite",
      "type": "function",
      "file": "src/examples/writer-rewrite-demo.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "toChurch",
      "type": "const",
      "file": "src/gadt/Church.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "fromChurch",
      "type": "const",
      "file": "src/gadt/Church.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "GAlgebra",
      "type": "type",
      "file": "src/gadt/Initial.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "GCoalgebra",
      "type": "type",
      "file": "src/gadt/Initial.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "gfold",
      "type": "const",
      "file": "src/gadt/Initial.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "GBuilder",
      "type": "type",
      "file": "src/gadt/Initial.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "gbuildFrom",
      "type": "const",
      "file": "src/gadt/Initial.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "gfoldBuild",
      "type": "const",
      "file": "src/gadt/Initial.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "EqWit",
      "type": "interface",
      "file": "src/gadt/Reduction.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "Exists",
      "type": "type",
      "file": "src/gadt/Reduction.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "pack",
      "type": "const",
      "file": "src/gadt/Reduction.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "unpack",
      "type": "const",
      "file": "src/gadt/Reduction.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "fold",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "buildFrom",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "fusion",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "toChurchFix",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "fromChurchBuilder",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "hyloChurch",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "Unit",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "Either",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "Left",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "Right",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "GB",
      "type": "type",
      "file": "src/gadt/basic/BFin.Lan.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "bfinConViaLan",
      "type": "function",
      "file": "src/gadt/basic/BFin.Lan.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "BFinF",
      "type": "type",
      "file": "src/gadt/basic/BFin.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "zero",
      "type": "function",
      "file": "src/structures/ab/AbCategory.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "succ",
      "type": "const",
      "file": "src/gadt/basic/BFin.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "foldBFin",
      "type": "const",
      "file": "src/gadt/basic/BFin.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "enumerate",
      "type": "const",
      "file": "src/gadt/basic/BFin.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "Z",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "isZ",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "isS",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "pred",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "natEq",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "fromNumber",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "toNumber",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "GV",
      "type": "type",
      "file": "src/gadt/basic/Vec.Lan.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "vecConViaLan",
      "type": "function",
      "file": "src/gadt/basic/Vec.Lan.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "VecF",
      "type": "type",
      "file": "src/gadt/basic/Vec.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "vnil",
      "type": "const",
      "file": "src/gadt/basic/Vec.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "vcons",
      "type": "const",
      "file": "src/gadt/basic/Vec.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "foldVec",
      "type": "const",
      "file": "src/gadt/basic/Vec.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "length",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "toArray",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 59,
      "isReExport": false
    },
    {
      "name": "TermF",
      "type": "type",
      "file": "src/gadt/examples/Term.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "Const",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "App",
      "type": "const",
      "file": "src/universal/Term.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "foldTerm",
      "type": "const",
      "file": "src/gadt/examples/Term.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "evalTerm",
      "type": "function",
      "file": "src/universal/Algebra.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "showTerm",
      "type": "const",
      "file": "src/gadt/examples/Term.ts",
      "line": 50,
      "isReExport": false
    },
    {
      "name": "termInc",
      "type": "const",
      "file": "src/gadt/examples/Term.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "withHMap",
      "type": "function",
      "file": "src/higher/HFix.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "hmapH",
      "type": "function",
      "file": "src/higher/HFix.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "Hin",
      "type": "const",
      "file": "src/higher/HFix.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "Hout",
      "type": "const",
      "file": "src/higher/HFix.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "HAlgebra",
      "type": "type",
      "file": "src/higher/HFix.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "hcata",
      "type": "const",
      "file": "src/higher/HFix.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "Adjunction",
      "type": "interface",
      "file": "src/types/catkit-adjunction.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "adjunctionRoundTripLaws",
      "type": "function",
      "file": "src/laws/Adjunction.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "monoidLaws",
      "type": "function",
      "file": "src/laws/Monoid.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "lawfulMonoid",
      "type": "function",
      "file": "src/laws/Monoid.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "naturalityLaws",
      "type": "function",
      "file": "src/laws/Natural.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "posetLaws",
      "type": "function",
      "file": "src/laws/Order.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "completeLatticeLaws",
      "type": "function",
      "file": "src/laws/Order.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "lfpFixedPointLaw",
      "type": "function",
      "file": "src/laws/Order.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "lawfulDistNumber",
      "type": "function",
      "file": "src/laws/Prob.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "lawfulKleisliCategory",
      "type": "function",
      "file": "src/laws/ProbKleisli.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "lawfulKernelMatrixIso",
      "type": "function",
      "file": "src/laws/ProbMatrixKernelIso.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "lawfulTopContinuity",
      "type": "function",
      "file": "src/laws/TopContinuity.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "lawfulTopProductUP",
      "type": "function",
      "file": "src/laws/TopProductUP.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "Lawful",
      "type": "type",
      "file": "src/laws/Witness.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "isoLaws",
      "type": "function",
      "file": "src/laws/Witness.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "runLaws",
      "type": "function",
      "file": "src/laws/Witness.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "CodensityNatPack",
      "type": "type",
      "file": "src/laws/examples/CodensityNat.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "lawfulCodensityIso",
      "type": "function",
      "file": "src/laws/examples/CodensityNat.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "codensityLawPack",
      "type": "const",
      "file": "src/laws/examples/ConcreteCodensity.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "StringMonoid",
      "type": "const",
      "file": "src/laws/examples/ESLintDemo.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "TaggedMonoid",
      "type": "const",
      "file": "src/laws/examples/ESLintDemo.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "regularFunction",
      "type": "const",
      "file": "src/laws/examples/ESLintDemo.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "testRingMultiplicativeLaws",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "testDivisibilityPoset",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "testCRTIsomorphism",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "testPowersetLattice",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "runAllExamples",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "LawsExamples",
      "type": "const",
      "file": "src/laws/examples.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "registerLawful",
      "type": "function",
      "file": "src/laws/registry.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "clearLawful",
      "type": "function",
      "file": "src/laws/registry.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "allLawful",
      "type": "function",
      "file": "src/laws/registry.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "runAll",
      "type": "function",
      "file": "src/laws/registry.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "make",
      "type": "function",
      "file": "src/number/Rational.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "add",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "neg",
      "type": "function",
      "file": "src/number/Rational.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "mul",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "fromBigInt",
      "type": "function",
      "file": "src/number/Rational.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "CPO",
      "type": "type",
      "file": "src/order/Domain.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "isChain",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "cpoFromPoset",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "isScottContinuous",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "lfpOmega",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "powersetCPO",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "GaloisConnection",
      "type": "interface",
      "file": "src/types/catkit-posets.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "isGalois",
      "type": "function",
      "file": "src/order/Galois.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "closureOnX",
      "type": "function",
      "file": "src/order/Galois.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "kernelOnY",
      "type": "function",
      "file": "src/order/Galois.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "BoundedLattice",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "CompleteLattice",
      "type": "type",
      "file": "src/order/Lattice.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "powersetLattice",
      "type": "function",
      "file": "src/order/Lattice.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "lfp",
      "type": "function",
      "file": "src/order/Lattice.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "posetEqFromLeq",
      "type": "function",
      "file": "src/order/Poset.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "isPoset",
      "type": "function",
      "file": "src/order/Poset.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Monotone",
      "type": "type",
      "file": "src/order/Poset.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "isMonotone",
      "type": "function",
      "file": "src/order/Poset.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "productPoset",
      "type": "function",
      "file": "src/order/Poset.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "posetFromPairs",
      "type": "function",
      "file": "src/order/dsl.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "subsetPoset",
      "type": "function",
      "file": "src/order/dsl.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "latticeFromPoset",
      "type": "function",
      "file": "src/order/dsl.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "completeFromBounded",
      "type": "function",
      "file": "src/order/dsl.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "Tiny",
      "type": "const",
      "file": "src/order/dsl.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "support",
      "type": "function",
      "file": "src/prob/Dist.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "eqDist",
      "type": "function",
      "file": "src/prob/Dist.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "DistMonad",
      "type": "const",
      "file": "src/prob/Dist.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "kid",
      "type": "function",
      "file": "src/prob/Kleisli.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "kcomp",
      "type": "function",
      "file": "src/prob/Kleisli.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "kmap",
      "type": "function",
      "file": "src/prob/Kleisli.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "Stoch",
      "type": "type",
      "file": "src/prob/Markov.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "isRowStochastic",
      "type": "function",
      "file": "src/prob/Markov.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "idStoch",
      "type": "function",
      "file": "src/prob/Markov.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "kernelToMatrix",
      "type": "function",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "matrixToKernel",
      "type": "function",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "approxEqMatrix",
      "type": "function",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "kernelsEq",
      "type": "function",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "Samples",
      "type": "const",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "Inl",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "Inr",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "coproduct",
      "type": "function",
      "file": "src/types/finset-colimits.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "Fn",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "comp",
      "type": "const",
      "file": "src/structures/group/cat/GroupCat.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "equalByGraph",
      "type": "function",
      "file": "src/set/Fn.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "product",
      "type": "function",
      "file": "src/top/Topology.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "quotient",
      "type": "function",
      "file": "src/set/Quotient.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "mkFiniteSet",
      "type": "function",
      "file": "src/set/Set.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "member",
      "type": "function",
      "file": "src/set/Set.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "image",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 104,
      "isReExport": false
    },
    {
      "name": "preimage",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "zeroObject",
      "type": "function",
      "file": "src/structures/ab/builders/KernelsCokernels.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "biproduct",
      "type": "function",
      "file": "src/structures/ab/builders/Biproduct.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "productLift",
      "type": "function",
      "file": "src/structures/ab/AbCategory.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "coproductLift",
      "type": "function",
      "file": "src/structures/ab/AbCategory.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "exactAtMiddle",
      "type": "function",
      "file": "src/structures/ab/AbCategory.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "FiniteAbGroup",
      "type": "type",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "checkAbelian",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "asAbelian",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Trivial",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "homAdd",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "zeroHom",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "homNeg",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "ker",
      "type": "function",
      "file": "src/structures/ab/builders/KernelsCokernels.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "coker",
      "type": "function",
      "file": "src/structures/ab/builders/KernelsCokernels.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "zeroMor",
      "type": "function",
      "file": "src/structures/ab/builders/KernelsCokernels.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "Z3",
      "type": "const",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Z4",
      "type": "const",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "Z5",
      "type": "const",
      "file": "src/structures/ab/examples/AbelianGroups.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "directSum",
      "type": "function",
      "file": "src/structures/ab/examples/AbelianGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "enumerateHoms",
      "type": "function",
      "file": "src/structures/ab/hom/Enumerate.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "exp_i",
      "type": "const",
      "file": "src/structures/group/Complex.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "trivial",
      "type": "function",
      "file": "src/structures/group/Group.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "checkGroup",
      "type": "function",
      "file": "src/structures/group/Group.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "Zn",
      "type": "function",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "Obj",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "Mor",
      "type": "type",
      "file": "src/types/mini-finset.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "proj1",
      "type": "function",
      "file": "src/top/ProductUP.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "proj2",
      "type": "function",
      "file": "src/top/ProductUP.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "pairIntoProduct",
      "type": "function",
      "file": "src/structures/group/builders/Product.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "toTrivial",
      "type": "function",
      "file": "src/structures/group/GrpCat.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "fromTrivial",
      "type": "function",
      "file": "src/structures/group/GrpCat.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "collapse",
      "type": "function",
      "file": "src/structures/group/GrpCat.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "injectiveOn",
      "type": "function",
      "file": "src/structures/group/HomHelpers.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "surjectiveTo",
      "type": "function",
      "file": "src/structures/group/HomHelpers.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "approxEq",
      "type": "const",
      "file": "src/structures/group/HomHelpers.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "inclusion",
      "type": "function",
      "file": "src/top/Embeddings.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "isHom",
      "type": "function",
      "file": "src/structures/group/Isomorphism.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "bijectionWitness",
      "type": "function",
      "file": "src/structures/group/Isomorphism.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "isIsomorphism",
      "type": "function",
      "file": "src/structures/group/Isomorphism.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "automorphismsBruteforce",
      "type": "function",
      "file": "src/structures/group/Isomorphism.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "leftCosets",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "cosetEq",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "cosetOp",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "cosetInv",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "projToQuotient",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "kernel",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "subgroupFromPredicate",
      "type": "function",
      "file": "src/structures/group/Subgroup.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "isSubgroup",
      "type": "function",
      "file": "src/structures/group/Subgroup.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "UnitsMod",
      "type": "function",
      "file": "src/structures/group/Units.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "Action",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "isAction",
      "type": "function",
      "file": "src/structures/group/actions/Action.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "leftRegular",
      "type": "function",
      "file": "src/structures/group/actions/Action.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "conjugation",
      "type": "function",
      "file": "src/structures/group/automorphisms/Conjugation.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "Auto",
      "type": "type",
      "file": "src/structures/group/automorphisms/Aut.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "enumerateAutomorphisms",
      "type": "function",
      "file": "src/structures/group/automorphisms/Aut.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "autGroup",
      "type": "function",
      "file": "src/structures/group/automorphisms/Aut.ts",
      "line": 84,
      "isReExport": false
    },
    {
      "name": "isInnerAutomorphism",
      "type": "function",
      "file": "src/structures/group/automorphisms/Conjugation.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "innerAutomorphisms",
      "type": "function",
      "file": "src/structures/group/automorphisms/Inner.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "innGroup",
      "type": "function",
      "file": "src/structures/group/automorphisms/Inner.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "productGroup",
      "type": "function",
      "file": "src/structures/group/builders/Product.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "productGroupTuples",
      "type": "function",
      "file": "src/structures/group/builders/Product.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "projections",
      "type": "function",
      "file": "src/structures/ring/RingCategory.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "pairHom",
      "type": "function",
      "file": "src/structures/ring/RingCategory.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "isNormalSubgroup",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "asFiniteGroup",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "homEqByPoints",
      "type": "function",
      "file": "src/structures/group/cat/GroupCat.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "verifyProductUP",
      "type": "function",
      "file": "src/structures/group/cat/GroupCat.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "enumerateEndomorphisms",
      "type": "function",
      "file": "src/structures/group/endo/End.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "endMonoid",
      "type": "function",
      "file": "src/structures/group/endo/End.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "unitsAsAutos",
      "type": "function",
      "file": "src/structures/group/endo/End.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "parityHom",
      "type": "function",
      "file": "src/structures/group/homs/Examples24.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "Z_to_Q",
      "type": "function",
      "file": "src/structures/group/homs/Examples24.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "R_to_Cstar_expix",
      "type": "function",
      "file": "src/structures/group/homs/Examples24.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "isoId",
      "type": "function",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "isoComp",
      "type": "function",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "isoInverse",
      "type": "function",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "isoEqByPoints",
      "type": "function",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "IsoOps",
      "type": "const",
      "file": "src/structures/group/iso/IsoOps.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "eqFromScheme",
      "type": "function",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "tupleScheme",
      "type": "function",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "arrayTupleScheme",
      "type": "function",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "indexScheme",
      "type": "function",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "GmodZ_iso_Inn",
      "type": "function",
      "file": "src/structures/group/theorems/GmodZ_Inn.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "Z8",
      "type": "const",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "primePowerFactorization",
      "type": "function",
      "file": "src/structures/ring/CRT.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "crtIsomorphism",
      "type": "function",
      "file": "src/structures/ring/CRT.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "crtForZn",
      "type": "function",
      "file": "src/structures/ring/CRT.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "idealGeneratedBy",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "isIdeal",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "quotientRing",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "isFieldComm",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 114,
      "isReExport": false
    },
    {
      "name": "isPrimeIdealComm",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "isMaximalIdealComm",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 138,
      "isReExport": false
    },
    {
      "name": "PolyRing",
      "type": "function",
      "file": "src/structures/ring/Poly.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "evalPoly",
      "type": "function",
      "file": "src/structures/ring/Poly.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "evalHom",
      "type": "function",
      "file": "src/structures/ring/Poly.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "RingEq",
      "type": "type",
      "file": "src/structures/ring/Ring.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "checkRingLaws",
      "type": "function",
      "file": "src/structures/ring/Ring.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "ZnRing",
      "type": "function",
      "file": "src/structures/ring/Ring.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "M2",
      "type": "type",
      "file": "src/structures/ring/Ring.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "M2ZnRing",
      "type": "function",
      "file": "src/structures/ring/Ring.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "productRing",
      "type": "function",
      "file": "src/structures/ring/RingCategory.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "forgetAdditive",
      "type": "function",
      "file": "src/structures/ring/RingCategory.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "enumerateIdeals",
      "type": "function",
      "file": "src/structures/ring/Spec.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "Prime",
      "type": "type",
      "file": "src/structures/ring/Spec.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "closure",
      "type": "function",
      "file": "src/structures/ring/Spec.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "mapsEqual",
      "type": "function",
      "file": "src/top/Embeddings.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "checkProductUP",
      "type": "function",
      "file": "src/top/ProductUP.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "sierpinski",
      "type": "function",
      "file": "src/top/Spaces.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "subspace",
      "type": "function",
      "file": "src/top/Subspace.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "indiscrete",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "continuous",
      "type": "function",
      "file": "src/top/Topology.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "ExprF",
      "type": "type",
      "file": "src/types/optics-rewrite.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "NumF",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "AddF",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "MulF",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "NegF",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "Expr",
      "type": "type",
      "file": "src/types/gadt-expr.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "Num",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "Add",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 297,
      "isReExport": false
    },
    {
      "name": "Mul",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "Neg",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "evalExpr",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1023,
      "isReExport": false
    },
    {
      "name": "showExpr",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "optimizeExpr",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "countOps",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "demonstrateExprOpADT",
      "type": "function",
      "file": "src/types/adt-expr-op.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "Out",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "withMap",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "mapF",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "cata",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "hylo",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "para",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "apo",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "zygo",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 87,
      "isReExport": false
    },
    {
      "name": "zygoPair",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 120,
      "isReExport": false
    },
    {
      "name": "histo",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "verifyAlgebraLaws",
      "type": "function",
      "file": "src/types/adt-fix.ts",
      "line": 165,
      "isReExport": false
    },
    {
      "name": "demonstrateFixpointTheory",
      "type": "function",
      "file": "src/types/adt-fix.ts",
      "line": 214,
      "isReExport": false
    },
    {
      "name": "FunctorF",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "Endofunctor",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "FunctorAlgebra",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "FunctorCoalgebra",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "AlgebraHomomorphism",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "InitialAlgebra",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "demonstrateFunctorAlgebras",
      "type": "function",
      "file": "src/types/adt-functor.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "ListF",
      "type": "type",
      "file": "src/types/adt-list.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "NilF",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "ConsF",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "List",
      "type": "type",
      "file": "src/types/adt-list.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "Nil",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "Cons",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "foldRight",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "foldLeft",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "fromArray",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "map",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "append",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "unfold",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "hyloSum",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "lengthPara",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "unfoldWithSuffix",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "demonstrateListADT",
      "type": "function",
      "file": "src/types/adt-list.ts",
      "line": 95,
      "isReExport": false
    },
    {
      "name": "matchPartial",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "matchWith",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "tagGuard",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "exhaustive",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "demonstratePatternMatching",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "makeSchemes",
      "type": "function",
      "file": "src/types/adt-rec-schemes.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "demonstrateExternalSchemes",
      "type": "function",
      "file": "src/types/adt-rec-schemes.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "RoseF",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "Rose",
      "type": "type",
      "file": "src/types/adt-rose.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "Node",
      "type": "type",
      "file": "src/types/fingertree.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "foldRose",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "buildRose",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "roseSize",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "roseHeight",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "roseLeaves",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 52,
      "isReExport": false
    },
    {
      "name": "mapRose",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "demonstrateRoseTreeADT",
      "type": "function",
      "file": "src/types/adt-rose.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "Sum",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "inl",
      "type": "const",
      "file": "src/types/adt-sum-prod.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "inr",
      "type": "const",
      "file": "src/types/adt-sum-prod.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "unit",
      "type": "const",
      "file": "src/types/adt-sum-prod.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Void",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Option",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "None",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Some",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "isInl",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "isInr",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "isNone",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "isSome",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "fromOption",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "mapOption",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "isLeft",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "isRight",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "mapEither",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "demonstrateSumProductTypes",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "BinaryTreeF",
      "type": "type",
      "file": "src/types/adt-tree.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "LeafF",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "BranchF",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "BinaryTree",
      "type": "type",
      "file": "src/types/adt-tree.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "Leaf",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "Branch",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "foldTree",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "treeSize",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "treeHeight",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "treeToArray",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "mapTree",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 44,
      "isReExport": false
    },
    {
      "name": "filterTree",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "buildComplete",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "demonstrateBinaryTreeADT",
      "type": "function",
      "file": "src/types/adt-tree.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "Arrow",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "ArrowChoice",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "ArrowApply",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "Representable",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "Distributive",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "Profunctor2",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "Strong",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "Choice",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "Closed",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "POptic",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "PIso",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 59,
      "isReExport": false
    },
    {
      "name": "PLens",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "PPrism",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "lens",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 177,
      "isReExport": false
    },
    {
      "name": "functionStrong",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "ForgetProfunctor",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "forgetStrong",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 116,
      "isReExport": false
    },
    {
      "name": "createForgetStrong",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 126,
      "isReExport": false
    },
    {
      "name": "over",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "leftEither",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 158,
      "isReExport": false
    },
    {
      "name": "starWander",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 178,
      "isReExport": false
    },
    {
      "name": "PTraversal",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 199,
      "isReExport": false
    },
    {
      "name": "each",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 201,
      "isReExport": false
    },
    {
      "name": "foldFree",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 222,
      "isReExport": false
    },
    {
      "name": "Cofree",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 229,
      "isReExport": false
    },
    {
      "name": "FreeCoalgebra",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 231,
      "isReExport": false
    },
    {
      "name": "unfoldCofree",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 235,
      "isReExport": false
    },
    {
      "name": "pure",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "liftF",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 246,
      "isReExport": false
    },
    {
      "name": "FreeAp",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "apAp",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 254,
      "isReExport": false
    },
    {
      "name": "foldFreeAp",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 260,
      "isReExport": false
    },
    {
      "name": "Coyoneda",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "liftCoy",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 270,
      "isReExport": false
    },
    {
      "name": "lowerCoy",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 272,
      "isReExport": false
    },
    {
      "name": "FreeLegacy",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 276,
      "isReExport": false
    },
    {
      "name": "ExprFFunctor",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 286,
      "isReExport": false
    },
    {
      "name": "evalExprAlg",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 301,
      "isReExport": false
    },
    {
      "name": "printExprAlg",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 308,
      "isReExport": false
    },
    {
      "name": "Pure",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "Suspend",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 321,
      "isReExport": false
    },
    {
      "name": "CurriedLens",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 332,
      "isReExport": false
    },
    {
      "name": "AdvancedPrism",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 337,
      "isReExport": false
    },
    {
      "name": "Traversal",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 135,
      "isReExport": false
    },
    {
      "name": "Show",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "Semiring",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "MeetSemilattice",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "JoinSemilattice",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "HeytingAlgebra",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "Semigroupoid",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "LeftModule",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "LeftComodule",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 104,
      "isReExport": false
    },
    {
      "name": "refines",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 180,
      "isReExport": false
    },
    {
      "name": "relEqual",
      "type": "function",
      "file": "src/types/allegory-witness.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "TripleKind",
      "type": "type",
      "file": "src/types/allegory-witness.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "HoareWitness",
      "type": "type",
      "file": "src/types/allegory-witness.ts",
      "line": 72,
      "isReExport": false
    },
    {
      "name": "hoareWitness",
      "type": "function",
      "file": "src/types/allegory-witness.ts",
      "line": 80,
      "isReExport": false
    },
    {
      "name": "squareWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 262,
      "isReExport": false
    },
    {
      "name": "demonstrateAllegoryWitnesses",
      "type": "function",
      "file": "src/types/allegory-witness.ts",
      "line": 282,
      "isReExport": false
    },
    {
      "name": "Bicategory",
      "type": "interface",
      "file": "src/types/bicategory.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "checkBicategoryCoherence",
      "type": "function",
      "file": "src/types/bicategory.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "demonstrateBicategory",
      "type": "function",
      "file": "src/types/bicategory.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "BitSet",
      "type": "class",
      "file": "src/types/bitrel.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "BitMatrix",
      "type": "class",
      "file": "src/types/bitrel.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "BitRel",
      "type": "class",
      "file": "src/types/bitrel.ts",
      "line": 195,
      "isReExport": false
    },
    {
      "name": "randomBitRel",
      "type": "function",
      "file": "src/types/bitrel.ts",
      "line": 319,
      "isReExport": false
    },
    {
      "name": "timeExecution",
      "type": "function",
      "file": "src/types/bitrel.ts",
      "line": 332,
      "isReExport": false
    },
    {
      "name": "adaptBitRelToRel",
      "type": "function",
      "file": "src/types/bitrel.ts",
      "line": 342,
      "isReExport": false
    },
    {
      "name": "adaptRelToBitRel",
      "type": "function",
      "file": "src/types/bitrel.ts",
      "line": 347,
      "isReExport": false
    },
    {
      "name": "CatBicat",
      "type": "function",
      "file": "src/types/cat-bicat.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "demonstrateCatBicat",
      "type": "function",
      "file": "src/types/cat-bicat.ts",
      "line": 130,
      "isReExport": false
    },
    {
      "name": "Cat2",
      "type": "function",
      "file": "src/types/cat2.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "demonstrateCat2",
      "type": "function",
      "file": "src/types/cat2.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "SmallCategory",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "Edge",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "Quiver",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "PathMor",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "makeFreeCategory",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "CategoryFunctor",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "NatTrans",
      "type": "interface",
      "file": "src/types/codensity-nat-bridge.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "checkFunctorLaws",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "checkNaturality",
      "type": "function",
      "file": "src/types/presheaf.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "NSimplex",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "SimplicialSet",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 112,
      "isReExport": false
    },
    {
      "name": "Nerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 126,
      "isReExport": false
    },
    {
      "name": "mapNerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "Q_ABC",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 215,
      "isReExport": false
    },
    {
      "name": "C_free",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 216,
      "isReExport": false
    },
    {
      "name": "f1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "g1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 220,
      "isReExport": false
    },
    {
      "name": "h1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 221,
      "isReExport": false
    },
    {
      "name": "N_free",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 224,
      "isReExport": false
    },
    {
      "name": "sigma2",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 227,
      "isReExport": false
    },
    {
      "name": "d0",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 230,
      "isReExport": false
    },
    {
      "name": "d1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 231,
      "isReExport": false
    },
    {
      "name": "d2",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 232,
      "isReExport": false
    },
    {
      "name": "s1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 235,
      "isReExport": false
    },
    {
      "name": "showPath",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 238,
      "isReExport": false
    },
    {
      "name": "showSimplex",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 244,
      "isReExport": false
    },
    {
      "name": "concatSimplex",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 251,
      "isReExport": false
    },
    {
      "name": "compose1From1",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 262,
      "isReExport": false
    },
    {
      "name": "compose1From2",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 274,
      "isReExport": false
    },
    {
      "name": "QuiverMorphism",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "pushoutQuiver",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 302,
      "isReExport": false
    },
    {
      "name": "Q1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 356,
      "isReExport": false
    },
    {
      "name": "Q2",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 357,
      "isReExport": false
    },
    {
      "name": "Q0",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 358,
      "isReExport": false
    },
    {
      "name": "i1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 360,
      "isReExport": false
    },
    {
      "name": "i2",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 365,
      "isReExport": false
    },
    {
      "name": "PO_Q",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 371,
      "isReExport": false
    },
    {
      "name": "InnerHorn2",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 384,
      "isReExport": false
    },
    {
      "name": "makeInnerHorn2",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 391,
      "isReExport": false
    },
    {
      "name": "validateInnerHorn2",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 403,
      "isReExport": false
    },
    {
      "name": "fillInnerHorn2_Nerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 418,
      "isReExport": false
    },
    {
      "name": "hasUniqueInnerHorn2_Nerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 430,
      "isReExport": false
    },
    {
      "name": "QuasiCategory",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 441,
      "isReExport": false
    },
    {
      "name": "asQuasiFromNerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 447,
      "isReExport": false
    },
    {
      "name": "d1_of_2simplex",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 470,
      "isReExport": false
    },
    {
      "name": "checkFilledHorn2",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 482,
      "isReExport": false
    },
    {
      "name": "Square",
      "type": "type",
      "file": "src/types/double-lax-functor.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "DoubleCategory",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "makeCommutingSquaresDouble",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 559,
      "isReExport": false
    },
    {
      "name": "checkInterchange",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 651,
      "isReExport": false
    },
    {
      "name": "DoubleFunctor",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 684,
      "isReExport": false
    },
    {
      "name": "checkDoubleFunctorLaws",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 172,
      "isReExport": false
    },
    {
      "name": "Rel",
      "type": "class",
      "file": "src/types/rel-equipment.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "FnM",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 768,
      "isReExport": false
    },
    {
      "name": "RelCat",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 776,
      "isReExport": false
    },
    {
      "name": "FuncCat",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 798,
      "isReExport": false
    },
    {
      "name": "diagRel",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 810,
      "isReExport": false
    },
    {
      "name": "subsetRel",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 813,
      "isReExport": false
    },
    {
      "name": "equalRel",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 821,
      "isReExport": false
    },
    {
      "name": "companionOf",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 826,
      "isReExport": false
    },
    {
      "name": "conjointOf",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 833,
      "isReExport": false
    },
    {
      "name": "unitSquare",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 840,
      "isReExport": false
    },
    {
      "name": "counitSquare",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 847,
      "isReExport": false
    },
    {
      "name": "trianglesHold",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 855,
      "isReExport": false
    },
    {
      "name": "makeRelationsDouble",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 865,
      "isReExport": false
    },
    {
      "name": "InnerHornN",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 931,
      "isReExport": false
    },
    {
      "name": "makeInnerHornN",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 937,
      "isReExport": false
    },
    {
      "name": "FiniteSSet",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 950,
      "isReExport": false
    },
    {
      "name": "searchFillInnerHorn",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 955,
      "isReExport": false
    },
    {
      "name": "FiniteNerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 973,
      "isReExport": false
    },
    {
      "name": "lit",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "printExpr",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1032,
      "isReExport": false
    },
    {
      "name": "Disc",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 190,
      "isReExport": false
    },
    {
      "name": "tableProf",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1058,
      "isReExport": false
    },
    {
      "name": "relsEqualByInclusions",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1071,
      "isReExport": false
    },
    {
      "name": "showClasses",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1091,
      "isReExport": false
    },
    {
      "name": "ProTrans",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1101,
      "isReExport": false
    },
    {
      "name": "checkProTransNaturality",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1107,
      "isReExport": false
    },
    {
      "name": "FiniteSmallCategory",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1146,
      "isReExport": false
    },
    {
      "name": "FiniteProf",
      "type": "interface",
      "file": "src/types/catkit-adjunction.ts",
      "line": 107,
      "isReExport": false
    },
    {
      "name": "PairClass",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1161,
      "isReExport": false
    },
    {
      "name": "composeFiniteProfCoend",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1218,
      "isReExport": false
    },
    {
      "name": "leftWhisker",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1310,
      "isReExport": false
    },
    {
      "name": "rightWhisker",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1338,
      "isReExport": false
    },
    {
      "name": "hcomposeTrans",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1368,
      "isReExport": false
    },
    {
      "name": "IdFunctor",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "composeFunctors",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "checkAdjunctionTriangles",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "HasHom",
      "type": "interface",
      "file": "src/types/catkit-kan.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "Prof",
      "type": "interface",
      "file": "src/types/catkit-adjunction.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "companionHomProf",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 113,
      "isReExport": false
    },
    {
      "name": "conjointHomProf",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "mateLeftToRight",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 146,
      "isReExport": false
    },
    {
      "name": "mateRightToLeft",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "ONE_CATEGORY",
      "type": "const",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 151,
      "isReExport": false
    },
    {
      "name": "slice",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "coslice",
      "type": "function",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 221,
      "isReExport": false
    },
    {
      "name": "KanExtensionProblem",
      "type": "interface",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "leftKanCommaCategory",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "rightKanCommaCategory",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "LimitProblem",
      "type": "interface",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 87,
      "isReExport": false
    },
    {
      "name": "pullbackViaSlice",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "adjunctionViaComma",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 137,
      "isReExport": false
    },
    {
      "name": "checkCommaSquare",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "enumerateSliceObjects",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 192,
      "isReExport": false
    },
    {
      "name": "checkIso",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "NatIso",
      "type": "interface",
      "file": "src/types/catkit-equivalence.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "composeNatIso",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "invertNatIso",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "checkNatIso",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "AdjointEquivalence",
      "type": "interface",
      "file": "src/types/catkit-equivalence.ts",
      "line": 102,
      "isReExport": false
    },
    {
      "name": "checkAdjointEquivalence",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "homIsoViaEquivalence",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "toHomologyQuiver",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "fromHomologyQuiver",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "computeCategoryHomology",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "computeFreeQuiverHomology",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "computeNerveHomology",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "HomologyObj",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "HomologyEdge",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "HomologyPath",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "HomologyQuiver",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "HomologyTwoSimplex",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "HomologyBuildOptions",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "invUnimodular",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "smithNormalForm",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 174,
      "isReExport": false
    },
    {
      "name": "certifySNF",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 304,
      "isReExport": false
    },
    {
      "name": "buildPathsUpTo",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 327,
      "isReExport": false
    },
    {
      "name": "basisC0",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 356,
      "isReExport": false
    },
    {
      "name": "basisC1",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 360,
      "isReExport": false
    },
    {
      "name": "basisC2",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 364,
      "isReExport": false
    },
    {
      "name": "boundary1",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 389,
      "isReExport": false
    },
    {
      "name": "boundary2",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 402,
      "isReExport": false
    },
    {
      "name": "computeHomology01",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 451,
      "isReExport": false
    },
    {
      "name": "H1Presentation",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 493,
      "isReExport": false
    },
    {
      "name": "computeHomology01_Z",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 503,
      "isReExport": false
    },
    {
      "name": "prettyChain",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 618,
      "isReExport": false
    },
    {
      "name": "SSet02",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 631,
      "isReExport": false
    },
    {
      "name": "boundaryFromSSet",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 637,
      "isReExport": false
    },
    {
      "name": "H01_fromSSet_Z",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 668,
      "isReExport": false
    },
    {
      "name": "missingInnerHorns2",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 695,
      "isReExport": false
    },
    {
      "name": "showHomologyPath",
      "type": "const",
      "file": "src/types/catkit-homology.ts",
      "line": 703,
      "isReExport": false
    },
    {
      "name": "show2Simplex",
      "type": "const",
      "file": "src/types/catkit-homology.ts",
      "line": 704,
      "isReExport": false
    },
    {
      "name": "transportRightKanAlongEquivalenceFixed",
      "type": "function",
      "file": "src/types/catkit-kan-transport-fixed.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "SetNat",
      "type": "interface",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "SetNatIso",
      "type": "interface",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "checkSetNatIsoEnhanced",
      "type": "function",
      "file": "src/types/catkit-kan-transport-fixed.ts",
      "line": 271,
      "isReExport": false
    },
    {
      "name": "precomposeSetFunctor",
      "type": "function",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "transportRightKanAlongEquivalenceDebug",
      "type": "function",
      "file": "src/types/catkit-kan-transport-fixed.ts",
      "line": 408,
      "isReExport": false
    },
    {
      "name": "demonstrateKanTransportFixes",
      "type": "function",
      "file": "src/types/catkit-kan-transport-fixed.ts",
      "line": 462,
      "isReExport": false
    },
    {
      "name": "checkSetNatIso",
      "type": "function",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "transportLeftKanAlongEquivalence",
      "type": "function",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 138,
      "isReExport": false
    },
    {
      "name": "transportRightKanAlongEquivalence",
      "type": "function",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "SetFunctor",
      "type": "interface",
      "file": "src/types/catkit-kan.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "demoKanExample",
      "type": "function",
      "file": "src/types/catkit-kan.ts",
      "line": 245,
      "isReExport": false
    },
    {
      "name": "PVal",
      "type": "type",
      "file": "src/types/catkit-prisms.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "ProfDict",
      "type": "interface",
      "file": "src/types/catkit-prisms.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "StrongDict",
      "type": "interface",
      "file": "src/types/catkit-optics.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "StrongFn",
      "type": "const",
      "file": "src/types/catkit-optics.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "Forget",
      "type": "type",
      "file": "src/types/catkit-prisms.ts",
      "line": 44,
      "isReExport": false
    },
    {
      "name": "StrongForget",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 50,
      "isReExport": false
    },
    {
      "name": "Lens",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "setL",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "LensLawReport",
      "type": "type",
      "file": "src/types/catkit-optics.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "checkLensLaws",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "fstLens",
      "type": "const",
      "file": "src/types/catkit-optics.ts",
      "line": 123,
      "isReExport": false
    },
    {
      "name": "propLens",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "ThinMor",
      "type": "type",
      "file": "src/types/catkit-posets.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "checkGaloisConnection",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "galoisAsAdjunction",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "discretePoset",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 192,
      "isReExport": false
    },
    {
      "name": "totalOrder",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 200,
      "isReExport": false
    },
    {
      "name": "powersetPoset",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 211,
      "isReExport": false
    },
    {
      "name": "divisibilityPoset",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 239,
      "isReExport": false
    },
    {
      "name": "minimals",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 252,
      "isReExport": false
    },
    {
      "name": "maximals",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 259,
      "isReExport": false
    },
    {
      "name": "meet",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 266,
      "isReExport": false
    },
    {
      "name": "join",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 280,
      "isReExport": false
    },
    {
      "name": "ChoiceDict",
      "type": "interface",
      "file": "src/types/catkit-prisms.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "Prism",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "ChoiceFn",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "ChoiceForget",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "ChoiceForgetOption",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "Tagged",
      "type": "type",
      "file": "src/types/catkit-prisms.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "ChoiceTagged",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "preview",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 95,
      "isReExport": false
    },
    {
      "name": "review",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 103,
      "isReExport": false
    },
    {
      "name": "PrismLawReport",
      "type": "type",
      "file": "src/types/catkit-prisms.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "checkPrismLaws",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "rightPrism",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 158,
      "isReExport": false
    },
    {
      "name": "leftPrism",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 167,
      "isReExport": false
    },
    {
      "name": "numberStringPrism",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 176,
      "isReExport": false
    },
    {
      "name": "Applicative",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "IdApp",
      "type": "const",
      "file": "src/types/catkit-traversal.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "ConstApp",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "MonoidArray",
      "type": "const",
      "file": "src/types/catkit-traversal.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "MonoidSum",
      "type": "const",
      "file": "src/types/catkit-traversal.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "Compose",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "ComposeApp",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "AppMorphism",
      "type": "interface",
      "file": "src/types/catkit-traversal.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "Star",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "WanderDict",
      "type": "interface",
      "file": "src/types/catkit-traversal.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "StarDict",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "eachArray",
      "type": "const",
      "file": "src/types/catkit-traversal.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "bothPair",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "eitherTraversal",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 136,
      "isReExport": false
    },
    {
      "name": "optionTraversal",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 145,
      "isReExport": false
    },
    {
      "name": "AnyOptic",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 155,
      "isReExport": false
    },
    {
      "name": "composeO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 158,
      "isReExport": false
    },
    {
      "name": "overO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "setO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 177,
      "isReExport": false
    },
    {
      "name": "toListOf",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "previewO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 194,
      "isReExport": false
    },
    {
      "name": "viewO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 200,
      "isReExport": false
    },
    {
      "name": "traverseWith",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 207,
      "isReExport": false
    },
    {
      "name": "checkTraversalIdentity",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 216,
      "isReExport": false
    },
    {
      "name": "checkTraversalFusion",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 221,
      "isReExport": false
    },
    {
      "name": "checkTraversalNaturality_Length",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 230,
      "isReExport": false
    },
    {
      "name": "checkTraversalLinearity_Count",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 250,
      "isReExport": false
    },
    {
      "name": "probeCodense",
      "type": "function",
      "file": "src/types/codense-probe.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "batchProbeCodense",
      "type": "function",
      "file": "src/types/codense-probe.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "demonstrateCodenseProbingWithExamples",
      "type": "function",
      "file": "src/types/codense-probe.ts",
      "line": 75,
      "isReExport": false
    },
    {
      "name": "codensityByComma",
      "type": "function",
      "file": "src/types/codensity-by-comma.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "CodensitySet",
      "type": "function",
      "file": "src/types/codensity-set.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "computeDiscreteCardinality",
      "type": "function",
      "file": "src/types/codensity-set.ts",
      "line": 165,
      "isReExport": false
    },
    {
      "name": "isDiscrete",
      "type": "function",
      "file": "src/types/codensity-set.ts",
      "line": 187,
      "isReExport": false
    },
    {
      "name": "demonstrateCodensitySet",
      "type": "function",
      "file": "src/types/codensity-set.ts",
      "line": 203,
      "isReExport": false
    },
    {
      "name": "powerFunctor",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "endToNat",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 97,
      "isReExport": false
    },
    {
      "name": "natToEnd",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 156,
      "isReExport": false
    },
    {
      "name": "createNaturalTransformation",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 183,
      "isReExport": false
    },
    {
      "name": "verifyNaturality",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 210,
      "isReExport": false
    },
    {
      "name": "unitNaturalTransformation",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 263,
      "isReExport": false
    },
    {
      "name": "evaluationNaturalTransformation",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 283,
      "isReExport": false
    },
    {
      "name": "multiPointEvaluation",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 410,
      "isReExport": false
    },
    {
      "name": "composeCodensityNats",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 434,
      "isReExport": false
    },
    {
      "name": "demonstrateNatView",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 294,
      "isReExport": false
    },
    {
      "name": "mkCodensityMonad",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "terminalCodensity",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "discreteCodensity",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "codensityToHKTMonad",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 368,
      "isReExport": false
    },
    {
      "name": "exampleTerminalCodensity",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 229,
      "isReExport": false
    },
    {
      "name": "exampleDiscreteCodensity",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 174,
      "isReExport": false
    },
    {
      "name": "exampleMonadicComposition",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 324,
      "isReExport": false
    },
    {
      "name": "demonstrateCodensityMonad",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 405,
      "isReExport": false
    },
    {
      "name": "CodensityMonadOps",
      "type": "interface",
      "file": "src/types/codensity-monad.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "verifyEndNatRoundtrip",
      "type": "function",
      "file": "src/types/codensity-nat-bridge.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "demonstrateNatBridge",
      "type": "function",
      "file": "src/types/codensity-nat-bridge.ts",
      "line": 119,
      "isReExport": false
    },
    {
      "name": "CodensityAssumptions",
      "type": "type",
      "file": "src/types/codensity-of.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "codensityOfSet",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 75,
      "isReExport": false
    },
    {
      "name": "codensityOfDiscrete",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 103,
      "isReExport": false
    },
    {
      "name": "exampleEndMonad",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 135,
      "isReExport": false
    },
    {
      "name": "demonstrateCodensityOf",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 208,
      "isReExport": false
    },
    {
      "name": "probeCodensity",
      "type": "function",
      "file": "src/types/codensity-probe.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "batchProbeCodensity",
      "type": "function",
      "file": "src/types/codensity-probe.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "demonstrateCodensityProbe",
      "type": "function",
      "file": "src/types/codensity-probe.ts",
      "line": 112,
      "isReExport": false
    },
    {
      "name": "SetValuedFunctor",
      "type": "type",
      "file": "src/types/codensity-set.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "CodensityMonad",
      "type": "interface",
      "file": "src/types/codensity-set.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "RelImpl",
      "type": "type",
      "file": "src/types/config.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "REL_IMPL",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "WitnessLevel",
      "type": "type",
      "file": "src/types/config.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "WITNESS_LEVEL",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "PerformanceMode",
      "type": "type",
      "file": "src/types/config.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "PERFORMANCE_MODE",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "DEBUG_WITNESSES",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "DEBUG_PERFORMANCE",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "getConfig",
      "type": "function",
      "file": "src/types/config.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "ContHKT",
      "type": "type",
      "file": "src/types/cont.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "callCC",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "ContFunctor",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "ContApplicative",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 98,
      "isReExport": false
    },
    {
      "name": "ContMonad",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "cps",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "uncps",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "contCompose",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 130,
      "isReExport": false
    },
    {
      "name": "contBoth",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 137,
      "isReExport": false
    },
    {
      "name": "contEither",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "Bounce",
      "type": "type",
      "file": "src/types/cont.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "trampoline",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 173,
      "isReExport": false
    },
    {
      "name": "trampolined",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "contToStrongMonad",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "factCPS",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 207,
      "isReExport": false
    },
    {
      "name": "findFirst",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 215,
      "isReExport": false
    },
    {
      "name": "demonstrateCont",
      "type": "function",
      "file": "src/types/cont.ts",
      "line": 229,
      "isReExport": false
    },
    {
      "name": "Copresheaf",
      "type": "interface",
      "file": "src/types/copresheaf.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "NatCo",
      "type": "interface",
      "file": "src/types/copresheaf.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "checkNaturalityCo",
      "type": "function",
      "file": "src/types/copresheaf.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "constantCopresheaf",
      "type": "function",
      "file": "src/types/copresheaf.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "demonstrateCopresheaf",
      "type": "function",
      "file": "src/types/copresheaf.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "chain",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "span",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "cospan",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 126,
      "isReExport": false
    },
    {
      "name": "square",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 148,
      "isReExport": false
    },
    {
      "name": "functorToFinSet",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 171,
      "isReExport": false
    },
    {
      "name": "objectwisePshDiagram",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 187,
      "isReExport": false
    },
    {
      "name": "constantPshDiagram",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 202,
      "isReExport": false
    },
    {
      "name": "discretePshDiagram",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 213,
      "isReExport": false
    },
    {
      "name": "demonstrateDiagramDSL",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 229,
      "isReExport": false
    },
    {
      "name": "parallelPair",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 266,
      "isReExport": false
    },
    {
      "name": "nCube",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 284,
      "isReExport": false
    },
    {
      "name": "wheel",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 320,
      "isReExport": false
    },
    {
      "name": "getMor",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 344,
      "isReExport": false
    },
    {
      "name": "checkCommutativeSquare",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 354,
      "isReExport": false
    },
    {
      "name": "functorById",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 378,
      "isReExport": false
    },
    {
      "name": "DiagramToFinSet",
      "type": "interface",
      "file": "src/types/diagram.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "createDiagram",
      "type": "function",
      "file": "src/types/diagram.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "verifyDiagramFunctor",
      "type": "function",
      "file": "src/types/diagram.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "demonstrateDiagrams",
      "type": "function",
      "file": "src/types/diagram.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "configureDisplay",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "formatWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 438,
      "isReExport": false
    },
    {
      "name": "printLawCheck",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 231,
      "isReExport": false
    },
    {
      "name": "printLawCheckGroup",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 252,
      "isReExport": false
    },
    {
      "name": "printLawCheckSummary",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 270,
      "isReExport": false
    },
    {
      "name": "formatMonadLaws",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 293,
      "isReExport": false
    },
    {
      "name": "formatEMMonoidLaws",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 302,
      "isReExport": false
    },
    {
      "name": "formatOpticsLaws",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 312,
      "isReExport": false
    },
    {
      "name": "formatRelationalLaws",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 325,
      "isReExport": false
    },
    {
      "name": "toggleShowMore",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 347,
      "isReExport": false
    },
    {
      "name": "shouldShowMore",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 351,
      "isReExport": false
    },
    {
      "name": "formatWithToggle",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 356,
      "isReExport": false
    },
    {
      "name": "formatBenchmarkResults",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 377,
      "isReExport": false
    },
    {
      "name": "formatHomologyResults",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 402,
      "isReExport": false
    },
    {
      "name": "formatErrorSummary",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 424,
      "isReExport": false
    },
    {
      "name": "devPrint",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 451,
      "isReExport": false
    },
    {
      "name": "formatTiming",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 459,
      "isReExport": false
    },
    {
      "name": "printProgress",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 465,
      "isReExport": false
    },
    {
      "name": "isCI",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 482,
      "isReExport": false
    },
    {
      "name": "autoConfigureDisplay",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 487,
      "isReExport": false
    },
    {
      "name": "resetDisplayConfig",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 498,
      "isReExport": false
    },
    {
      "name": "demonstrateDisplayHelpers",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 517,
      "isReExport": false
    },
    {
      "name": "testLaxFunctorLaws",
      "type": "function",
      "file": "src/types/double-functor-lax-lawcheck.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "squareHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 224,
      "isReExport": false
    },
    {
      "name": "induceBottom",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "mkSquare",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "hComp",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "vComp",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 76,
      "isReExport": false
    },
    {
      "name": "interchangeHolds",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "Bijection",
      "type": "type",
      "file": "src/types/double-functor.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "isBijection",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "RenamingDoubleFunctor",
      "type": "class",
      "file": "src/types/double-functor.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "equalSquares",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 183,
      "isReExport": false
    },
    {
      "name": "Surjection",
      "type": "type",
      "file": "src/types/surjection-types.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "isSurjection",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 205,
      "isReExport": false
    },
    {
      "name": "SurjectiveLaxDoubleFunctor",
      "type": "class",
      "file": "src/types/double-functor.ts",
      "line": 210,
      "isReExport": false
    },
    {
      "name": "printSquare",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 278,
      "isReExport": false
    },
    {
      "name": "createTestBijection",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 289,
      "isReExport": false
    },
    {
      "name": "createTestSurjection",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 301,
      "isReExport": false
    },
    {
      "name": "inclusionWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 189,
      "isReExport": false
    },
    {
      "name": "DoubleStrictFunctor",
      "type": "interface",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "DoubleNaturalTransformation",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 84,
      "isReExport": false
    },
    {
      "name": "composeDoubleFunctors",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 76,
      "isReExport": false
    },
    {
      "name": "identityDoubleFunctor",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 123,
      "isReExport": false
    },
    {
      "name": "isSquareCommutative",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 157,
      "isReExport": false
    },
    {
      "name": "squareCommutativityWitness",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "StrictDoubleFunctor",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "LaxDoubleFunctor",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "StringDiagram",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 98,
      "isReExport": false
    },
    {
      "name": "squareToStringDiagram",
      "type": "function",
      "file": "src/types/double-lax-functor.ts",
      "line": 104,
      "isReExport": false
    },
    {
      "name": "checkInterchangeLaw",
      "type": "function",
      "file": "src/types/double-lax-functor.ts",
      "line": 133,
      "isReExport": false
    },
    {
      "name": "DiscreteEMAlgebra",
      "type": "interface",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "discreteEMAlgebra",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "checkEMLaws",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "verifyCompactHausdorff",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "verifyConvergence",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 154,
      "isReExport": false
    },
    {
      "name": "demonstrateDiscreteEM",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "EnhancedEMMonoid",
      "type": "interface",
      "file": "src/types/em-monoid-examples.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "writerArrayEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "optionMaxEMMonoid",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 556,
      "isReExport": false
    },
    {
      "name": "optionStringEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "arraySumEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 156,
      "isReExport": false
    },
    {
      "name": "composeEM",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 192,
      "isReExport": false
    },
    {
      "name": "productEM",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "coproductEM",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 264,
      "isReExport": false
    },
    {
      "name": "brokenConcatEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 305,
      "isReExport": false
    },
    {
      "name": "brokenUnitEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 348,
      "isReExport": false
    },
    {
      "name": "checkEMMonoidEnhanced",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 385,
      "isReExport": false
    },
    {
      "name": "createLoggedMaxEM",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 442,
      "isReExport": false
    },
    {
      "name": "testEMMonoid",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 468,
      "isReExport": false
    },
    {
      "name": "demonstrateComposition",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 497,
      "isReExport": false
    },
    {
      "name": "demonstrateEMMonoids",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 524,
      "isReExport": false
    },
    {
      "name": "eqJSON",
      "type": "const",
      "file": "src/types/eq.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "eqBy",
      "type": "const",
      "file": "src/types/eq.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "Measured",
      "type": "type",
      "file": "src/types/measured-fingertree.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "Digit",
      "type": "type",
      "file": "src/types/fingertree.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "digitSize",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "digitToArray",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "digitFromArray",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "node2",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "node3",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "nodeSize",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "nodeToArray",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "FingerTree",
      "type": "type",
      "file": "src/types/fingertree.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "Empty",
      "type": "const",
      "file": "src/types/fingertree.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "Single",
      "type": "const",
      "file": "src/types/fingertree.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "Deep",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 85,
      "isReExport": false
    },
    {
      "name": "ftSize",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "pushL",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "pushR",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "popL",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 103,
      "isReExport": false
    },
    {
      "name": "popR",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "concat",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "splitAt",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 302,
      "isReExport": false
    },
    {
      "name": "isEmpty",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 300,
      "isReExport": false
    },
    {
      "name": "head",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 304,
      "isReExport": false
    },
    {
      "name": "last",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 309,
      "isReExport": false
    },
    {
      "name": "reverse",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 314,
      "isReExport": false
    },
    {
      "name": "foldl",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 330,
      "isReExport": false
    },
    {
      "name": "foldr",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 335,
      "isReExport": false
    },
    {
      "name": "benchmarkFingerTree",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 341,
      "isReExport": false
    },
    {
      "name": "colimitFinSet",
      "type": "function",
      "file": "src/types/finset-colimits-general.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "verifyColimitUniversal",
      "type": "function",
      "file": "src/types/finset-colimits-general.ts",
      "line": 88,
      "isReExport": false
    },
    {
      "name": "demonstrateFinSetColimitsGeneral",
      "type": "function",
      "file": "src/types/finset-colimits-general.ts",
      "line": 119,
      "isReExport": false
    },
    {
      "name": "coequalizer",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 183,
      "isReExport": false
    },
    {
      "name": "verifyCoproductUniversal",
      "type": "function",
      "file": "src/types/finset-colimits.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "demonstrateFinSetColimits",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 161,
      "isReExport": false
    },
    {
      "name": "limitFinSet",
      "type": "function",
      "file": "src/types/finset-limits.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "verifyLimitUniversal",
      "type": "function",
      "file": "src/types/finset-limits.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "demonstrateFinSetLimits",
      "type": "function",
      "file": "src/types/finset-limits.ts",
      "line": 111,
      "isReExport": false
    },
    {
      "name": "Bit",
      "type": "type",
      "file": "src/types/finvect.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "F2",
      "type": "const",
      "file": "src/types/finvect.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "zeros",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "matMul",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "dimOf",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "basis",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "FinVect",
      "type": "type",
      "file": "src/types/finvect.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "dual",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "doubleDual",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "evalIso",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "createFinVect",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "linearMap",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "demonstrateDoubleDual",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 124,
      "isReExport": false
    },
    {
      "name": "Foldable",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "Unfoldable",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Traversable",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "Extend",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "Comonad",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "coyId",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "coyMap",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Ap",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "liftAp",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "faMap",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "faAp",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "faOf",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "faLift2",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "faLift3",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "ApplicativeOps",
      "type": "interface",
      "file": "src/types/freeapp-coyo.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "foldMap",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 72,
      "isReExport": false
    },
    {
      "name": "Validation",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 84,
      "isReExport": false
    },
    {
      "name": "Ok",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 88,
      "isReExport": false
    },
    {
      "name": "Err",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "validationOps",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "Reader",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 72,
      "isReExport": false
    },
    {
      "name": "readerOps",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 113,
      "isReExport": false
    },
    {
      "name": "FormF",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "field",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 131,
      "isReExport": false
    },
    {
      "name": "Env",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "natFormToReaderValidation",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "Doc",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 159,
      "isReExport": false
    },
    {
      "name": "DocOps",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 160,
      "isReExport": false
    },
    {
      "name": "natFormToDoc",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "ReaderLens",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 176,
      "isReExport": false
    },
    {
      "name": "viaLens",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "sequenceFA",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 189,
      "isReExport": false
    },
    {
      "name": "traverseFA",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "optionalField",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 205,
      "isReExport": false
    },
    {
      "name": "conditionalField",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 223,
      "isReExport": false
    },
    {
      "name": "runInterpreter",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 237,
      "isReExport": false
    },
    {
      "name": "composeNat",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 252,
      "isReExport": false
    },
    {
      "name": "transformNatViaLens",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 260,
      "isReExport": false
    },
    {
      "name": "Contravariant",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Invariant",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "Bifunctor",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "Trifunctor",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "BifunctorLegacy",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "Profunctor",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "Alt",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "Plus",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 59,
      "isReExport": false
    },
    {
      "name": "Alternative",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "Chain",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "MonadThrow",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "MonadError",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "MonadReader",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "MonadState",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 86,
      "isReExport": false
    },
    {
      "name": "MonadWriter",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "Ty",
      "type": "type",
      "file": "src/types/gadt-expr.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "NumT",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "BoolT",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "PairT",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "ArrowT",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "bool",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "fst",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "snd",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "iff",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "evalE",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "showE",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "typeCheck",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "optimize",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "demonstrateGADTExpressions",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "eqTy",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "isOfType",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 180,
      "isReExport": false
    },
    {
      "name": "tmatch",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 193,
      "isReExport": false
    },
    {
      "name": "URItoKind",
      "type": "interface",
      "file": "src/types/hkt.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "URIS",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "Kind",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "URItoKind2",
      "type": "interface",
      "file": "src/types/hkt.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "URIS2",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "Kind2",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "URItoKind3",
      "type": "interface",
      "file": "src/types/hkt.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "URIS3",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Kind3",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "HKT",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "HKT2",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "HKT3",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "URItoKindProf",
      "type": "interface",
      "file": "src/types/hkt.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "URISProf",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "KindProf",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "HKT2Prof",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "CPS",
      "type": "const",
      "file": "src/types/index.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "mkSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "getSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "getSection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "SpecImplFunctor",
      "type": "class",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "createSpecImplFunctor",
      "type": "function",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 178,
      "isReExport": false
    },
    {
      "name": "verifySpecImplFunctor",
      "type": "function",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 249,
      "isReExport": false
    },
    {
      "name": "placeholder",
      "type": "const",
      "file": "src/types/instances.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Yoneda",
      "type": "function",
      "file": "src/types/yoneda.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "coYoneda",
      "type": "function",
      "file": "src/types/isbell.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "Isbell",
      "type": "function",
      "file": "src/types/isbell.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "RanSet",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 232,
      "isReExport": false
    },
    {
      "name": "RanSetDirect",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 264,
      "isReExport": false
    },
    {
      "name": "MATH_TAG",
      "type": "const",
      "file": "src/types/math-trace-annot.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "LAW_TAG",
      "type": "const",
      "file": "src/types/math-trace-annot.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "FoundTag",
      "type": "interface",
      "file": "src/types/math-trace-types.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "extractMathTags",
      "type": "function",
      "file": "src/types/math-trace-annot.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "validateMathTag",
      "type": "function",
      "file": "src/types/math-trace-annot.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "createMathAnnotation",
      "type": "function",
      "file": "src/types/math-trace-annot.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "extractMathContext",
      "type": "function",
      "file": "src/types/math-trace-annot.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "loadRegistry",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "getMathRecord",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "getAllMathRecords",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "searchMathRecords",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "validateRegistry",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "SourceRef",
      "type": "type",
      "file": "src/types/math-trace-types.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "MathRecord",
      "type": "interface",
      "file": "src/types/math-trace-types.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "TraceReport",
      "type": "interface",
      "file": "src/types/math-trace-types.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "MeasuredFingerTree",
      "type": "type",
      "file": "src/types/measured-fingertree.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "mvalue",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "empty",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 50,
      "isReExport": false
    },
    {
      "name": "single",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "splitWith",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 205,
      "isReExport": false
    },
    {
      "name": "SumMonoid",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 265,
      "isReExport": false
    },
    {
      "name": "ProductMonoid",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 270,
      "isReExport": false
    },
    {
      "name": "MaxMonoid",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 275,
      "isReExport": false
    },
    {
      "name": "MinMonoid",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 280,
      "isReExport": false
    },
    {
      "name": "lengthMeasure",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 286,
      "isReExport": false
    },
    {
      "name": "sizeMeasure",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 291,
      "isReExport": false
    },
    {
      "name": "costMeasure",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 296,
      "isReExport": false
    },
    {
      "name": "take",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 307,
      "isReExport": false
    },
    {
      "name": "drop",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 311,
      "isReExport": false
    },
    {
      "name": "elts",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "asSetObj",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "MiniFinSet",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 156,
      "isReExport": false
    },
    {
      "name": "G_inclusion",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "pi1",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 196,
      "isReExport": false
    },
    {
      "name": "pi2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 201,
      "isReExport": false
    },
    {
      "name": "and2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 207,
      "isReExport": false
    },
    {
      "name": "or2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 213,
      "isReExport": false
    },
    {
      "name": "xor2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "nand2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 225,
      "isReExport": false
    },
    {
      "name": "not2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 231,
      "isReExport": false
    },
    {
      "name": "BoolMorphisms",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 237,
      "isReExport": false
    },
    {
      "name": "pairTo2x2",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 257,
      "isReExport": false
    },
    {
      "name": "constantMorphism",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 291,
      "isReExport": false
    },
    {
      "name": "getAllMorphisms",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 300,
      "isReExport": false
    },
    {
      "name": "findMorphism",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 307,
      "isReExport": false
    },
    {
      "name": "intersectionViaAnd",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 321,
      "isReExport": false
    },
    {
      "name": "unionViaOr",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 337,
      "isReExport": false
    },
    {
      "name": "complementViaOr",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 353,
      "isReExport": false
    },
    {
      "name": "getCategoryStats",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 374,
      "isReExport": false
    },
    {
      "name": "allSubsets",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "demonstrateMiniFinSet",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 419,
      "isReExport": false
    },
    {
      "name": "nerveToSSetUpTo3",
      "type": "function",
      "file": "src/types/nerve-quasicat-bridge.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "checkCategoryNerveQuasicat",
      "type": "function",
      "file": "src/types/nerve-quasicat-bridge.ts",
      "line": 76,
      "isReExport": false
    },
    {
      "name": "checkQuiverNerveQuasicat",
      "type": "function",
      "file": "src/types/nerve-quasicat-bridge.ts",
      "line": 98,
      "isReExport": false
    },
    {
      "name": "comprehensiveNerveAnalysis",
      "type": "function",
      "file": "src/types/nerve-quasicat-bridge.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "URItoKindFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "URItoKind2Free",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "URItoKind3Free",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "URISFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "URIS2Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "URIS3Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "KindFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "Kind2Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "Kind3Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "EitherFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "leftFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "rightFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "P2Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "ProfunctorFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "StrongFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "ChoiceFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "FunctionStrongFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "ForgetFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "ForgetProfunctorFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "ForgetStrongFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "MonoidFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "ForgetChoiceFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "PIsoFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "PLensFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "PPrismFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 84,
      "isReExport": false
    },
    {
      "name": "isoFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 87,
      "isReExport": false
    },
    {
      "name": "lensFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "prismFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "overFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 117,
      "isReExport": false
    },
    {
      "name": "setFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 120,
      "isReExport": false
    },
    {
      "name": "viewFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 124,
      "isReExport": false
    },
    {
      "name": "OptionFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 128,
      "isReExport": false
    },
    {
      "name": "noneFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "someFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 130,
      "isReExport": false
    },
    {
      "name": "MonoidFirstFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "previewFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 137,
      "isReExport": false
    },
    {
      "name": "FunctorFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "ApplicativeFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 148,
      "isReExport": false
    },
    {
      "name": "URI_IdFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 155,
      "isReExport": false
    },
    {
      "name": "IdFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "WanderFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 170,
      "isReExport": false
    },
    {
      "name": "FunctionWanderFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 177,
      "isReExport": false
    },
    {
      "name": "PTraversalFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 189,
      "isReExport": false
    },
    {
      "name": "eachFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 191,
      "isReExport": false
    },
    {
      "name": "FreeOptics",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 200,
      "isReExport": false
    },
    {
      "name": "pureOptics",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 204,
      "isReExport": false
    },
    {
      "name": "liftFOptics",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 206,
      "isReExport": false
    },
    {
      "name": "foldFreeOptics",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 210,
      "isReExport": false
    },
    {
      "name": "URI_ExprF",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 217,
      "isReExport": false
    },
    {
      "name": "ExprFOptics",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 223,
      "isReExport": false
    },
    {
      "name": "ExprFFunctorOptics",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 227,
      "isReExport": false
    },
    {
      "name": "SafeGetter",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "SafeLens",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "SafePrism",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "SafeTraversal",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "ProfunctorLens",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 170,
      "isReExport": false
    },
    {
      "name": "ProfunctorPrism",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 176,
      "isReExport": false
    },
    {
      "name": "ProfunctorTraversal",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "safeGetter",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "safeLens",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "safePrism",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "safeTraversal",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "toProfunctorLens",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "toProfunctorPrism",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 151,
      "isReExport": false
    },
    {
      "name": "toProfunctorTraversal",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 205,
      "isReExport": false
    },
    {
      "name": "fromProfunctorLens",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 266,
      "isReExport": false
    },
    {
      "name": "fromProfunctorPrism",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 273,
      "isReExport": false
    },
    {
      "name": "composeSafeLenses",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 282,
      "isReExport": false
    },
    {
      "name": "composePrismLens",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 293,
      "isReExport": false
    },
    {
      "name": "validateOpticLaws",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 309,
      "isReExport": false
    },
    {
      "name": "OpticsBridge",
      "type": "interface",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 380,
      "isReExport": false
    },
    {
      "name": "typeSafeBridge",
      "type": "const",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 403,
      "isReExport": false
    },
    {
      "name": "validateOpticEnhanced",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 413,
      "isReExport": false
    },
    {
      "name": "extractLensComponents",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 469,
      "isReExport": false
    },
    {
      "name": "extractPrismComponents",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 480,
      "isReExport": false
    },
    {
      "name": "checkOpticCompatibility",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 491,
      "isReExport": false
    },
    {
      "name": "ExistingOptic",
      "type": "interface",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "adaptExistingOptic",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "rewriteWithExistingOptic",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "ruleFromExistingOptic",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "createNodeRule",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "createPatternRule",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 95,
      "isReExport": false
    },
    {
      "name": "sequenceRules",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 116,
      "isReExport": false
    },
    {
      "name": "choiceRules",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "checkRuleSoundness",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "generateRandomTerm",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 196,
      "isReExport": false
    },
    {
      "name": "demonstrateOpticsIntegration",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "RewritePrism",
      "type": "interface",
      "file": "src/types/optics-rewrite.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "composePrism",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "traversalFromPrism",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "Impure",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "let_",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "mapChildren",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 72,
      "isReExport": false
    },
    {
      "name": "everywhereBottomUp",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "eqTerm",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "show",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "selfPrism",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 124,
      "isReExport": false
    },
    {
      "name": "_Add",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "_Mul",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 133,
      "isReExport": false
    },
    {
      "name": "_Lit",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "_Var",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 135,
      "isReExport": false
    },
    {
      "name": "_Let",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 136,
      "isReExport": false
    },
    {
      "name": "children",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 139,
      "isReExport": false
    },
    {
      "name": "descendants",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "ModLike",
      "type": "type",
      "file": "src/types/optics-rewrite.ts",
      "line": 150,
      "isReExport": false
    },
    {
      "name": "applyRulesOnce",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 159,
      "isReExport": false
    },
    {
      "name": "applyRulesFix",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 171,
      "isReExport": false
    },
    {
      "name": "foldAdd",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 183,
      "isReExport": false
    },
    {
      "name": "foldMul",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 196,
      "isReExport": false
    },
    {
      "name": "mulOne",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 210,
      "isReExport": false
    },
    {
      "name": "addZero",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 225,
      "isReExport": false
    },
    {
      "name": "inlineLetVar",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 239,
      "isReExport": false
    },
    {
      "name": "defaultRules",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 253,
      "isReExport": false
    },
    {
      "name": "applyRuleWithTrace",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 258,
      "isReExport": false
    },
    {
      "name": "applyRulesWithTrace",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 272,
      "isReExport": false
    },
    {
      "name": "RuleRegistry",
      "type": "class",
      "file": "src/types/optics-rewrite.ts",
      "line": 307,
      "isReExport": false
    },
    {
      "name": "defaultRegistry",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 342,
      "isReExport": false
    },
    {
      "name": "Path",
      "type": "type",
      "file": "src/types/optics-rewrite.ts",
      "line": 352,
      "isReExport": false
    },
    {
      "name": "writer",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 361,
      "isReExport": false
    },
    {
      "name": "mapWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 366,
      "isReExport": false
    },
    {
      "name": "bindWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 371,
      "isReExport": false
    },
    {
      "name": "pathToString",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 382,
      "isReExport": false
    },
    {
      "name": "applyRuleWithWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 387,
      "isReExport": false
    },
    {
      "name": "applyRulesOnceWithWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 404,
      "isReExport": false
    },
    {
      "name": "mapChildrenWithWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 431,
      "isReExport": false
    },
    {
      "name": "rewriteW",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 473,
      "isReExport": false
    },
    {
      "name": "rewriteWDetailed",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 501,
      "isReExport": false
    },
    {
      "name": "prettyLog",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 513,
      "isReExport": false
    },
    {
      "name": "prettyComparison",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 538,
      "isReExport": false
    },
    {
      "name": "adaptProfunctorOptic",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 584,
      "isReExport": false
    },
    {
      "name": "genericRewrite",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 601,
      "isReExport": false
    },
    {
      "name": "LensWitness",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "checkLens",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "PrismWitness",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 106,
      "isReExport": false
    },
    {
      "name": "checkPrism",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 111,
      "isReExport": false
    },
    {
      "name": "TraversalWitness",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 139,
      "isReExport": false
    },
    {
      "name": "checkTraversal",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "adaptProfunctorLens",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "adaptProfunctorPrism",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 189,
      "isReExport": false
    },
    {
      "name": "CompositeOpticsWitness",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "checkCompositeOptics",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 203,
      "isReExport": false
    },
    {
      "name": "demonstrateOpticsWitnesses",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 247,
      "isReExport": false
    },
    {
      "name": "ColimAtCState",
      "type": "type",
      "file": "src/types/pointwise-colim-util.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "buildPointwiseColim",
      "type": "function",
      "file": "src/types/pointwise-colim-util.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "demonstratePointwiseColim",
      "type": "function",
      "file": "src/types/pointwise-colim-util.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "LimitAtCState",
      "type": "type",
      "file": "src/types/pointwise-limit-util.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "buildPointwiseLimit",
      "type": "function",
      "file": "src/types/pointwise-limit-util.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "verifyPointwiseLimitTransport",
      "type": "function",
      "file": "src/types/pointwise-limit-util.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "demonstratePointwiseLimit",
      "type": "function",
      "file": "src/types/pointwise-limit-util.ts",
      "line": 138,
      "isReExport": false
    },
    {
      "name": "pshColimitGeneral",
      "type": "function",
      "file": "src/types/presheaf-colimits-general.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "pshLimitGeneral",
      "type": "function",
      "file": "src/types/presheaf-limits-general.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "verifyPresheafColimitNaturality",
      "type": "function",
      "file": "src/types/presheaf-colimits-general.ts",
      "line": 303,
      "isReExport": false
    },
    {
      "name": "demonstratePresheafColimits",
      "type": "function",
      "file": "src/types/presheaf-colimits-general.ts",
      "line": 365,
      "isReExport": false
    },
    {
      "name": "pshCoproduct",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "pshCoequalizer",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "pshPushout",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "verifyPresheafColimits",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 102,
      "isReExport": false
    },
    {
      "name": "pshPullbackGeneral",
      "type": "function",
      "file": "src/types/presheaf-limits-general.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "demonstratePresheafLimits",
      "type": "function",
      "file": "src/types/presheaf-limits-general.ts",
      "line": 111,
      "isReExport": false
    },
    {
      "name": "pshPushoutGeneral",
      "type": "function",
      "file": "src/types/presheaf-pushout-general.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "demonstratePresheafPushout",
      "type": "function",
      "file": "src/types/presheaf-pushout-general.ts",
      "line": 137,
      "isReExport": false
    },
    {
      "name": "Presheaf",
      "type": "interface",
      "file": "src/types/presheaf.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "NatPsh",
      "type": "interface",
      "file": "src/types/presheaf.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "constantPresheaf",
      "type": "function",
      "file": "src/types/presheaf.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "demonstratePresheaf",
      "type": "function",
      "file": "src/types/presheaf.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "WitnessPredicate",
      "type": "type",
      "file": "src/types/property-shrinking.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "ShrinkStrategy",
      "type": "type",
      "file": "src/types/property-shrinking.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "ShrinkResult",
      "type": "interface",
      "file": "src/types/property-shrinking.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "minimizeWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "estimateSize",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "shrinkArray",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "shrinkNumber",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 109,
      "isReExport": false
    },
    {
      "name": "shrinkString",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "shrinkObject",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 148,
      "isReExport": false
    },
    {
      "name": "shrinkValue",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 179,
      "isReExport": false
    },
    {
      "name": "shrinkMonadWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 191,
      "isReExport": false
    },
    {
      "name": "shrinkLensWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 223,
      "isReExport": false
    },
    {
      "name": "shrinkRelationalWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 251,
      "isReExport": false
    },
    {
      "name": "shrinkMonadLeftUnitWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 297,
      "isReExport": false
    },
    {
      "name": "shrinkLensCounterexample",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 309,
      "isReExport": false
    },
    {
      "name": "shrinkAdjunctionWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 321,
      "isReExport": false
    },
    {
      "name": "createLawCheckPredicate",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 342,
      "isReExport": false
    },
    {
      "name": "applyShrinking",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 355,
      "isReExport": false
    },
    {
      "name": "demonstrateShrinking",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 373,
      "isReExport": false
    },
    {
      "name": "exampleArrayShrinking",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 396,
      "isReExport": false
    },
    {
      "name": "exampleObjectShrinking",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 421,
      "isReExport": false
    },
    {
      "name": "shrinkMonadLeftUnitWitnessSpecific",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 486,
      "isReExport": false
    },
    {
      "name": "shrinkLensGetSetWitnessSpecific",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 511,
      "isReExport": false
    },
    {
      "name": "Vertex",
      "type": "type",
      "file": "src/types/quiver-pushout.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "EdgeLabel",
      "type": "type",
      "file": "src/types/quiver-pushout.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "AuditEntry",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "PushoutResult",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "CoequalizerResult",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "renameVertices",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 290,
      "isReExport": false
    },
    {
      "name": "mergeSchemas",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 313,
      "isReExport": false
    },
    {
      "name": "AuditTrail",
      "type": "class",
      "file": "src/types/quiver-pushout.ts",
      "line": 346,
      "isReExport": false
    },
    {
      "name": "MigrationStep",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 382,
      "isReExport": false
    },
    {
      "name": "createPushoutStep",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 388,
      "isReExport": false
    },
    {
      "name": "createRenameStep",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 403,
      "isReExport": false
    },
    {
      "name": "applyMigration",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 418,
      "isReExport": false
    },
    {
      "name": "verifyPushoutUniversal",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 437,
      "isReExport": false
    },
    {
      "name": "printQuiver",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 501,
      "isReExport": false
    },
    {
      "name": "printMorphism",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 507,
      "isReExport": false
    },
    {
      "name": "printAudit",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 512,
      "isReExport": false
    },
    {
      "name": "makeSchema",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 524,
      "isReExport": false
    },
    {
      "name": "makeIdentityMorphism",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 535,
      "isReExport": false
    },
    {
      "name": "FunctionSpace",
      "type": "type",
      "file": "src/types/ran-set.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "EndFamily",
      "type": "type",
      "file": "src/types/ran-set.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "DinaturalityTransport",
      "type": "type",
      "file": "src/types/ran-set.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "createFunctionSpace",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "mapFunctionSpace",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "precomposeFunctionSpace",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "computeRanEnd",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "checkDinaturality",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 320,
      "isReExport": false
    },
    {
      "name": "identityRanExample",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 359,
      "isReExport": false
    },
    {
      "name": "demonstrateRanSet",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 378,
      "isReExport": false
    },
    {
      "name": "IRel",
      "type": "interface",
      "file": "src/types/rel-common.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "RelStrategy",
      "type": "type",
      "file": "src/types/rel-common.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "RelFactory",
      "type": "interface",
      "file": "src/types/rel-common.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "makeRelFactory",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "makeRel",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 149,
      "isReExport": false
    },
    {
      "name": "makeRelId",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 158,
      "isReExport": false
    },
    {
      "name": "compareStrategies",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "setGlobalRelStrategy",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 200,
      "isReExport": false
    },
    {
      "name": "getGlobalRelStrategy",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 204,
      "isReExport": false
    },
    {
      "name": "createRel",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 208,
      "isReExport": false
    },
    {
      "name": "createRelId",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 212,
      "isReExport": false
    },
    {
      "name": "Subset",
      "type": "class",
      "file": "src/types/rel-equipment.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "Fun",
      "type": "type",
      "file": "src/types/rel-equipment.ts",
      "line": 179,
      "isReExport": false
    },
    {
      "name": "graph",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 181,
      "isReExport": false
    },
    {
      "name": "companion",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 193,
      "isReExport": false
    },
    {
      "name": "conjoint",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "unitHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 204,
      "isReExport": false
    },
    {
      "name": "counitHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 211,
      "isReExport": false
    },
    {
      "name": "RelOrder",
      "type": "const",
      "file": "src/types/rel-equipment.ts",
      "line": 236,
      "isReExport": false
    },
    {
      "name": "preImage",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 257,
      "isReExport": false
    },
    {
      "name": "domain",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 268,
      "isReExport": false
    },
    {
      "name": "range",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 273,
      "isReExport": false
    },
    {
      "name": "leftResidual",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 280,
      "isReExport": false
    },
    {
      "name": "rightResidual",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 298,
      "isReExport": false
    },
    {
      "name": "adjunctionLeftHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 317,
      "isReExport": false
    },
    {
      "name": "adjunctionRightHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 323,
      "isReExport": false
    },
    {
      "name": "existsAlong",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 332,
      "isReExport": false
    },
    {
      "name": "preimageSub",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 338,
      "isReExport": false
    },
    {
      "name": "forallAlong",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 343,
      "isReExport": false
    },
    {
      "name": "adjunctionExistsPreimageHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 352,
      "isReExport": false
    },
    {
      "name": "adjunctionPreimageForallHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 361,
      "isReExport": false
    },
    {
      "name": "verifyGaloisChain",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 370,
      "isReExport": false
    },
    {
      "name": "generateAllSubsets",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 408,
      "isReExport": false
    },
    {
      "name": "wp",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 428,
      "isReExport": false
    },
    {
      "name": "hoareHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 448,
      "isReExport": false
    },
    {
      "name": "printRel",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 466,
      "isReExport": false
    },
    {
      "name": "printSubset",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 471,
      "isReExport": false
    },
    {
      "name": "DefaultRelFactory",
      "type": "const",
      "file": "src/types/rel-factory-default.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "DefaultRel",
      "type": "const",
      "file": "src/types/rel-factory-default.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "ResidualAdjunctionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "TransformerAdjunctionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 151,
      "isReExport": false
    },
    {
      "name": "GaloisConnectionWitness",
      "type": "type",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "AllegoryWitness",
      "type": "type",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "ComprehensiveLawReport",
      "type": "type",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "runComprehensiveLawChecks",
      "type": "function",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 355,
      "isReExport": false
    },
    {
      "name": "printLawCheckReport",
      "type": "function",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 441,
      "isReExport": false
    },
    {
      "name": "demonstrateWitnessedLawChecking",
      "type": "function",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 486,
      "isReExport": false
    },
    {
      "name": "RelationalLawResults",
      "type": "type",
      "file": "src/types/rel-lawcheck.ts",
      "line": 50,
      "isReExport": false
    },
    {
      "name": "testResidualLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "testTransformerLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 150,
      "isReExport": false
    },
    {
      "name": "testGaloisLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 206,
      "isReExport": false
    },
    {
      "name": "testAllegoryLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 279,
      "isReExport": false
    },
    {
      "name": "testCompositionLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 349,
      "isReExport": false
    },
    {
      "name": "runAllTests",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 429,
      "isReExport": false
    },
    {
      "name": "printLawCheckResults",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 496,
      "isReExport": false
    },
    {
      "name": "printTestSummary",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 517,
      "isReExport": false
    },
    {
      "name": "initParityChecking",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "configureParityChecking",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "getParityConfig",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "ParityMismatchWitness",
      "type": "interface",
      "file": "src/types/rel-parity-guards.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "checkCompositionParity",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 152,
      "isReExport": false
    },
    {
      "name": "checkUnionParity",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 196,
      "isReExport": false
    },
    {
      "name": "checkIntersectionParity",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 233,
      "isReExport": false
    },
    {
      "name": "checkConverseParity",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 270,
      "isReExport": false
    },
    {
      "name": "InstrumentedRel",
      "type": "class",
      "file": "src/types/rel-parity-guards.ts",
      "line": 359,
      "isReExport": false
    },
    {
      "name": "runParityTests",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 456,
      "isReExport": false
    },
    {
      "name": "createParityTestData",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 540,
      "isReExport": false
    },
    {
      "name": "demonstrateParityGuards",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 579,
      "isReExport": false
    },
    {
      "name": "Rope",
      "type": "type",
      "file": "src/types/rope.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "fromString",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "toString",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "insertAt",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "charAt",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "lines",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "unlines",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "replaceAt",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "indexOf",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 86,
      "isReExport": false
    },
    {
      "name": "lastIndexOf",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "benchmarkRope",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 97,
      "isReExport": false
    },
    {
      "name": "DelimCont",
      "type": "type",
      "file": "src/types/shift-reset.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "CapturedCont",
      "type": "type",
      "file": "src/types/shift-reset.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "control",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "prompt",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "abort",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 87,
      "isReExport": false
    },
    {
      "name": "yield_",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 96,
      "isReExport": false
    },
    {
      "name": "escape",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 107,
      "isReExport": false
    },
    {
      "name": "pushPrompt",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 117,
      "isReExport": false
    },
    {
      "name": "withSubCont",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "composeContinuations",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "toDelimited",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 143,
      "isReExport": false
    },
    {
      "name": "fromDelimited",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 148,
      "isReExport": false
    },
    {
      "name": "runDelimited",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 153,
      "isReExport": false
    },
    {
      "name": "simpleGenerator",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 161,
      "isReExport": false
    },
    {
      "name": "safeDiv",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 172,
      "isReExport": false
    },
    {
      "name": "choose",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 180,
      "isReExport": false
    },
    {
      "name": "demonstrateShiftReset",
      "type": "function",
      "file": "src/types/shift-reset.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "SNFVerificationWitness",
      "type": "interface",
      "file": "src/types/snf-surface-api.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "DiagonalExplanation",
      "type": "interface",
      "file": "src/types/snf-surface-api.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "matrixShape",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "matrixZeros",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "matrixMultiply",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "matricesEqual",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "verifySNF",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "explainDiagonal",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 194,
      "isReExport": false
    },
    {
      "name": "computeAndVerifySNF",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 240,
      "isReExport": false
    },
    {
      "name": "printSNFVerification",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 255,
      "isReExport": false
    },
    {
      "name": "printDiagonalExplanation",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 273,
      "isReExport": false
    },
    {
      "name": "homologyRankFromSNF",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 293,
      "isReExport": false
    },
    {
      "name": "homologyFromBoundary",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 309,
      "isReExport": false
    },
    {
      "name": "createBrokenSNF",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 335,
      "isReExport": false
    },
    {
      "name": "demonstrateSNFSurfaceAPI",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 353,
      "isReExport": false
    },
    {
      "name": "computeHomologyWithVerification",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 440,
      "isReExport": false
    },
    {
      "name": "Int",
      "type": "type",
      "file": "src/types/snf-witness.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "SNFWitness",
      "type": "type",
      "file": "src/types/snf-witness.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "SNFCertificate",
      "type": "type",
      "file": "src/types/snf-witness.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "checkSNFCertificate",
      "type": "function",
      "file": "src/types/snf-witness.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "verifySNFProperties",
      "type": "function",
      "file": "src/types/snf-witness.ts",
      "line": 140,
      "isReExport": false
    },
    {
      "name": "createExampleSNFCertificates",
      "type": "function",
      "file": "src/types/snf-witness.ts",
      "line": 181,
      "isReExport": false
    },
    {
      "name": "demonstrateSNFWitnesses",
      "type": "function",
      "file": "src/types/snf-witness.ts",
      "line": 209,
      "isReExport": false
    },
    {
      "name": "ObjPair",
      "type": "type",
      "file": "src/types/spec-impl.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "createObjPair",
      "type": "function",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "numericRangeAbstraction",
      "type": "function",
      "file": "src/types/spec-impl.ts",
      "line": 185,
      "isReExport": false
    },
    {
      "name": "stringCategoryAbstraction",
      "type": "function",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "Surj",
      "type": "type",
      "file": "src/types/spec-impl.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "SpecImpl",
      "type": "class",
      "file": "src/types/spec-impl.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "createCoarsening",
      "type": "function",
      "file": "src/types/spec-impl.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "verifySurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 75,
      "isReExport": false
    },
    {
      "name": "stringLengthAbstraction",
      "type": "function",
      "file": "src/types/spec-impl.ts",
      "line": 206,
      "isReExport": false
    },
    {
      "name": "connectivityAbstraction",
      "type": "function",
      "file": "src/types/spec-impl.ts",
      "line": 224,
      "isReExport": false
    },
    {
      "name": "Tri",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "Tet",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "SSetUpTo3",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "makeSSet",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "validateSSet",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "Horn2Inner",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 160,
      "isReExport": false
    },
    {
      "name": "enumerateInnerHorns2",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 162,
      "isReExport": false
    },
    {
      "name": "Horn2InnerCheck",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 173,
      "isReExport": false
    },
    {
      "name": "checkHorns2Inner",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 175,
      "isReExport": false
    },
    {
      "name": "Horn2Outer",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 195,
      "isReExport": false
    },
    {
      "name": "enumerateOuterHorns2",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 199,
      "isReExport": false
    },
    {
      "name": "Horn2OuterCheck",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 216,
      "isReExport": false
    },
    {
      "name": "checkHorns2Outer",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 218,
      "isReExport": false
    },
    {
      "name": "Horn3",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 248,
      "isReExport": false
    },
    {
      "name": "enumerateInnerHorns3",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 250,
      "isReExport": false
    },
    {
      "name": "Horn3Check",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 282,
      "isReExport": false
    },
    {
      "name": "checkHorns3",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 284,
      "isReExport": false
    },
    {
      "name": "QCReport",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 297,
      "isReExport": false
    },
    {
      "name": "isQuasiCategory",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 305,
      "isReExport": false
    },
    {
      "name": "generateDegeneracies",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 353,
      "isReExport": false
    },
    {
      "name": "HornSpec",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 421,
      "isReExport": false
    },
    {
      "name": "getHornWitness",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 428,
      "isReExport": false
    },
    {
      "name": "fillHorn",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 471,
      "isReExport": false
    },
    {
      "name": "ChainComplex02",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 526,
      "isReExport": false
    },
    {
      "name": "toChainComplex",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 534,
      "isReExport": false
    },
    {
      "name": "nerveOfPoset",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 565,
      "isReExport": false
    },
    {
      "name": "printQCReport",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 602,
      "isReExport": false
    },
    {
      "name": "printMissingHorns2",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 614,
      "isReExport": false
    },
    {
      "name": "StrongMonad",
      "type": "interface",
      "file": "src/types/strong-monad.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "StrongOption",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "StrongArray",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "StrongReader",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "State",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "StrongState",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 96,
      "isReExport": false
    },
    {
      "name": "Writer",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 116,
      "isReExport": false
    },
    {
      "name": "StrongWriter",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "EMAlgebra",
      "type": "interface",
      "file": "src/types/strong-monad.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "EMMonoid",
      "type": "interface",
      "file": "src/types/strong-monad.ts",
      "line": 146,
      "isReExport": false
    },
    {
      "name": "freeEMMonoid",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 152,
      "isReExport": false
    },
    {
      "name": "enumOption",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 172,
      "isReExport": false
    },
    {
      "name": "enumArray",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 177,
      "isReExport": false
    },
    {
      "name": "StrongMonadLawResults",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 203,
      "isReExport": false
    },
    {
      "name": "checkStrongMonadLaws",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 214,
      "isReExport": false
    },
    {
      "name": "EMMonoidLawResults",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 389,
      "isReExport": false
    },
    {
      "name": "checkEMMonoid",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 396,
      "isReExport": false
    },
    {
      "name": "optionSumEMMonoid",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 544,
      "isReExport": false
    },
    {
      "name": "arrayStringEMMonoid",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 550,
      "isReExport": false
    },
    {
      "name": "demonstrateStrongMonads",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 563,
      "isReExport": false
    },
    {
      "name": "composeSurjections",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 52,
      "isReExport": false
    },
    {
      "name": "idSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "quotientSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 95,
      "isReExport": false
    },
    {
      "name": "isSurjectionSplit",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 131,
      "isReExport": false
    },
    {
      "name": "surjectionKernel",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 146,
      "isReExport": false
    },
    {
      "name": "factorThroughSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 165,
      "isReExport": false
    },
    {
      "name": "createExampleSurjections",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 204,
      "isReExport": false
    },
    {
      "name": "neighborhoods",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "converges",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "pushforwardUltrafilter",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "alphaViaLimit",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "verifyEMViaLimits",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "demonstrateUltrafilterConvergence",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 102,
      "isReExport": false
    },
    {
      "name": "fromOpens",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "isContinuous",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 109,
      "isReExport": false
    },
    {
      "name": "isT0",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 130,
      "isReExport": false
    },
    {
      "name": "isHausdorff",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 160,
      "isReExport": false
    },
    {
      "name": "isCompact",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 175,
      "isReExport": false
    },
    {
      "name": "subset",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "union",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "compl",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "isSubset",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 109,
      "isReExport": false
    },
    {
      "name": "setEqual",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 113,
      "isReExport": false
    },
    {
      "name": "demonstrateTopology",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 213,
      "isReExport": false
    },
    {
      "name": "productCarrier",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 303,
      "isReExport": false
    },
    {
      "name": "rectangle",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 325,
      "isReExport": false
    },
    {
      "name": "encodeSubsetProd",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 349,
      "isReExport": false
    },
    {
      "name": "productTopology",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 382,
      "isReExport": false
    },
    {
      "name": "pr1",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 467,
      "isReExport": false
    },
    {
      "name": "pr2",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 472,
      "isReExport": false
    },
    {
      "name": "verifyProductUniversalProperty",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 482,
      "isReExport": false
    },
    {
      "name": "TwoCategory",
      "type": "interface",
      "file": "src/types/two-category.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "check2CategoryLaws",
      "type": "function",
      "file": "src/types/two-category.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "demonstrate2Category",
      "type": "function",
      "file": "src/types/two-category.ts",
      "line": 123,
      "isReExport": false
    },
    {
      "name": "mkUltrafilterMonad",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "UF",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "run",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "mu",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "eta",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "contains",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "principal",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "verifyUltrafilter",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "intersectUltrafilters",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "demonstrateUltrafilterMonad",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 203,
      "isReExport": false
    },
    {
      "name": "Ultrafilter",
      "type": "interface",
      "file": "src/types/ultrafilter.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "natToUltrafilter",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "ultrafilterToNatComponent",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "deriveUnionLaw",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 107,
      "isReExport": false
    },
    {
      "name": "deriveProjectionLaws",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 140,
      "isReExport": false
    },
    {
      "name": "demonstrateUltrafilterNatBridge",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 170,
      "isReExport": false
    },
    {
      "name": "FiniteSubset",
      "type": "type",
      "file": "src/types/ultrafilter.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "ultrafilterFromCodensity",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "principalUltrafilter",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "verifyUltrafilterLaws",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 121,
      "isReExport": false
    },
    {
      "name": "isPrincipalWith",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 226,
      "isReExport": false
    },
    {
      "name": "principalFromCodensity",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 241,
      "isReExport": false
    },
    {
      "name": "verifyPrincipalProperty",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 253,
      "isReExport": false
    },
    {
      "name": "demonstrateUltrafilter",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 294,
      "isReExport": false
    },
    {
      "name": "InclusionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "RelEqWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "FunEqWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "LawCheck",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "SurjectionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "EquivalenceWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "SquareWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "NaturalityWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "AdjunctionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "MonadLawWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "StrongMonadWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "EMMonoidWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "MonadLeftUnitWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 86,
      "isReExport": false
    },
    {
      "name": "MonadRightUnitWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "MonadAssociativityWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "StrengthUnitWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "EMAlgebraUnitWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "EMMultiplicativityWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "EMUnitMorphismWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 133,
      "isReExport": false
    },
    {
      "name": "GaloisAdjunctionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "AllegoryLawWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 175,
      "isReExport": false
    },
    {
      "name": "relEqWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 207,
      "isReExport": false
    },
    {
      "name": "funEqWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 243,
      "isReExport": false
    },
    {
      "name": "naturalityWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 324,
      "isReExport": false
    },
    {
      "name": "combineInclusionWitnesses",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 354,
      "isReExport": false
    },
    {
      "name": "lawCheck",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 371,
      "isReExport": false
    },
    {
      "name": "lawCheckSuccess",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 382,
      "isReExport": false
    },
    {
      "name": "lawCheckWithShrinking",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 387,
      "isReExport": false
    },
    {
      "name": "extractCounterexamples",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 420,
      "isReExport": false
    },
    {
      "name": "hasFailures",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 427,
      "isReExport": false
    },
    {
      "name": "formatWitnesses",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 484,
      "isReExport": false
    },
    {
      "name": "createYonedaEmbedding",
      "type": "function",
      "file": "src/types/yoneda.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "demonstrateYoneda",
      "type": "function",
      "file": "src/types/yoneda.ts",
      "line": 121,
      "isReExport": false
    },
    {
      "name": "UAAlgebra",
      "type": "type",
      "file": "src/universal/Algebra.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "Equation",
      "type": "type",
      "file": "src/universal/Equation.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "enumerateTerms",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "congruenceClosure",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "quotientAlgebra",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "projectionToQuotient",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 149,
      "isReExport": false
    },
    {
      "name": "satisfies",
      "type": "function",
      "file": "src/universal/Equation.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "freeInducedHom",
      "type": "function",
      "file": "src/universal/FreeAlgebra.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "UAHom",
      "type": "type",
      "file": "src/universal/Hom.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "isUAHom",
      "type": "function",
      "file": "src/universal/Hom.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "OpSym",
      "type": "type",
      "file": "src/universal/Signature.ts",
      "line": 1,
      "isReExport": false
    },
    {
      "name": "opOf",
      "type": "function",
      "file": "src/universal/Signature.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "Var",
      "type": "const",
      "file": "src/universal/Term.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "subst",
      "type": "function",
      "file": "src/universal/Term.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "termEq",
      "type": "function",
      "file": "src/universal/Term.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "uaModelToTAlgebra",
      "type": "function",
      "file": "src/universal/em/Equivalence.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "tAlgebraToUA",
      "type": "function",
      "file": "src/universal/em/Equivalence.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "checkHomCoincides",
      "type": "function",
      "file": "src/universal/em/Equivalence.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "MonoidSig",
      "type": "const",
      "file": "src/universal/examples/MonoidSig.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "ZmodAsMonoid",
      "type": "function",
      "file": "src/universal/examples/MonoidSig.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "BoolOrAsMonoid",
      "type": "function",
      "file": "src/universal/examples/MonoidSig.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "buildLawvere",
      "type": "function",
      "file": "src/universal/lawvere/Lawvere.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "interpretInSet",
      "type": "function",
      "file": "src/universal/lawvere/SetFunctor.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "KleisliHom",
      "type": "type",
      "file": "src/universal/monad/Diagram.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "TriangleResult",
      "type": "type",
      "file": "src/universal/monad/Diagram.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "SquareResult",
      "type": "type",
      "file": "src/universal/monad/Diagram.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "makeKleisliDiagramTools",
      "type": "function",
      "file": "src/universal/monad/Diagram.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "KleisliFromTheory",
      "type": "function",
      "file": "src/universal/monad/Kleisli.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "TCarrier",
      "type": "interface",
      "file": "src/universal/monad/LawvereMonad.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "SetMonadFromTheory",
      "type": "interface",
      "file": "src/universal/monad/LawvereMonad.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "buildSetMonadFromTheory",
      "type": "function",
      "file": "src/universal/monad/LawvereMonad.ts",
      "line": 44,
      "isReExport": false
    },
    {
      "name": "RewriteRule",
      "type": "type",
      "file": "src/universal/rewrite/Rules.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "SetMonad",
      "type": "interface",
      "file": "src/universal/rewrite/SetMonad.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "must",
      "type": "function",
      "file": "src/util/guards.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "idx",
      "type": "function",
      "file": "src/util/guards.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "defineConfig",
      "type": "default",
      "file": "vitest.config.ts",
      "line": 3,
      "isReExport": false
    }
  ],
  "allExports": [
    {
      "name": "_Add",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "_Let",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 136,
      "isReExport": false
    },
    {
      "name": "_Lit",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "_Mul",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 133,
      "isReExport": false
    },
    {
      "name": "_Var",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 135,
      "isReExport": false
    },
    {
      "name": "// Note: ObjPair",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 151,
      "isReExport": true,
      "originalFile": "./spec-impl-refactored.js"
    },
    {
      "name": "// Note: Square",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 144,
      "isReExport": true,
      "originalFile": "./double-lax-functor-interface.js"
    },
    {
      "name": "// Note: squareWitness exported from witnesses.js",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 170,
      "isReExport": true,
      "originalFile": "./allegory-witness.js"
    },
    {
      "name": "// Note: verifySurjection exported from spec-impl.js",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 138,
      "isReExport": true,
      "originalFile": "./surjection-types.js"
    },
    {
      "name": "abort",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 87,
      "isReExport": false
    },
    {
      "name": "Action",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "adaptBitRelToRel",
      "type": "function",
      "file": "src/types/bitrel.ts",
      "line": 342,
      "isReExport": false
    },
    {
      "name": "adaptExistingOptic",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "adaptProfunctorLens",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "adaptProfunctorOptic",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 584,
      "isReExport": false
    },
    {
      "name": "adaptProfunctorPrism",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 189,
      "isReExport": false
    },
    {
      "name": "adaptRelToBitRel",
      "type": "function",
      "file": "src/types/bitrel.ts",
      "line": 347,
      "isReExport": false
    },
    {
      "name": "add",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "Add",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 297,
      "isReExport": false
    },
    {
      "name": "AddF",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "addZero",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 225,
      "isReExport": false
    },
    {
      "name": "AdjointEquivalence",
      "type": "interface",
      "file": "src/types/catkit-equivalence.ts",
      "line": 102,
      "isReExport": false
    },
    {
      "name": "Adjunction",
      "type": "interface",
      "file": "src/types/catkit-adjunction.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "adjunctionExistsPreimageHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 352,
      "isReExport": false
    },
    {
      "name": "adjunctionLeftHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 317,
      "isReExport": false
    },
    {
      "name": "adjunctionPreimageForallHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 361,
      "isReExport": false
    },
    {
      "name": "adjunctionRightHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 323,
      "isReExport": false
    },
    {
      "name": "adjunctionRoundTripLaws",
      "type": "function",
      "file": "src/laws/Adjunction.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "adjunctionViaComma",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 137,
      "isReExport": false
    },
    {
      "name": "AdjunctionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "AdvancedPrism",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 337,
      "isReExport": false
    },
    {
      "name": "Algebra",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 85,
      "isReExport": false
    },
    {
      "name": "AlgebraHomomorphism",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "allegoryLawWitness",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 170,
      "isReExport": true,
      "originalFile": "./allegory-witness.js"
    },
    {
      "name": "AllegoryLawWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 175,
      "isReExport": false
    },
    {
      "name": "AllegoryWitness",
      "type": "type",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "allLawful",
      "type": "function",
      "file": "src/laws/registry.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "allSubsets",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "alphaViaLimit",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "Alt",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "Alternative",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "ana",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "AnalyzedHom",
      "type": "interface",
      "file": "src/algebra/group/FirstIso.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "analyzeGroupHom",
      "type": "function",
      "file": "src/algebra/group/analyzeHom.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "analyzeRingHom",
      "type": "function",
      "file": "src/algebra/ring/Hom.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "analyzeSetHom",
      "type": "function",
      "file": "src/cat/set/SetCat.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "and2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 207,
      "isReExport": false
    },
    {
      "name": "AnyOptic",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 155,
      "isReExport": false
    },
    {
      "name": "ap",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "Ap",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "apAp",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 254,
      "isReExport": false
    },
    {
      "name": "apo",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "App",
      "type": "const",
      "file": "src/universal/Term.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "append",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "Applicative",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "ApplicativeFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 148,
      "isReExport": false
    },
    {
      "name": "ApplicativeOps",
      "type": "interface",
      "file": "src/types/freeapp-coyo.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "Apply",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "applyMigration",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 418,
      "isReExport": false
    },
    {
      "name": "applyRulesFix",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 171,
      "isReExport": false
    },
    {
      "name": "applyRulesOnce",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 159,
      "isReExport": false
    },
    {
      "name": "applyRulesOnceWithWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 404,
      "isReExport": false
    },
    {
      "name": "applyRulesWithTrace",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 272,
      "isReExport": false
    },
    {
      "name": "applyRuleWithTrace",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 258,
      "isReExport": false
    },
    {
      "name": "applyRuleWithWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 387,
      "isReExport": false
    },
    {
      "name": "applyShrinking",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 355,
      "isReExport": false
    },
    {
      "name": "AppMorphism",
      "type": "interface",
      "file": "src/types/catkit-traversal.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "approxEq",
      "type": "const",
      "file": "src/structures/group/HomHelpers.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "approxEqMatrix",
      "type": "function",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "arrayStringEMMonoid",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 550,
      "isReExport": false
    },
    {
      "name": "arraySumEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 156,
      "isReExport": false
    },
    {
      "name": "arrayTupleScheme",
      "type": "function",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "Arrow",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "ArrowApply",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "ArrowChoice",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "ArrowT",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "asAbelian",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "asFiniteGroup",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "asQuasiFromNerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 447,
      "isReExport": false
    },
    {
      "name": "asSetObj",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "AuditEntry",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "AuditTrail",
      "type": "class",
      "file": "src/types/quiver-pushout.ts",
      "line": 346,
      "isReExport": false
    },
    {
      "name": "autGroup",
      "type": "function",
      "file": "src/structures/group/automorphisms/Aut.ts",
      "line": 84,
      "isReExport": false
    },
    {
      "name": "Auto",
      "type": "type",
      "file": "src/structures/group/automorphisms/Aut.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "autoClassifyGroup",
      "type": "function",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "autoConfigureDisplay",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 487,
      "isReExport": false
    },
    {
      "name": "automorphismsBruteforce",
      "type": "function",
      "file": "src/structures/group/Isomorphism.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "autoQ_scale",
      "type": "function",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "autoZ_id",
      "type": "const",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "autoZ_neg",
      "type": "const",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "avoiding conflict",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 170,
      "isReExport": true,
      "originalFile": "./allegory-witness.js"
    },
    {
      "name": "avoiding conflict\n  inclusionWitness",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 144,
      "isReExport": true,
      "originalFile": "./double-lax-functor-interface.js"
    },
    {
      "name": "basis",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "basisC0",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 356,
      "isReExport": false
    },
    {
      "name": "basisC1",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 360,
      "isReExport": false
    },
    {
      "name": "basisC2",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 364,
      "isReExport": false
    },
    {
      "name": "batchProbeCodense",
      "type": "function",
      "file": "src/types/codense-probe.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "batchProbeCodensity",
      "type": "function",
      "file": "src/types/codensity-probe.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "BenchmarkConfig",
      "type": "interface",
      "file": "src/bench/rel-benchmark.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "benchmarkFingerTree",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 341,
      "isReExport": false
    },
    {
      "name": "benchmarkRope",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 97,
      "isReExport": false
    },
    {
      "name": "BenchmarkRun",
      "type": "interface",
      "file": "src/bench/rel-benchmark.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "BFin",
      "type": "type",
      "file": "src/gadt/basic/BFin.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "bfinConViaLan",
      "type": "function",
      "file": "src/gadt/basic/BFin.Lan.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "BFinF",
      "type": "type",
      "file": "src/gadt/basic/BFin.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "Bicategory",
      "type": "interface",
      "file": "src/types/bicategory.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "Bifunctor",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "BifunctorLegacy",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "Bijection",
      "type": "type",
      "file": "src/types/double-functor.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "bijectionWitness",
      "type": "function",
      "file": "src/structures/group/Isomorphism.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "BinaryTree",
      "type": "type",
      "file": "src/types/adt-tree.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "BinaryTreeF",
      "type": "type",
      "file": "src/types/adt-tree.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "bindWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 371,
      "isReExport": false
    },
    {
      "name": "biproduct",
      "type": "function",
      "file": "src/structures/ab/builders/Biproduct.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "Bit",
      "type": "type",
      "file": "src/types/finvect.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "BitMatrix",
      "type": "class",
      "file": "src/types/bitrel.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "BitRel",
      "type": "class",
      "file": "src/types/bitrel.ts",
      "line": 195,
      "isReExport": false
    },
    {
      "name": "BitSet",
      "type": "class",
      "file": "src/types/bitrel.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "bool",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "BoolMorphisms",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 237,
      "isReExport": false
    },
    {
      "name": "BoolOrAsMonoid",
      "type": "function",
      "file": "src/universal/examples/MonoidSig.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "BoolT",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "bothPair",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "Bounce",
      "type": "type",
      "file": "src/types/cont.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "boundary1",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 389,
      "isReExport": false
    },
    {
      "name": "boundary2",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 402,
      "isReExport": false
    },
    {
      "name": "boundaryFromSSet",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 637,
      "isReExport": false
    },
    {
      "name": "BoundedLattice",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "Branch",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "BranchF",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "brokenConcatEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 305,
      "isReExport": false
    },
    {
      "name": "brokenUnitEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 348,
      "isReExport": false
    },
    {
      "name": "buildComplete",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "buildFrom",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "buildLawvere",
      "type": "function",
      "file": "src/universal/lawvere/Lawvere.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "buildPathsUpTo",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 327,
      "isReExport": false
    },
    {
      "name": "buildPointwiseColim",
      "type": "function",
      "file": "src/types/pointwise-colim-util.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "buildPointwiseLimit",
      "type": "function",
      "file": "src/types/pointwise-limit-util.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "buildRose",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "buildSetMonadFromTheory",
      "type": "function",
      "file": "src/universal/monad/LawvereMonad.ts",
      "line": 44,
      "isReExport": false
    },
    {
      "name": "C",
      "type": "const",
      "file": "src/structures/group/Complex.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "C_free",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 216,
      "isReExport": false
    },
    {
      "name": "callCC",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "canonicalKey",
      "type": "function",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "canonicalProjection",
      "type": "function",
      "file": "src/algebra/group/FirstIso.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "canonicalRepresentatives",
      "type": "const",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "CapturedCont",
      "type": "type",
      "file": "src/types/shift-reset.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "Cat2",
      "type": "function",
      "file": "src/types/cat2.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "cata",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "CatBicat",
      "type": "function",
      "file": "src/types/cat-bicat.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "Category",
      "type": "interface",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "CategoryFunctor",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "cayleyTable",
      "type": "function",
      "file": "src/algebra/group/Cayley.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "CayleyTable",
      "type": "type",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "center",
      "type": "function",
      "file": "src/structures/group/center/Center.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "certifySNF",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 304,
      "isReExport": false
    },
    {
      "name": "chain",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "Chain",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "ChainComplex02",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 526,
      "isReExport": false
    },
    {
      "name": "charAt",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "check2CategoryLaws",
      "type": "function",
      "file": "src/types/two-category.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "checkAbelian",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "checkAdjointEquivalence",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "checkAdjunctionTriangles",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "checkBicategoryCoherence",
      "type": "function",
      "file": "src/types/bicategory.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "checkCategoryNerveQuasicat",
      "type": "function",
      "file": "src/types/nerve-quasicat-bridge.ts",
      "line": 76,
      "isReExport": false
    },
    {
      "name": "checkCommaSquare",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "checkCommutativeSquare",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 354,
      "isReExport": false
    },
    {
      "name": "checkCompositeOptics",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 203,
      "isReExport": false
    },
    {
      "name": "checkCompositionParity",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 152,
      "isReExport": false
    },
    {
      "name": "checkConverseParity",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 270,
      "isReExport": false
    },
    {
      "name": "checkDinaturality",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 320,
      "isReExport": false
    },
    {
      "name": "checkDoubleFunctorLaws",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 172,
      "isReExport": false
    },
    {
      "name": "checkDoubleFunctorLaws exported from category-to-nerve-sset.js",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 144,
      "isReExport": true,
      "originalFile": "./double-lax-functor-interface.js"
    },
    {
      "name": "checkEMLaws",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "checkEMMonoid",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 396,
      "isReExport": false
    },
    {
      "name": "checkEMMonoidEnhanced",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 385,
      "isReExport": false
    },
    {
      "name": "checkFilledHorn2",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 482,
      "isReExport": false
    },
    {
      "name": "checkFunctorLaws",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "checkGaloisConnection",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "checkGroup",
      "type": "function",
      "file": "src/structures/group/Group.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "checkHomCoincides",
      "type": "function",
      "file": "src/universal/em/Equivalence.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "checkHorns2Inner",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 175,
      "isReExport": false
    },
    {
      "name": "checkHorns2Outer",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 218,
      "isReExport": false
    },
    {
      "name": "checkHorns3",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 284,
      "isReExport": false
    },
    {
      "name": "checkInterchange",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 651,
      "isReExport": false
    },
    {
      "name": "checkInterchangeLaw",
      "type": "function",
      "file": "src/types/double-lax-functor.ts",
      "line": 133,
      "isReExport": false
    },
    {
      "name": "checkIntersectionParity",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 233,
      "isReExport": false
    },
    {
      "name": "checkIso",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "checkLens",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "checkLensLaws",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "checkMonoid",
      "type": "function",
      "file": "src/algebra/semiringlike/Monoid.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "checkNatIso",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "checkNaturality",
      "type": "function",
      "file": "src/types/presheaf.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "checkNaturalityCo",
      "type": "function",
      "file": "src/types/copresheaf.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "checkOpticCompatibility",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 491,
      "isReExport": false
    },
    {
      "name": "checkPrism",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 111,
      "isReExport": false
    },
    {
      "name": "checkPrismLaws",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "checkProductUP",
      "type": "function",
      "file": "src/top/ProductUP.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "checkProTransNaturality",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1107,
      "isReExport": false
    },
    {
      "name": "checkQuiverNerveQuasicat",
      "type": "function",
      "file": "src/types/nerve-quasicat-bridge.ts",
      "line": 98,
      "isReExport": false
    },
    {
      "name": "checkRingLaws",
      "type": "function",
      "file": "src/structures/ring/Ring.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "checkRuleSoundness",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "checkSemigroup",
      "type": "function",
      "file": "src/algebra/semiringlike/Semigroup.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "checkSetNatIso",
      "type": "function",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "checkSetNatIsoEnhanced",
      "type": "function",
      "file": "src/types/catkit-kan-transport-fixed.ts",
      "line": 271,
      "isReExport": false
    },
    {
      "name": "checkSNFCertificate",
      "type": "function",
      "file": "src/types/snf-witness.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "checkStrongMonadLaws",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 214,
      "isReExport": false
    },
    {
      "name": "checkTraversal",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "checkTraversalFusion",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 221,
      "isReExport": false
    },
    {
      "name": "checkTraversalIdentity",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 216,
      "isReExport": false
    },
    {
      "name": "checkTraversalLinearity_Count",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 250,
      "isReExport": false
    },
    {
      "name": "checkTraversalNaturality_Length",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 230,
      "isReExport": false
    },
    {
      "name": "checkUnionParity",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 196,
      "isReExport": false
    },
    {
      "name": "chi",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 246,
      "isReExport": false
    },
    {
      "name": "children",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 139,
      "isReExport": false
    },
    {
      "name": "Choice",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "ChoiceDict",
      "type": "interface",
      "file": "src/types/catkit-prisms.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "ChoiceFn",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "ChoiceForget",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "ChoiceForgetOption",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "ChoiceFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "choiceRules",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "ChoiceTagged",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "choose",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 180,
      "isReExport": false
    },
    {
      "name": "clearLawful",
      "type": "function",
      "file": "src/laws/registry.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "Closed",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "closure",
      "type": "function",
      "file": "src/structures/ring/Spec.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "closureOnX",
      "type": "function",
      "file": "src/order/Galois.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "Cn",
      "type": "function",
      "file": "src/algebra/group/finite/StandardGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Coalgebra",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "CodensityAssumptions",
      "type": "type",
      "file": "src/types/codensity-of.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "codensityByComma",
      "type": "function",
      "file": "src/types/codensity-by-comma.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "codensityLawPack",
      "type": "const",
      "file": "src/laws/examples/ConcreteCodensity.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "CodensityMonad",
      "type": "interface",
      "file": "src/types/codensity-set.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "CodensityMonadOps",
      "type": "interface",
      "file": "src/types/codensity-monad.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "CodensityNat",
      "type": "interface",
      "file": "src/types/codensity-nat-view.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "CodensityNatPack",
      "type": "type",
      "file": "src/laws/examples/CodensityNat.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "codensityOf",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "codensityOfDiscrete",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 103,
      "isReExport": false
    },
    {
      "name": "codensityOfSet",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 75,
      "isReExport": false
    },
    {
      "name": "CodensitySet",
      "type": "function",
      "file": "src/types/codensity-set.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "codensityToHKTMonad",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 368,
      "isReExport": false
    },
    {
      "name": "coequalizer",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 183,
      "isReExport": false
    },
    {
      "name": "CoequalizerResult",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "coerce",
      "type": "const",
      "file": "src/category/Eq.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "Cofree",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 229,
      "isReExport": false
    },
    {
      "name": "coker",
      "type": "function",
      "file": "src/structures/ab/builders/KernelsCokernels.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "ColimAtCState",
      "type": "type",
      "file": "src/types/pointwise-colim-util.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "colimitFinSet",
      "type": "function",
      "file": "src/types/finset-colimits-general.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "collapse",
      "type": "function",
      "file": "src/structures/group/GrpCat.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "combineInclusionWitnesses",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 354,
      "isReExport": false
    },
    {
      "name": "comma",
      "type": "function",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "CommaMor",
      "type": "type",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "CommaObj",
      "type": "type",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "Comonad",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "comp",
      "type": "const",
      "file": "src/structures/group/cat/GroupCat.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "companion",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 193,
      "isReExport": false
    },
    {
      "name": "companionHomProf",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 113,
      "isReExport": false
    },
    {
      "name": "companionOf",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 826,
      "isReExport": false
    },
    {
      "name": "compareStrategies",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "compl",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "complementViaOr",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 353,
      "isReExport": false
    },
    {
      "name": "completeFromBounded",
      "type": "function",
      "file": "src/order/dsl.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "CompleteLattice",
      "type": "type",
      "file": "src/order/Lattice.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "completeLatticeLaws",
      "type": "function",
      "file": "src/laws/Order.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "compose",
      "type": "function",
      "file": "src/structures/ring/RingHom.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "Compose",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "compose1From1",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 262,
      "isReExport": false
    },
    {
      "name": "compose1From2",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 274,
      "isReExport": false
    },
    {
      "name": "ComposeApp",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "composeCodensityNats",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 434,
      "isReExport": false
    },
    {
      "name": "composeContinuations",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "composeDoubleFunctors",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 76,
      "isReExport": false
    },
    {
      "name": "composeEM",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 192,
      "isReExport": false
    },
    {
      "name": "composeFiniteProfCoend",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1218,
      "isReExport": false
    },
    {
      "name": "composeFunctors",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "composeNat",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 252,
      "isReExport": false
    },
    {
      "name": "composeNatIso",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "composeO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 158,
      "isReExport": false
    },
    {
      "name": "composePrism",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "composePrismLens",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 293,
      "isReExport": false
    },
    {
      "name": "composeSafeLenses",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 282,
      "isReExport": false
    },
    {
      "name": "composeSurjections",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 52,
      "isReExport": false
    },
    {
      "name": "composeViaLan",
      "type": "const",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "CompositeOpticsWitness",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "comprehensiveDemo",
      "type": "function",
      "file": "src/examples/spec-impl-fuzz.ts",
      "line": 161,
      "isReExport": false
    },
    {
      "name": "ComprehensiveLawReport",
      "type": "type",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "comprehensiveNerveAnalysis",
      "type": "function",
      "file": "src/types/nerve-quasicat-bridge.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "computeAndVerifySNF",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 240,
      "isReExport": false
    },
    {
      "name": "computeCategoryHomology",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "computeDiscreteCardinality",
      "type": "function",
      "file": "src/types/codensity-set.ts",
      "line": 165,
      "isReExport": false
    },
    {
      "name": "computeFreeQuiverHomology",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "computeHomology01",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 451,
      "isReExport": false
    },
    {
      "name": "computeHomology01_Z",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 503,
      "isReExport": false
    },
    {
      "name": "computeHomologyWithVerification",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 440,
      "isReExport": false
    },
    {
      "name": "computeNerveHomology",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "computeRanEnd",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "concat",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "concatSimplex",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 251,
      "isReExport": false
    },
    {
      "name": "conditionalField",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 223,
      "isReExport": false
    },
    {
      "name": "configureDisplay",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "configureParityChecking",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "Congruence",
      "type": "interface",
      "file": "src/algebra/group/Congruence.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "congruenceClosure",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "congruenceFromHom",
      "type": "function",
      "file": "src/algebra/group/Congruence.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "conjoint",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "conjointHomProf",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "conjointOf",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 833,
      "isReExport": false
    },
    {
      "name": "conjugation",
      "type": "function",
      "file": "src/structures/group/automorphisms/Conjugation.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "connectivityAbstraction",
      "type": "function",
      "file": "src/types/spec-impl.ts",
      "line": 224,
      "isReExport": false
    },
    {
      "name": "Cons",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "ConsF",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Const",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "constantCopresheaf",
      "type": "function",
      "file": "src/types/copresheaf.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "constantMorphism",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 291,
      "isReExport": false
    },
    {
      "name": "constantPresheaf",
      "type": "function",
      "file": "src/types/presheaf.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "constantPshDiagram",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 202,
      "isReExport": false
    },
    {
      "name": "ConstApp",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "Cont",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "contains",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "ContApplicative",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 98,
      "isReExport": false
    },
    {
      "name": "contBoth",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 137,
      "isReExport": false
    },
    {
      "name": "contCompose",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 130,
      "isReExport": false
    },
    {
      "name": "contEither",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "ContFunctor",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "ContHKT",
      "type": "type",
      "file": "src/types/cont.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "continuous",
      "type": "function",
      "file": "src/top/Topology.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "ContMonad",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "Contravariant",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "control",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "contToStrongMonad",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "converges",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "Copresheaf",
      "type": "interface",
      "file": "src/types/copresheaf.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "coproduct",
      "type": "function",
      "file": "src/types/finset-colimits.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "coproductEM",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 264,
      "isReExport": false
    },
    {
      "name": "coproductLift",
      "type": "function",
      "file": "src/structures/ab/AbCategory.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "coreWitnessDemo",
      "type": "function",
      "file": "src/examples/witness-core-demo.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Coset",
      "type": "type",
      "file": "src/structures/group/Quotient.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "cosetEq",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "cosetInv",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "cosetOp",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "cosets",
      "type": "function",
      "file": "src/algebra/group/Quotient.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "coslice",
      "type": "function",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 221,
      "isReExport": false
    },
    {
      "name": "cospan",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 126,
      "isReExport": false
    },
    {
      "name": "costMeasure",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 296,
      "isReExport": false
    },
    {
      "name": "counitHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 211,
      "isReExport": false
    },
    {
      "name": "counitSquare",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 847,
      "isReExport": false
    },
    {
      "name": "countOps",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "coy",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "coyId",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "coyMap",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "coYoneda",
      "type": "function",
      "file": "src/types/isbell.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "Coyoneda",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "CPO",
      "type": "type",
      "file": "src/order/Domain.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "cpoFromPoset",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "cps",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "CPS",
      "type": "const",
      "file": "src/types/index.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "createBrokenSNF",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 335,
      "isReExport": false
    },
    {
      "name": "createCoarsening",
      "type": "function",
      "file": "src/types/spec-impl.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "createDiagram",
      "type": "function",
      "file": "src/types/diagram.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "createEnhancedIsoClass",
      "type": "function",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "createExampleSNFCertificates",
      "type": "function",
      "file": "src/types/snf-witness.ts",
      "line": 181,
      "isReExport": false
    },
    {
      "name": "createExampleSurjections",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 204,
      "isReExport": false
    },
    {
      "name": "createFinVect",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "createForgetStrong",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 126,
      "isReExport": false
    },
    {
      "name": "createFunctionSpace",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "createLawCheckPredicate",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 342,
      "isReExport": false
    },
    {
      "name": "createLoggedMaxEM",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 442,
      "isReExport": false
    },
    {
      "name": "createMathAnnotation",
      "type": "function",
      "file": "src/types/math-trace-annot.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "createMonoidSetMonad",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 32,
      "isReExport": true,
      "originalFile": "./SetMonad"
    },
    {
      "name": "createNaturalTransformation",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 183,
      "isReExport": false
    },
    {
      "name": "createNodeRule",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "createObjPair",
      "type": "function",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "createParityTestData",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 540,
      "isReExport": false
    },
    {
      "name": "createPatternRule",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 95,
      "isReExport": false
    },
    {
      "name": "createPushoutStep",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 388,
      "isReExport": false
    },
    {
      "name": "createRel",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 208,
      "isReExport": false
    },
    {
      "name": "createRelId",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 212,
      "isReExport": false
    },
    {
      "name": "createRenameStep",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 403,
      "isReExport": false
    },
    {
      "name": "createSemilatticeSetMonad",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 32,
      "isReExport": true,
      "originalFile": "./SetMonad"
    },
    {
      "name": "createSetMonad",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 32,
      "isReExport": true,
      "originalFile": "./SetMonad"
    },
    {
      "name": "createSpecImplFunctor",
      "type": "function",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 178,
      "isReExport": false
    },
    {
      "name": "createTestBijection",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 289,
      "isReExport": false
    },
    {
      "name": "createTestSurjection",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 301,
      "isReExport": false
    },
    {
      "name": "createYonedaEmbedding",
      "type": "function",
      "file": "src/types/yoneda.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "crtForZn",
      "type": "function",
      "file": "src/structures/ring/CRT.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "crtIsomorphism",
      "type": "function",
      "file": "src/structures/ring/CRT.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "CurriedLens",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 332,
      "isReExport": false
    },
    {
      "name": "Cyclic",
      "type": "function",
      "file": "src/algebra/group/Group.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "CyclicCanonical",
      "type": "function",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "D",
      "type": "function",
      "file": "src/structures/ring/Spec.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "d0",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 230,
      "isReExport": false
    },
    {
      "name": "d1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 231,
      "isReExport": false
    },
    {
      "name": "d1_of_2simplex",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 470,
      "isReExport": false
    },
    {
      "name": "d2",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 232,
      "isReExport": false
    },
    {
      "name": "DEBUG_PERFORMANCE",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "DEBUG_WITNESSES",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "Deep",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 85,
      "isReExport": false
    },
    {
      "name": "defaultRegistry",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 342,
      "isReExport": false
    },
    {
      "name": "DefaultRel",
      "type": "const",
      "file": "src/types/rel-factory-default.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "DefaultRelFactory",
      "type": "const",
      "file": "src/types/rel-factory-default.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "defaultRules",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 253,
      "isReExport": false
    },
    {
      "name": "defineConfig",
      "type": "default",
      "file": "vitest.config.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "DelimCont",
      "type": "type",
      "file": "src/types/shift-reset.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "demo",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 477,
      "isReExport": false
    },
    {
      "name": "demoKanExample",
      "type": "function",
      "file": "src/types/catkit-kan.ts",
      "line": 245,
      "isReExport": false
    },
    {
      "name": "demonstrate2Category",
      "type": "function",
      "file": "src/types/two-category.ts",
      "line": 123,
      "isReExport": false
    },
    {
      "name": "demonstrateAllegoryWitnesses",
      "type": "function",
      "file": "src/types/allegory-witness.ts",
      "line": 282,
      "isReExport": false
    },
    {
      "name": "demonstrateAPI",
      "type": "function",
      "file": "src/examples/snf-surface-api-demo.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "demonstrateBeforeAfter",
      "type": "function",
      "file": "src/examples/shrinking-before-after-demo.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "demonstrateBicategory",
      "type": "function",
      "file": "src/types/bicategory.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "demonstrateBinaryTreeADT",
      "type": "function",
      "file": "src/types/adt-tree.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "demonstrateCat2",
      "type": "function",
      "file": "src/types/cat2.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "demonstrateCatBicat",
      "type": "function",
      "file": "src/types/cat-bicat.ts",
      "line": 130,
      "isReExport": false
    },
    {
      "name": "demonstrateCodenseProbingWithExamples",
      "type": "function",
      "file": "src/types/codense-probe.ts",
      "line": 75,
      "isReExport": false
    },
    {
      "name": "demonstrateCodensityMonad",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 405,
      "isReExport": false
    },
    {
      "name": "demonstrateCodensityOf",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 208,
      "isReExport": false
    },
    {
      "name": "demonstrateCodensityProbe",
      "type": "function",
      "file": "src/types/codensity-probe.ts",
      "line": 112,
      "isReExport": false
    },
    {
      "name": "demonstrateCodensitySet",
      "type": "function",
      "file": "src/types/codensity-set.ts",
      "line": 203,
      "isReExport": false
    },
    {
      "name": "demonstrateComposition",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 497,
      "isReExport": false
    },
    {
      "name": "demonstrateCont",
      "type": "function",
      "file": "src/types/cont.ts",
      "line": 229,
      "isReExport": false
    },
    {
      "name": "demonstrateCopresheaf",
      "type": "function",
      "file": "src/types/copresheaf.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "demonstrateDiagramDSL",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 229,
      "isReExport": false
    },
    {
      "name": "demonstrateDiagrams",
      "type": "function",
      "file": "src/types/diagram.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "demonstrateDiscreteEM",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "demonstrateDisplayHelpers",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 517,
      "isReExport": false
    },
    {
      "name": "demonstrateDoubleDual",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 124,
      "isReExport": false
    },
    {
      "name": "demonstrateEMMonoids",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 524,
      "isReExport": false
    },
    {
      "name": "demonstrateExprOpADT",
      "type": "function",
      "file": "src/types/adt-expr-op.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "demonstrateExternalSchemes",
      "type": "function",
      "file": "src/types/adt-rec-schemes.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "demonstrateFinSetColimits",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 161,
      "isReExport": false
    },
    {
      "name": "demonstrateFinSetColimitsGeneral",
      "type": "function",
      "file": "src/types/finset-colimits-general.ts",
      "line": 119,
      "isReExport": false
    },
    {
      "name": "demonstrateFinSetLimits",
      "type": "function",
      "file": "src/types/finset-limits.ts",
      "line": 111,
      "isReExport": false
    },
    {
      "name": "demonstrateFixpointTheory",
      "type": "function",
      "file": "src/types/adt-fix.ts",
      "line": 214,
      "isReExport": false
    },
    {
      "name": "demonstrateFunctorAlgebras",
      "type": "function",
      "file": "src/types/adt-functor.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "demonstrateGADTExpressions",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "demonstrateKanTransportFixes",
      "type": "function",
      "file": "src/types/catkit-kan-transport-fixed.ts",
      "line": 462,
      "isReExport": false
    },
    {
      "name": "demonstrateLanGadtBridge",
      "type": "const",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "demonstrateListADT",
      "type": "function",
      "file": "src/types/adt-list.ts",
      "line": 95,
      "isReExport": false
    },
    {
      "name": "demonstrateMiniFinSet",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 419,
      "isReExport": false
    },
    {
      "name": "demonstrateNatBridge",
      "type": "function",
      "file": "src/types/codensity-nat-bridge.ts",
      "line": 119,
      "isReExport": false
    },
    {
      "name": "demonstrateNatView",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 294,
      "isReExport": false
    },
    {
      "name": "demonstrateOpticsIntegration",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "demonstrateOpticsWitnesses",
      "type": "function",
      "file": "src/types/optics-witness.ts",
      "line": 247,
      "isReExport": false
    },
    {
      "name": "demonstrateParityGuards",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 579,
      "isReExport": false
    },
    {
      "name": "demonstratePatternMatching",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "demonstratePointwiseColim",
      "type": "function",
      "file": "src/types/pointwise-colim-util.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "demonstratePointwiseLimit",
      "type": "function",
      "file": "src/types/pointwise-limit-util.ts",
      "line": 138,
      "isReExport": false
    },
    {
      "name": "demonstratePresheaf",
      "type": "function",
      "file": "src/types/presheaf.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "demonstratePresheafColimits",
      "type": "function",
      "file": "src/types/presheaf-colimits-general.ts",
      "line": 365,
      "isReExport": false
    },
    {
      "name": "demonstratePresheafLimits",
      "type": "function",
      "file": "src/types/presheaf-limits-general.ts",
      "line": 111,
      "isReExport": false
    },
    {
      "name": "demonstratePresheafPushout",
      "type": "function",
      "file": "src/types/presheaf-pushout-general.ts",
      "line": 137,
      "isReExport": false
    },
    {
      "name": "demonstratePropertyShrinking",
      "type": "function",
      "file": "src/examples/property-shrinking-demo.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "demonstrateRanSet",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 378,
      "isReExport": false
    },
    {
      "name": "demonstrateRelBenchmark",
      "type": "function",
      "file": "src/examples/rel-benchmark-demo.ts",
      "line": 345,
      "isReExport": false
    },
    {
      "name": "demonstrateRoseTreeADT",
      "type": "function",
      "file": "src/types/adt-rose.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "demonstrateShiftReset",
      "type": "function",
      "file": "src/types/shift-reset.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "demonstrateShrinking",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 373,
      "isReExport": false
    },
    {
      "name": "demonstrateSNFSurfaceAPI",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 353,
      "isReExport": false
    },
    {
      "name": "demonstrateSNFWitnesses",
      "type": "function",
      "file": "src/types/snf-witness.ts",
      "line": 209,
      "isReExport": false
    },
    {
      "name": "demonstrateStrategyAwareness",
      "type": "function",
      "file": "src/examples/parity-guards-demo.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "demonstrateStrongMonads",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 563,
      "isReExport": false
    },
    {
      "name": "demonstrateSumProductTypes",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "demonstrateTopology",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 213,
      "isReExport": false
    },
    {
      "name": "demonstrateTorusHomology",
      "type": "function",
      "file": "src/examples/torus-homology-demo.ts",
      "line": 167,
      "isReExport": false
    },
    {
      "name": "demonstrateTypeSafeBridge",
      "type": "function",
      "file": "src/examples/type-safe-bridge-demo.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "demonstrateUltrafilter",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 294,
      "isReExport": false
    },
    {
      "name": "demonstrateUltrafilterConvergence",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 102,
      "isReExport": false
    },
    {
      "name": "demonstrateUltrafilterMonad",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 203,
      "isReExport": false
    },
    {
      "name": "demonstrateUltrafilterNatBridge",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 170,
      "isReExport": false
    },
    {
      "name": "demonstrateUnifiedLawCheck",
      "type": "function",
      "file": "src/examples/unified-lawcheck-demo.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "demonstrateUniformDisplay",
      "type": "function",
      "file": "src/examples/uniform-display-demo.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "demonstrateWitnessedLawChecking",
      "type": "function",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 486,
      "isReExport": false
    },
    {
      "name": "demonstrateWriterRewrite",
      "type": "function",
      "file": "src/examples/writer-rewrite-demo.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "demonstrateYoneda",
      "type": "function",
      "file": "src/types/yoneda.ts",
      "line": 121,
      "isReExport": false
    },
    {
      "name": "deriveIntersectionLaw",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "deriveProjectionLaws",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 140,
      "isReExport": false
    },
    {
      "name": "deriveUnionLaw",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 107,
      "isReExport": false
    },
    {
      "name": "descendants",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "devPrint",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 451,
      "isReExport": false
    },
    {
      "name": "DiagonalExplanation",
      "type": "interface",
      "file": "src/types/snf-surface-api.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "DiagramToFinSet",
      "type": "interface",
      "file": "src/types/diagram.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "diagRel",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 810,
      "isReExport": false
    },
    {
      "name": "Digit",
      "type": "type",
      "file": "src/types/fingertree.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "digitFromArray",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "digitSize",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "digitToArray",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "DihedralCanonical",
      "type": "function",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "dimOf",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "DinaturalityTransport",
      "type": "type",
      "file": "src/types/ran-set.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "directSum",
      "type": "function",
      "file": "src/structures/ab/examples/AbelianGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Disc",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 190,
      "isReExport": false
    },
    {
      "name": "discrete",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 44,
      "isReExport": false
    },
    {
      "name": "discreteCodensity",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "discreteEMAlgebra",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "DiscreteEMAlgebra",
      "type": "interface",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "discretePoset",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 192,
      "isReExport": false
    },
    {
      "name": "discretePshDiagram",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 213,
      "isReExport": false
    },
    {
      "name": "Dist",
      "type": "type",
      "file": "src/prob/Dist.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "DistMonad",
      "type": "const",
      "file": "src/prob/Dist.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "Distributive",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "divisibilityPoset",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 239,
      "isReExport": false
    },
    {
      "name": "Doc",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 159,
      "isReExport": false
    },
    {
      "name": "DocOps",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 160,
      "isReExport": false
    },
    {
      "name": "domain",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 268,
      "isReExport": false
    },
    {
      "name": "DoubleCategory",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "doubleDual",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "DoubleFunctor",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 684,
      "isReExport": false
    },
    {
      "name": "DoubleLaxFunctor",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 144,
      "isReExport": true,
      "originalFile": "./double-lax-functor-interface.js"
    },
    {
      "name": "DoubleNaturalTransformation",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 84,
      "isReExport": false
    },
    {
      "name": "DoubleStrictFunctor",
      "type": "interface",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "drop",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 311,
      "isReExport": false
    },
    {
      "name": "dual",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "each",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 201,
      "isReExport": false
    },
    {
      "name": "eachArray",
      "type": "const",
      "file": "src/types/catkit-traversal.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "eachFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 191,
      "isReExport": false
    },
    {
      "name": "Edge",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "EdgeLabel",
      "type": "type",
      "file": "src/types/quiver-pushout.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Either",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "EitherFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "eitherTraversal",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 136,
      "isReExport": false
    },
    {
      "name": "ElemId",
      "type": "type",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "elts",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "EMAlgebra",
      "type": "interface",
      "file": "src/types/strong-monad.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "EMAlgebraUnitWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "EMMonoid",
      "type": "interface",
      "file": "src/types/strong-monad.ts",
      "line": 146,
      "isReExport": false
    },
    {
      "name": "EMMonoidLawResults",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 389,
      "isReExport": false
    },
    {
      "name": "EMMonoidWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "EMMultiplicativityWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "empty",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 50,
      "isReExport": false
    },
    {
      "name": "Empty",
      "type": "const",
      "file": "src/types/fingertree.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "EMUnitMorphismWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 133,
      "isReExport": false
    },
    {
      "name": "encodeSubsetProd",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 349,
      "isReExport": false
    },
    {
      "name": "EndFamily",
      "type": "type",
      "file": "src/types/ran-set.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "endMonoid",
      "type": "function",
      "file": "src/structures/group/endo/End.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "Endofunctor",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "endToNat",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 97,
      "isReExport": false
    },
    {
      "name": "EnhancedCongruence",
      "type": "interface",
      "file": "src/algebra/group/EnhancedCongruence.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "EnhancedEMMonoid",
      "type": "interface",
      "file": "src/types/em-monoid-examples.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "EnhancedFiniteGroup",
      "type": "interface",
      "file": "src/algebra/group/EnhancedQuotientGroup.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "enhancedGroupHom",
      "type": "function",
      "file": "src/algebra/group/EnhancedGroupHom.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "EnhancedGroupHom",
      "type": "interface",
      "file": "src/algebra/group/EnhancedGroup.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "EnhancedIsoClass",
      "type": "class",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "EnhancedQuotient",
      "type": "interface",
      "file": "src/algebra/group/EnhancedQuotientGroup.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "enhancedQuotientGroup",
      "type": "function",
      "file": "src/algebra/group/EnhancedQuotientGroup.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "enumArray",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 177,
      "isReExport": false
    },
    {
      "name": "enumerate",
      "type": "const",
      "file": "src/gadt/basic/BFin.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "enumerateAutomorphisms",
      "type": "function",
      "file": "src/structures/group/automorphisms/Aut.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "enumerateEndomorphisms",
      "type": "function",
      "file": "src/structures/group/endo/End.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "enumerateHoms",
      "type": "function",
      "file": "src/structures/ab/hom/Enumerate.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "enumerateIdeals",
      "type": "function",
      "file": "src/structures/ring/Spec.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "enumerateInnerHorns2",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 162,
      "isReExport": false
    },
    {
      "name": "enumerateInnerHorns3",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 250,
      "isReExport": false
    },
    {
      "name": "enumerateOuterHorns2",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 199,
      "isReExport": false
    },
    {
      "name": "enumerateSliceObjects",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 192,
      "isReExport": false
    },
    {
      "name": "enumerateTerms",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "enumOption",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 172,
      "isReExport": false
    },
    {
      "name": "Env",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "eq",
      "type": "function",
      "file": "src/number/Rational.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "Eq",
      "type": "type",
      "file": "src/types/eq.ts",
      "line": 1,
      "isReExport": false
    },
    {
      "name": "eqBy",
      "type": "const",
      "file": "src/types/eq.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "eqDist",
      "type": "function",
      "file": "src/prob/Dist.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "eqFromScheme",
      "type": "function",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "eqJSON",
      "type": "const",
      "file": "src/types/eq.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "eqOf",
      "type": "const",
      "file": "src/cat/set/SetCat.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "eqTerm",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "eqTy",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "equalByGraph",
      "type": "function",
      "file": "src/set/Fn.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "equalRel",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 821,
      "isReExport": false
    },
    {
      "name": "equalSquares",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 183,
      "isReExport": false
    },
    {
      "name": "Equation",
      "type": "type",
      "file": "src/universal/Equation.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "equipmentWitness",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 170,
      "isReExport": true,
      "originalFile": "./allegory-witness.js"
    },
    {
      "name": "Equiv",
      "type": "type",
      "file": "src/algebra/group/EnhancedCongruence.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "EquivalenceWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "EqWit",
      "type": "interface",
      "file": "src/gadt/Reduction.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "Err",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "escape",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 107,
      "isReExport": false
    },
    {
      "name": "estimateMemoryUsage",
      "type": "function",
      "file": "src/bench/rel-benchmark.ts",
      "line": 109,
      "isReExport": false
    },
    {
      "name": "estimateSize",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "eta",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "evalE",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "evalExpr",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1023,
      "isReExport": false
    },
    {
      "name": "evalExprAlg",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 301,
      "isReExport": false
    },
    {
      "name": "evalHom",
      "type": "function",
      "file": "src/structures/ring/Poly.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "evalIso",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "evalPoly",
      "type": "function",
      "file": "src/structures/ring/Poly.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "evalTerm",
      "type": "function",
      "file": "src/universal/Algebra.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "evaluationNaturalTransformation",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 283,
      "isReExport": false
    },
    {
      "name": "everywhereBottomUp",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "exactAtMiddle",
      "type": "function",
      "file": "src/structures/ab/AbCategory.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "exampleArrayShrinking",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 396,
      "isReExport": false
    },
    {
      "name": "exampleDiscreteCodensity",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 174,
      "isReExport": false
    },
    {
      "name": "exampleEndMonad",
      "type": "function",
      "file": "src/types/codensity-of.ts",
      "line": 135,
      "isReExport": false
    },
    {
      "name": "exampleMonadicComposition",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 324,
      "isReExport": false
    },
    {
      "name": "exampleObjectShrinking",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 421,
      "isReExport": false
    },
    {
      "name": "exampleTerminalCodensity",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 229,
      "isReExport": false
    },
    {
      "name": "exhaustive",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "ExistingOptic",
      "type": "interface",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "Exists",
      "type": "type",
      "file": "src/gadt/Reduction.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "existsAlong",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 332,
      "isReExport": false
    },
    {
      "name": "exp_i",
      "type": "const",
      "file": "src/structures/group/Complex.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "explainDiagonal",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 194,
      "isReExport": false
    },
    {
      "name": "Expr",
      "type": "type",
      "file": "src/types/gadt-expr.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "ExprF",
      "type": "type",
      "file": "src/types/optics-rewrite.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "ExprFFunctor",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 286,
      "isReExport": false
    },
    {
      "name": "ExprFFunctorOptics",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 227,
      "isReExport": false
    },
    {
      "name": "ExprFOptics",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 223,
      "isReExport": false
    },
    {
      "name": "Extend",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "extractCounterexamples",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 420,
      "isReExport": false
    },
    {
      "name": "extractLensComponents",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 469,
      "isReExport": false
    },
    {
      "name": "extractMathContext",
      "type": "function",
      "file": "src/types/math-trace-annot.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "extractMathTags",
      "type": "function",
      "file": "src/types/math-trace-annot.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "extractPrismComponents",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 480,
      "isReExport": false
    },
    {
      "name": "f1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "F2",
      "type": "const",
      "file": "src/types/finvect.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "faAp",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "factCPS",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 207,
      "isReExport": false
    },
    {
      "name": "factorThroughQuotient",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 159,
      "isReExport": false
    },
    {
      "name": "factorThroughSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 165,
      "isReExport": false
    },
    {
      "name": "faLift2",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "faLift3",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "faMap",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "faOf",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "field",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 131,
      "isReExport": false
    },
    {
      "name": "fillHorn",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 471,
      "isReExport": false
    },
    {
      "name": "fillInnerHorn2_Nerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 418,
      "isReExport": false
    },
    {
      "name": "filter",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 325,
      "isReExport": false
    },
    {
      "name": "filterTree",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "finalDemo",
      "type": "function",
      "file": "src/examples/final-comprehensive-demo.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "findFirst",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 215,
      "isReExport": false
    },
    {
      "name": "findMorphism",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 307,
      "isReExport": false
    },
    {
      "name": "FingerTree",
      "type": "type",
      "file": "src/types/fingertree.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "Finite",
      "type": "interface",
      "file": "src/types/strong-monad.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "FiniteAbGroup",
      "type": "type",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "FiniteGroup",
      "type": "interface",
      "file": "src/structures/group/Group.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "FiniteMonoid",
      "type": "type",
      "file": "src/algebra/semiringlike/Monoid.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "FiniteNerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 973,
      "isReExport": false
    },
    {
      "name": "FiniteProf",
      "type": "interface",
      "file": "src/types/catkit-adjunction.ts",
      "line": 107,
      "isReExport": false
    },
    {
      "name": "FiniteRing",
      "type": "type",
      "file": "src/structures/ring/Ring.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "FiniteSemigroup",
      "type": "type",
      "file": "src/algebra/semiringlike/Semigroup.ts",
      "line": 1,
      "isReExport": false
    },
    {
      "name": "FiniteSet",
      "type": "type",
      "file": "src/set/Set.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "FiniteSmallCategory",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1146,
      "isReExport": false
    },
    {
      "name": "FiniteSSet",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 950,
      "isReExport": false
    },
    {
      "name": "FiniteSubset",
      "type": "type",
      "file": "src/types/ultrafilter.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "FinVect",
      "type": "type",
      "file": "src/types/finvect.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "firstIsomorphism",
      "type": "function",
      "file": "src/structures/group/theorems/FirstIso.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "firstIsomorphismData",
      "type": "function",
      "file": "src/algebra/group/FirstIso.ts",
      "line": 113,
      "isReExport": false
    },
    {
      "name": "Fix",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 279,
      "isReExport": false
    },
    {
      "name": "Fn",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "FnM",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 768,
      "isReExport": false
    },
    {
      "name": "fold",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "Foldable",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "foldAdd",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 183,
      "isReExport": false
    },
    {
      "name": "foldBFin",
      "type": "const",
      "file": "src/gadt/basic/BFin.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "foldFree",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 222,
      "isReExport": false
    },
    {
      "name": "foldFreeAp",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 260,
      "isReExport": false
    },
    {
      "name": "foldFreeOptics",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 210,
      "isReExport": false
    },
    {
      "name": "foldl",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 330,
      "isReExport": false
    },
    {
      "name": "foldLeft",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "foldMap",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 72,
      "isReExport": false
    },
    {
      "name": "foldMul",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 196,
      "isReExport": false
    },
    {
      "name": "foldr",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 335,
      "isReExport": false
    },
    {
      "name": "foldRight",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "foldRose",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "foldTerm",
      "type": "const",
      "file": "src/gadt/examples/Term.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "foldTree",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "foldVec",
      "type": "const",
      "file": "src/gadt/basic/Vec.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "forallAlong",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 343,
      "isReExport": false
    },
    {
      "name": "Forget",
      "type": "type",
      "file": "src/types/catkit-prisms.ts",
      "line": 44,
      "isReExport": false
    },
    {
      "name": "forgetAdditive",
      "type": "function",
      "file": "src/structures/ring/RingCategory.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "ForgetChoiceFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "ForgetFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "ForgetProfunctor",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "ForgetProfunctorFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "forgetStrong",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 116,
      "isReExport": false
    },
    {
      "name": "ForgetStrongFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "formatBenchmarkResults",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 377,
      "isReExport": false
    },
    {
      "name": "formatEMMonoidLaws",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 302,
      "isReExport": false
    },
    {
      "name": "formatErrorSummary",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 424,
      "isReExport": false
    },
    {
      "name": "formatHomologyResults",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 402,
      "isReExport": false
    },
    {
      "name": "formatMonadLaws",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 293,
      "isReExport": false
    },
    {
      "name": "formatOpticsLaws",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 312,
      "isReExport": false
    },
    {
      "name": "formatRelationalLaws",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 325,
      "isReExport": false
    },
    {
      "name": "formatTiming",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 459,
      "isReExport": false
    },
    {
      "name": "formatWithToggle",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 356,
      "isReExport": false
    },
    {
      "name": "formatWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 438,
      "isReExport": false
    },
    {
      "name": "formatWitnesses",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 484,
      "isReExport": false
    },
    {
      "name": "FormF",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "FoundTag",
      "type": "interface",
      "file": "src/types/math-trace-types.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "Free",
      "type": "type",
      "file": "src/types/optics-rewrite.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "FreeAlgebra",
      "type": "type",
      "file": "src/universal/rewrite/SetMonad.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "FreeAp",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "FreeCoalgebra",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 231,
      "isReExport": false
    },
    {
      "name": "freeEMMonoid",
      "type": "function",
      "file": "src/types/strong-monad.ts",
      "line": 152,
      "isReExport": false
    },
    {
      "name": "freeInducedHom",
      "type": "function",
      "file": "src/universal/FreeAlgebra.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "FreeLegacy",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 276,
      "isReExport": false
    },
    {
      "name": "FreeMonoid",
      "type": "function",
      "file": "src/algebra/semiringlike/free/FreeMonoid.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "FreeOptics",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 200,
      "isReExport": false
    },
    {
      "name": "fromArray",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "fromBigInt",
      "type": "function",
      "file": "src/number/Rational.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "fromChurch",
      "type": "const",
      "file": "src/gadt/Church.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "fromChurchBuilder",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "fromDelimited",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 148,
      "isReExport": false
    },
    {
      "name": "fromHomologyQuiver",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "fromNumber",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "fromOpens",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "fromOption",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "fromProfunctorLens",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 266,
      "isReExport": false
    },
    {
      "name": "fromProfunctorPrism",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 273,
      "isReExport": false
    },
    {
      "name": "fromString",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "fromTrivial",
      "type": "function",
      "file": "src/structures/group/GrpCat.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "fst",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "fstLens",
      "type": "const",
      "file": "src/types/catkit-optics.ts",
      "line": 123,
      "isReExport": false
    },
    {
      "name": "ftSize",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "Fun",
      "type": "type",
      "file": "src/types/rel-equipment.ts",
      "line": 179,
      "isReExport": false
    },
    {
      "name": "FuncCat",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 798,
      "isReExport": false
    },
    {
      "name": "FunctionSpace",
      "type": "type",
      "file": "src/types/ran-set.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "functionStrong",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "FunctionStrongFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "FunctionWanderFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 177,
      "isReExport": false
    },
    {
      "name": "Functor",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "FunctorAlgebra",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "functorById",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 378,
      "isReExport": false
    },
    {
      "name": "FunctorCoalgebra",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "FunctorF",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "FunctorFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "functorToFinSet",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 171,
      "isReExport": false
    },
    {
      "name": "funEqWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 243,
      "isReExport": false
    },
    {
      "name": "FunEqWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "fusion",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "fuzzSpecImplLaws",
      "type": "function",
      "file": "src/examples/spec-impl-fuzz.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "G_inclusion",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "g1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 220,
      "isReExport": false
    },
    {
      "name": "GAlgebra",
      "type": "type",
      "file": "src/gadt/Initial.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "GaloisAdjunctionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "galoisAsAdjunction",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "GaloisConnection",
      "type": "interface",
      "file": "src/types/catkit-posets.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "GaloisConnectionWitness",
      "type": "type",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "GB",
      "type": "type",
      "file": "src/gadt/basic/BFin.Lan.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "GBuilder",
      "type": "type",
      "file": "src/gadt/Initial.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "gbuildFrom",
      "type": "const",
      "file": "src/gadt/Initial.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "GCoalgebra",
      "type": "type",
      "file": "src/gadt/Initial.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "generateAllSubsets",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 408,
      "isReExport": false
    },
    {
      "name": "generateDegeneracies",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 353,
      "isReExport": false
    },
    {
      "name": "generateRandomTerm",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 196,
      "isReExport": false
    },
    {
      "name": "genericRewrite",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 601,
      "isReExport": false
    },
    {
      "name": "getAllMathRecords",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "getAllMorphisms",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 300,
      "isReExport": false
    },
    {
      "name": "getCanonical",
      "type": "function",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "getCategoryStats",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 374,
      "isReExport": false
    },
    {
      "name": "getConfig",
      "type": "function",
      "file": "src/types/config.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "getGlobalRelStrategy",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 204,
      "isReExport": false
    },
    {
      "name": "getHornWitness",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 428,
      "isReExport": false
    },
    {
      "name": "getMathRecord",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "getMor",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 344,
      "isReExport": false
    },
    {
      "name": "getParityConfig",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "getSection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "getSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "gfold",
      "type": "const",
      "file": "src/gadt/Initial.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "gfoldBuild",
      "type": "const",
      "file": "src/gadt/Initial.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "globalIsoRegistry",
      "type": "const",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 100,
      "isReExport": false
    },
    {
      "name": "GmodZ_iso_Inn",
      "type": "function",
      "file": "src/structures/group/theorems/GmodZ_Inn.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "graph",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 181,
      "isReExport": false
    },
    {
      "name": "GroupHom",
      "type": "interface",
      "file": "src/structures/group/Hom.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "GroupHomWitnesses",
      "type": "interface",
      "file": "src/algebra/group/analyzeHom.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "GroupIso",
      "type": "type",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "groupToIsoClass",
      "type": "function",
      "file": "src/algebra/group/iso/GroupToTable.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "groupToTable",
      "type": "function",
      "file": "src/algebra/group/iso/GroupToTable.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "Grp",
      "type": "const",
      "file": "src/structures/group/Grp.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "GV",
      "type": "type",
      "file": "src/gadt/basic/Vec.Lan.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "H01_fromSSet_Z",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 668,
      "isReExport": false
    },
    {
      "name": "h1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 221,
      "isReExport": false
    },
    {
      "name": "H1Presentation",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 493,
      "isReExport": false
    },
    {
      "name": "HAlgebra",
      "type": "type",
      "file": "src/higher/HFix.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "hasFailures",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 427,
      "isReExport": false
    },
    {
      "name": "HasHom",
      "type": "interface",
      "file": "src/types/catkit-kan.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "hasUniqueInnerHorn2_Nerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 430,
      "isReExport": false
    },
    {
      "name": "hcata",
      "type": "const",
      "file": "src/higher/HFix.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "hComp",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "HComp",
      "type": "function",
      "file": "src/category/HComp.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "hcomposeTrans",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1368,
      "isReExport": false
    },
    {
      "name": "head",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 304,
      "isReExport": false
    },
    {
      "name": "HeytingAlgebra",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "HFix",
      "type": "type",
      "file": "src/higher/HFix.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "HFunctor",
      "type": "interface",
      "file": "src/gadt/HFun.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "hfunctorLaws",
      "type": "function",
      "file": "src/category/HFunctor.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Hin",
      "type": "const",
      "file": "src/higher/HFix.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "histo",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "HKT",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "HKT2",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "HKT2Prof",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "HKT3",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "hmapH",
      "type": "function",
      "file": "src/higher/HFix.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "hoareHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 448,
      "isReExport": false
    },
    {
      "name": "hoareWitness",
      "type": "function",
      "file": "src/types/allegory-witness.ts",
      "line": 80,
      "isReExport": false
    },
    {
      "name": "HoareWitness",
      "type": "type",
      "file": "src/types/allegory-witness.ts",
      "line": 72,
      "isReExport": false
    },
    {
      "name": "hom",
      "type": "function",
      "file": "src/structures/group/Hom.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "homAdd",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "homEqByPoints",
      "type": "function",
      "file": "src/structures/group/cat/GroupCat.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "homIsoViaEquivalence",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "homNeg",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "HomologyBuildOptions",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "HomologyEdge",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "homologyFromBoundary",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 309,
      "isReExport": false
    },
    {
      "name": "HomologyObj",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "HomologyPath",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "HomologyQuiver",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "homologyRankFromSNF",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 293,
      "isReExport": false
    },
    {
      "name": "HomologyTwoSimplex",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "Horn2Inner",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 160,
      "isReExport": false
    },
    {
      "name": "Horn2InnerCheck",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 173,
      "isReExport": false
    },
    {
      "name": "Horn2Outer",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 195,
      "isReExport": false
    },
    {
      "name": "Horn2OuterCheck",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 216,
      "isReExport": false
    },
    {
      "name": "Horn3",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 248,
      "isReExport": false
    },
    {
      "name": "Horn3Check",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 282,
      "isReExport": false
    },
    {
      "name": "HornSpec",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 421,
      "isReExport": false
    },
    {
      "name": "Hout",
      "type": "const",
      "file": "src/higher/HFix.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "hylo",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "hyloChurch",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "hyloSum",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "i1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 360,
      "isReExport": false
    },
    {
      "name": "i2",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 365,
      "isReExport": false
    },
    {
      "name": "id",
      "type": "function",
      "file": "src/structures/ring/RingHom.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "Id",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "IdApp",
      "type": "const",
      "file": "src/types/catkit-traversal.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "Ideal",
      "type": "type",
      "file": "src/structures/ring/Ideal.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "idealGeneratedBy",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "identityDoubleFunctor",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 123,
      "isReExport": false
    },
    {
      "name": "identityRanExample",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 359,
      "isReExport": false
    },
    {
      "name": "IdFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "IdFunctor",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "idHom",
      "type": "function",
      "file": "src/structures/group/GrpCat.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "idStoch",
      "type": "function",
      "file": "src/prob/Markov.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "idSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "idx",
      "type": "function",
      "file": "src/util/guards.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "iff",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "image",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 104,
      "isReExport": false
    },
    {
      "name": "imageSubgroup",
      "type": "function",
      "file": "src/algebra/group/Image.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "Impure",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "In",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "inclusion",
      "type": "function",
      "file": "src/top/Embeddings.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "inclusionWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 189,
      "isReExport": false
    },
    {
      "name": "InclusionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "indexOf",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 86,
      "isReExport": false
    },
    {
      "name": "indexScheme",
      "type": "function",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "indiscrete",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "induceBottom",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "InitialAlgebra",
      "type": "interface",
      "file": "src/types/adt-functor.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "initParityChecking",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "injectiveOn",
      "type": "function",
      "file": "src/structures/group/HomHelpers.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "inl",
      "type": "const",
      "file": "src/types/adt-sum-prod.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "Inl",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "inlineLetVar",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 239,
      "isReExport": false
    },
    {
      "name": "innerAutomorphisms",
      "type": "function",
      "file": "src/structures/group/automorphisms/Inner.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "InnerHorn2",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 384,
      "isReExport": false
    },
    {
      "name": "InnerHornN",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 931,
      "isReExport": false
    },
    {
      "name": "innGroup",
      "type": "function",
      "file": "src/structures/group/automorphisms/Inner.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "inr",
      "type": "const",
      "file": "src/types/adt-sum-prod.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "Inr",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "insertAt",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "InstrumentedRel",
      "type": "class",
      "file": "src/types/rel-parity-guards.ts",
      "line": 359,
      "isReExport": false
    },
    {
      "name": "Int",
      "type": "type",
      "file": "src/types/snf-witness.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "inter",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 97,
      "isReExport": false
    },
    {
      "name": "interchangeHolds",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "interpretInSet",
      "type": "function",
      "file": "src/universal/lawvere/SetFunctor.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "intersectionSubgroup",
      "type": "function",
      "file": "src/algebra/group/SubgroupOps.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "intersectionViaAnd",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 321,
      "isReExport": false
    },
    {
      "name": "intersectUltrafilters",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "Invariant",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "invertNatIso",
      "type": "function",
      "file": "src/types/catkit-equivalence.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "invUnimodular",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "IRel",
      "type": "interface",
      "file": "src/types/rel-common.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "isAction",
      "type": "function",
      "file": "src/structures/group/actions/Action.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "Isbell",
      "type": "function",
      "file": "src/types/isbell.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "isBijection",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "isCanonicalType",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 86,
      "isReExport": false
    },
    {
      "name": "isChain",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "isCI",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 482,
      "isReExport": false
    },
    {
      "name": "isCoalgebraHom",
      "type": "function",
      "file": "src/coalgebra/Coalgebra.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "isCompact",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 175,
      "isReExport": false
    },
    {
      "name": "isCongruence",
      "type": "function",
      "file": "src/algebra/group/Congruence.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "isContinuous",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 109,
      "isReExport": false
    },
    {
      "name": "isDiscrete",
      "type": "function",
      "file": "src/types/codensity-set.ts",
      "line": 187,
      "isReExport": false
    },
    {
      "name": "isEmpty",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 300,
      "isReExport": false
    },
    {
      "name": "isEnhancedCongruence",
      "type": "function",
      "file": "src/algebra/group/EnhancedCongruence.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "isFieldComm",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 114,
      "isReExport": false
    },
    {
      "name": "isGalois",
      "type": "function",
      "file": "src/order/Galois.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "isGroup",
      "type": "function",
      "file": "src/algebra/group/Group.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "isHausdorff",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 160,
      "isReExport": false
    },
    {
      "name": "isHom",
      "type": "function",
      "file": "src/structures/group/Isomorphism.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "isIdeal",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "isInl",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "isInnerAutomorphism",
      "type": "function",
      "file": "src/structures/group/automorphisms/Conjugation.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "isInr",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "isIsomorphism",
      "type": "function",
      "file": "src/structures/group/Isomorphism.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "isLatinSquare",
      "type": "function",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "isLeft",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "isMaximalIdealComm",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 138,
      "isReExport": false
    },
    {
      "name": "isMonoidHom",
      "type": "function",
      "file": "src/algebra/semiringlike/Monoid.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "isMonotone",
      "type": "function",
      "file": "src/order/Poset.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "isNone",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "isNormal",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "isNormalSubgroup",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "iso",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "Iso",
      "type": "interface",
      "file": "src/types/catkit-equivalence.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "isoClass",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "IsoClass",
      "type": "class",
      "file": "src/algebra/group/iso/IsoClass.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "IsoClassRegistry",
      "type": "class",
      "file": "src/algebra/group/iso/EnhancedIsoClass.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "isoComp",
      "type": "function",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "isoEqByPoints",
      "type": "function",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "isoFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 87,
      "isReExport": false
    },
    {
      "name": "isOfType",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 180,
      "isReExport": false
    },
    {
      "name": "isoId",
      "type": "function",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "isoInverse",
      "type": "function",
      "file": "src/structures/group/iso/GroupIso.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "isoLaws",
      "type": "function",
      "file": "src/laws/Witness.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "IsoOps",
      "type": "const",
      "file": "src/structures/group/iso/IsoOps.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "isPoset",
      "type": "function",
      "file": "src/order/Poset.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "isPrimeIdealComm",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "isPrincipalWith",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 226,
      "isReExport": false
    },
    {
      "name": "isQuasiCategory",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 305,
      "isReExport": false
    },
    {
      "name": "isRight",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "isRingHom",
      "type": "function",
      "file": "src/structures/ring/RingHom.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "isRowStochastic",
      "type": "function",
      "file": "src/prob/Markov.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "isS",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "isSameTableUpToRename",
      "type": "function",
      "file": "src/algebra/group/Cayley.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "isScottContinuous",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "isSome",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "isSquareCommutative",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 157,
      "isReExport": false
    },
    {
      "name": "isSubgroup",
      "type": "function",
      "file": "src/structures/group/Subgroup.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "isSubset",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 109,
      "isReExport": false
    },
    {
      "name": "isSurjection",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 205,
      "isReExport": false
    },
    {
      "name": "isSurjectionSplit",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 131,
      "isReExport": false
    },
    {
      "name": "isT0",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 130,
      "isReExport": false
    },
    {
      "name": "isUAHom",
      "type": "function",
      "file": "src/universal/Hom.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "isZ",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "join",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 280,
      "isReExport": false
    },
    {
      "name": "JoinSemilattice",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "KanExtensionProblem",
      "type": "interface",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "kcomp",
      "type": "function",
      "file": "src/prob/Kleisli.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "ker",
      "type": "function",
      "file": "src/structures/ab/builders/KernelsCokernels.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "kernel",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "Kernel",
      "type": "type",
      "file": "src/prob/Kleisli.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "kernelNormalSubgroup",
      "type": "function",
      "file": "src/algebra/group/Kernel.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "kernelOnY",
      "type": "function",
      "file": "src/order/Galois.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "kernelsEq",
      "type": "function",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "kernelToMatrix",
      "type": "function",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "key",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 16,
      "isReExport": true,
      "originalFile": "./Rules"
    },
    {
      "name": "kid",
      "type": "function",
      "file": "src/prob/Kleisli.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "Kind",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "Kind2",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "Kind2Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "Kind3",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Kind3Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "KindFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "KindProf",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "KleinFour",
      "type": "const",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "KleisliFromTheory",
      "type": "function",
      "file": "src/universal/monad/Kleisli.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "KleisliHom",
      "type": "type",
      "file": "src/universal/monad/Diagram.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "kmap",
      "type": "function",
      "file": "src/prob/Kleisli.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "Lan",
      "type": "type",
      "file": "src/category/Lan.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Lan1",
      "type": "type",
      "file": "src/category/Lan.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "lanHFunctor",
      "type": "function",
      "file": "src/category/HFunctor.Lan.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "LanIdId",
      "type": "type",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "lanIdIdImpl",
      "type": "const",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "LanIdMaybe",
      "type": "type",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "lanIdMaybeImpl",
      "type": "const",
      "file": "src/category/examples/LanGadtBridge.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "last",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 309,
      "isReExport": false
    },
    {
      "name": "lastIndexOf",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "Lattice",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "latticeFromPoset",
      "type": "function",
      "file": "src/order/dsl.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "Law",
      "type": "type",
      "file": "src/laws/Witness.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "LAW_TAG",
      "type": "const",
      "file": "src/types/math-trace-annot.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "lawCheck",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 371,
      "isReExport": false
    },
    {
      "name": "LawCheck",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "lawCheckSuccess",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 382,
      "isReExport": false
    },
    {
      "name": "lawCheckWithShrinking",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 387,
      "isReExport": false
    },
    {
      "name": "lawcheckWitnessDemo",
      "type": "function",
      "file": "src/examples/lawcheck-witness-demo.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Lawful",
      "type": "type",
      "file": "src/laws/Witness.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "lawfulCodensityIso",
      "type": "function",
      "file": "src/laws/examples/CodensityNat.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "lawfulDistNumber",
      "type": "function",
      "file": "src/laws/Prob.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "lawfulKernelMatrixIso",
      "type": "function",
      "file": "src/laws/ProbMatrixKernelIso.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "lawfulKleisliCategory",
      "type": "function",
      "file": "src/laws/ProbKleisli.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "lawfulMonoid",
      "type": "function",
      "file": "src/laws/Monoid.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "lawfulTopContinuity",
      "type": "function",
      "file": "src/laws/TopContinuity.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "lawfulTopProductUP",
      "type": "function",
      "file": "src/laws/TopProductUP.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "LawsExamples",
      "type": "const",
      "file": "src/laws/examples.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "Lawvere",
      "type": "type",
      "file": "src/universal/lawvere/Lawvere.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "LaxDoubleFunctor",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "Leaf",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "LeafF",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "Left",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "LeftComodule",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 104,
      "isReExport": false
    },
    {
      "name": "leftCoset",
      "type": "function",
      "file": "src/algebra/group/Quotient.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "leftCosets",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "leftEither",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 158,
      "isReExport": false
    },
    {
      "name": "leftFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "LeftKan_Set",
      "type": "re-export",
      "file": "src/types/kan-index.ts",
      "line": 12,
      "isReExport": true,
      "originalFile": "./catkit-kan.js"
    },
    {
      "name": "leftKanCommaCategory",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "LeftModule",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "leftPrism",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 167,
      "isReExport": false
    },
    {
      "name": "leftRegular",
      "type": "function",
      "file": "src/structures/group/actions/Action.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "leftResidual",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 280,
      "isReExport": false
    },
    {
      "name": "leftWhisker",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1310,
      "isReExport": false
    },
    {
      "name": "length",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "lengthMeasure",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 286,
      "isReExport": false
    },
    {
      "name": "lengthPara",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "lens",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 177,
      "isReExport": false
    },
    {
      "name": "Lens",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "lensFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "LensLawReport",
      "type": "type",
      "file": "src/types/catkit-optics.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "LensWitness",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "let_",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "lfp",
      "type": "function",
      "file": "src/order/Lattice.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "lfpFixedPointLaw",
      "type": "function",
      "file": "src/laws/Order.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "lfpOmega",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "liftAp",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "liftCoy",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 270,
      "isReExport": false
    },
    {
      "name": "liftF",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 246,
      "isReExport": false
    },
    {
      "name": "liftFOptics",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 206,
      "isReExport": false
    },
    {
      "name": "liftToMonoidHom",
      "type": "function",
      "file": "src/algebra/semiringlike/free/FreeMonoid.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "LimitAtCState",
      "type": "type",
      "file": "src/types/pointwise-limit-util.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "limitFinSet",
      "type": "function",
      "file": "src/types/finset-limits.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "LimitProblem",
      "type": "interface",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 87,
      "isReExport": false
    },
    {
      "name": "linearMap",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "lines",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "List",
      "type": "type",
      "file": "src/types/adt-list.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "listCanonical",
      "type": "function",
      "file": "src/algebra/group/CanonicalGroups.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "ListF",
      "type": "type",
      "file": "src/types/adt-list.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "lit",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "loadRegistry",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "lowerCoy",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 272,
      "isReExport": false
    },
    {
      "name": "M2",
      "type": "type",
      "file": "src/structures/ring/Ring.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "M2ZnRing",
      "type": "function",
      "file": "src/structures/ring/Ring.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "make",
      "type": "function",
      "file": "src/number/Rational.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "makeCommutingSquaresDouble",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 559,
      "isReExport": false
    },
    {
      "name": "makeFreeCategory",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "makeIdentityMorphism",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 535,
      "isReExport": false
    },
    {
      "name": "makeInnerHorn2",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 391,
      "isReExport": false
    },
    {
      "name": "makeInnerHornN",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 937,
      "isReExport": false
    },
    {
      "name": "makeKleisliDiagramTools",
      "type": "function",
      "file": "src/universal/monad/Diagram.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "makeRel",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 149,
      "isReExport": false
    },
    {
      "name": "makeRelationsDouble",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 865,
      "isReExport": false
    },
    {
      "name": "makeRelFactory",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "makeRelId",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 158,
      "isReExport": false
    },
    {
      "name": "makeSchema",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 524,
      "isReExport": false
    },
    {
      "name": "makeSchemes",
      "type": "function",
      "file": "src/types/adt-rec-schemes.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "makeSSet",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "makeSubgroup",
      "type": "function",
      "file": "src/algebra/group/SubgroupOps.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "map",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "mapChildren",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 72,
      "isReExport": false
    },
    {
      "name": "mapChildrenWithWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 431,
      "isReExport": false
    },
    {
      "name": "mapEither",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "mapF",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "mapFunctionSpace",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "mapNerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "mapOption",
      "type": "function",
      "file": "src/types/adt-sum-prod.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "mapRose",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "mapsEqual",
      "type": "function",
      "file": "src/top/Embeddings.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "mapTree",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 44,
      "isReExport": false
    },
    {
      "name": "mapWriter",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 366,
      "isReExport": false
    },
    {
      "name": "Mat",
      "type": "type",
      "file": "src/types/snf-witness.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "match",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "matchPartial",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "matchWith",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "mateLeftToRight",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 146,
      "isReExport": false
    },
    {
      "name": "mateRightToLeft",
      "type": "function",
      "file": "src/types/catkit-adjunction.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "MATH_TAG",
      "type": "const",
      "file": "src/types/math-trace-annot.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "MathRecord",
      "type": "interface",
      "file": "src/types/math-trace-types.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "matMul",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "matricesEqual",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "Matrix",
      "type": "type",
      "file": "src/types/snf-surface-api.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "matrixMultiply",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "matrixShape",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "matrixToKernel",
      "type": "function",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "matrixZeros",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "maximals",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 259,
      "isReExport": false
    },
    {
      "name": "MaxMonoid",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 275,
      "isReExport": false
    },
    {
      "name": "measured",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "Measured",
      "type": "type",
      "file": "src/types/measured-fingertree.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "MeasuredFingerTree",
      "type": "type",
      "file": "src/types/measured-fingertree.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "meet",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 266,
      "isReExport": false
    },
    {
      "name": "MeetSemilattice",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "member",
      "type": "function",
      "file": "src/set/Set.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "mergeSchemas",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 313,
      "isReExport": false
    },
    {
      "name": "MigrationStep",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 382,
      "isReExport": false
    },
    {
      "name": "MiniFinSet",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 156,
      "isReExport": false
    },
    {
      "name": "minimals",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 252,
      "isReExport": false
    },
    {
      "name": "minimizeWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "MinMonoid",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 280,
      "isReExport": false
    },
    {
      "name": "missingInnerHorns2",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 695,
      "isReExport": false
    },
    {
      "name": "mkCodensityMonad",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "mkFiniteGroup",
      "type": "function",
      "file": "src/algebra/group/FiniteGroups.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "mkFiniteSet",
      "type": "function",
      "file": "src/set/Set.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "mkSquare",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "mkSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "mkUltrafilterMonad",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "modHom",
      "type": "function",
      "file": "src/algebra/group/examples/cyclic.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "ModLike",
      "type": "type",
      "file": "src/types/optics-rewrite.ts",
      "line": 150,
      "isReExport": false
    },
    {
      "name": "modularLawWitness",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 170,
      "isReExport": true,
      "originalFile": "./allegory-witness.js"
    },
    {
      "name": "Monad",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "MonadAssociativityWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "MonadError",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "MonadLawWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "MonadLeftUnitWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 86,
      "isReExport": false
    },
    {
      "name": "MonadReader",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "MonadRightUnitWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "MonadState",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 86,
      "isReExport": false
    },
    {
      "name": "MonadThrow",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "MonadWriter",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "Mono",
      "type": "type",
      "file": "src/order/Domain.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "Monoid",
      "type": "type",
      "file": "src/types/measured-fingertree.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "MonoidArray",
      "type": "const",
      "file": "src/types/catkit-traversal.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "MonoidFirstFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 132,
      "isReExport": false
    },
    {
      "name": "MonoidFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "MonoidHom",
      "type": "type",
      "file": "src/algebra/semiringlike/Monoid.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "monoidLaws",
      "type": "function",
      "file": "src/laws/Monoid.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "monoidNormalForm",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 26,
      "isReExport": true,
      "originalFile": "./Oriented"
    },
    {
      "name": "MonoidSig",
      "type": "const",
      "file": "src/universal/examples/MonoidSig.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "MonoidSum",
      "type": "const",
      "file": "src/types/catkit-traversal.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "Monotone",
      "type": "type",
      "file": "src/order/Poset.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "monotoneAsFunctor",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "Moore",
      "type": "type",
      "file": "src/coalgebra/Coalgebra.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "Mor",
      "type": "type",
      "file": "src/types/mini-finset.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "mu",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "mul",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "Mul",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "MulF",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "mulOne",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 210,
      "isReExport": false
    },
    {
      "name": "multiplicationTable",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "multiPointEvaluation",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 410,
      "isReExport": false
    },
    {
      "name": "must",
      "type": "function",
      "file": "src/util/guards.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "mvalue",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "N_free",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 224,
      "isReExport": false
    },
    {
      "name": "nand2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 225,
      "isReExport": false
    },
    {
      "name": "Nat",
      "type": "interface",
      "file": "src/types/catkit-equivalence.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "Nat1",
      "type": "type",
      "file": "src/category/Nat.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "NatCo",
      "type": "interface",
      "file": "src/types/copresheaf.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "natEq",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "natFormToDoc",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 168,
      "isReExport": false
    },
    {
      "name": "natFormToReaderValidation",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 144,
      "isReExport": false
    },
    {
      "name": "NatIso",
      "type": "interface",
      "file": "src/types/catkit-equivalence.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "NatPsh",
      "type": "interface",
      "file": "src/types/presheaf.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "natToEnd",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 156,
      "isReExport": false
    },
    {
      "name": "natToUltrafilter",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "NatTrans",
      "type": "interface",
      "file": "src/types/codensity-nat-bridge.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "naturalityLaws",
      "type": "function",
      "file": "src/laws/Natural.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "naturalityWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 324,
      "isReExport": false
    },
    {
      "name": "NaturalityWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "nCube",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 284,
      "isReExport": false
    },
    {
      "name": "neg",
      "type": "function",
      "file": "src/number/Rational.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "Neg",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "NegF",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "neighborhoods",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "Nerve",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 126,
      "isReExport": false
    },
    {
      "name": "nerveOfPoset",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 565,
      "isReExport": false
    },
    {
      "name": "nerveToSSetUpTo3",
      "type": "function",
      "file": "src/types/nerve-quasicat-bridge.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "Nil",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "NilF",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "Node",
      "type": "type",
      "file": "src/types/fingertree.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "node2",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "node3",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "nodeSize",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "nodeToArray",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "None",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "noneFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "normalize",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 16,
      "isReExport": true,
      "originalFile": "./Rules"
    },
    {
      "name": "normalizeHead",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 16,
      "isReExport": true,
      "originalFile": "./Rules"
    },
    {
      "name": "normalizeRecursive",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 16,
      "isReExport": true,
      "originalFile": "./Rules"
    },
    {
      "name": "NormalSubgroup",
      "type": "interface",
      "file": "src/algebra/group/NormalSubgroup.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "not2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 231,
      "isReExport": false
    },
    {
      "name": "NSimplex",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "num",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "Num",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "numberStringPrism",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 176,
      "isReExport": false
    },
    {
      "name": "numericRangeAbstraction",
      "type": "function",
      "file": "src/types/spec-impl.ts",
      "line": 185,
      "isReExport": false
    },
    {
      "name": "numericRangeAbstraction exported from spec-impl.js",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 151,
      "isReExport": true,
      "originalFile": "./spec-impl-refactored.js"
    },
    {
      "name": "NumF",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "NumT",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "Obj",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "objectwisePshDiagram",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 187,
      "isReExport": false
    },
    {
      "name": "ObjPair",
      "type": "type",
      "file": "src/types/spec-impl.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "of",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "Ok",
      "type": "const",
      "file": "src/types/freeapp-coyo.ts",
      "line": 88,
      "isReExport": false
    },
    {
      "name": "one",
      "type": "const",
      "file": "src/number/Rational.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "ONE_CATEGORY",
      "type": "const",
      "file": "src/types/catkit-comma-categories.ts",
      "line": 151,
      "isReExport": false
    },
    {
      "name": "OperationResult",
      "type": "interface",
      "file": "src/bench/rel-benchmark.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "opOf",
      "type": "function",
      "file": "src/universal/Signature.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "OpSym",
      "type": "type",
      "file": "src/universal/Signature.ts",
      "line": 1,
      "isReExport": false
    },
    {
      "name": "OpticsBridge",
      "type": "interface",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 380,
      "isReExport": false
    },
    {
      "name": "opticsLawcheckDemo",
      "type": "function",
      "file": "src/examples/optics-lawcheck-demo.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "optimize",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "optimizeExpr",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "Option",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "optionalField",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 205,
      "isReExport": false
    },
    {
      "name": "OptionFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 128,
      "isReExport": false
    },
    {
      "name": "optionMaxEMMonoid",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 556,
      "isReExport": false
    },
    {
      "name": "optionStringEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "optionSumEMMonoid",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 544,
      "isReExport": false
    },
    {
      "name": "optionTraversal",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 145,
      "isReExport": false
    },
    {
      "name": "or2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 213,
      "isReExport": false
    },
    {
      "name": "Ord",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "orderSpectrum",
      "type": "function",
      "file": "src/algebra/group/iso/IsoClass.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "Out",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "over",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "overFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 117,
      "isReExport": false
    },
    {
      "name": "overO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "P2Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "pack",
      "type": "const",
      "file": "src/gadt/Reduction.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "pair",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "Pair",
      "type": "type",
      "file": "src/types/rel-equipment.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "PairClass",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1161,
      "isReExport": false
    },
    {
      "name": "pairHom",
      "type": "function",
      "file": "src/structures/ring/RingCategory.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "PairingScheme",
      "type": "interface",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "pairIntoProduct",
      "type": "function",
      "file": "src/structures/group/builders/Product.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "PairT",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "pairTo2x2",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 257,
      "isReExport": false
    },
    {
      "name": "para",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "parallelPair",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 266,
      "isReExport": false
    },
    {
      "name": "parityHom",
      "type": "function",
      "file": "src/structures/group/homs/Examples24.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "ParityMismatchWitness",
      "type": "interface",
      "file": "src/types/rel-parity-guards.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "Path",
      "type": "type",
      "file": "src/types/optics-rewrite.ts",
      "line": 352,
      "isReExport": false
    },
    {
      "name": "PathMor",
      "type": "type",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "pathToString",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 382,
      "isReExport": false
    },
    {
      "name": "PERFORMANCE_MODE",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "PerformanceMode",
      "type": "type",
      "file": "src/types/config.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "pi1",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 196,
      "isReExport": false
    },
    {
      "name": "pi2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 201,
      "isReExport": false
    },
    {
      "name": "PIso",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 59,
      "isReExport": false
    },
    {
      "name": "PIsoFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "placeholder",
      "type": "const",
      "file": "src/types/instances.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "PLens",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "PLensFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "Plus",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 59,
      "isReExport": false
    },
    {
      "name": "PO_Q",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 371,
      "isReExport": false
    },
    {
      "name": "Poly",
      "type": "type",
      "file": "src/structures/ring/Poly.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "PolyRing",
      "type": "function",
      "file": "src/structures/ring/Poly.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "popL",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 103,
      "isReExport": false
    },
    {
      "name": "popR",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "POptic",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "Poset",
      "type": "interface",
      "file": "src/types/catkit-posets.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "posetEqFromLeq",
      "type": "function",
      "file": "src/order/Poset.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "posetFromPairs",
      "type": "function",
      "file": "src/order/dsl.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "posetLaws",
      "type": "function",
      "file": "src/laws/Order.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "powerFunctor",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "powersetCPO",
      "type": "function",
      "file": "src/order/Domain.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "powersetLattice",
      "type": "function",
      "file": "src/order/Lattice.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "powersetPoset",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 211,
      "isReExport": false
    },
    {
      "name": "PPrism",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "PPrismFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 84,
      "isReExport": false
    },
    {
      "name": "pr1",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 467,
      "isReExport": false
    },
    {
      "name": "pr2",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 472,
      "isReExport": false
    },
    {
      "name": "precomposeFunctionSpace",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "precomposeSetFunctor",
      "type": "function",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "pred",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "preimage",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "preImage",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 257,
      "isReExport": false
    },
    {
      "name": "preimageSub",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 338,
      "isReExport": false
    },
    {
      "name": "Presheaf",
      "type": "interface",
      "file": "src/types/presheaf.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "prettyChain",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 618,
      "isReExport": false
    },
    {
      "name": "prettyComparison",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 538,
      "isReExport": false
    },
    {
      "name": "prettyLog",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 513,
      "isReExport": false
    },
    {
      "name": "preview",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 95,
      "isReExport": false
    },
    {
      "name": "previewFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 137,
      "isReExport": false
    },
    {
      "name": "previewO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 194,
      "isReExport": false
    },
    {
      "name": "Prime",
      "type": "type",
      "file": "src/structures/ring/Spec.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "primePowerFactorization",
      "type": "function",
      "file": "src/structures/ring/CRT.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "principal",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "principalFromCodensity",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 241,
      "isReExport": false
    },
    {
      "name": "principalUltrafilter",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "printAudit",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 512,
      "isReExport": false
    },
    {
      "name": "printDiagonalExplanation",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 273,
      "isReExport": false
    },
    {
      "name": "printExpr",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1032,
      "isReExport": false
    },
    {
      "name": "printExprAlg",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 308,
      "isReExport": false
    },
    {
      "name": "printLawCheck",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 231,
      "isReExport": false
    },
    {
      "name": "printLawCheckGroup",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 252,
      "isReExport": false
    },
    {
      "name": "printLawCheckReport",
      "type": "function",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 441,
      "isReExport": false
    },
    {
      "name": "printLawCheckResults",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 496,
      "isReExport": false
    },
    {
      "name": "printLawCheckSummary",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 270,
      "isReExport": false
    },
    {
      "name": "printMissingHorns2",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 614,
      "isReExport": false
    },
    {
      "name": "printMorphism",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 507,
      "isReExport": false
    },
    {
      "name": "printProgress",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 465,
      "isReExport": false
    },
    {
      "name": "printQCReport",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 602,
      "isReExport": false
    },
    {
      "name": "printQuiver",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 501,
      "isReExport": false
    },
    {
      "name": "printRel",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 466,
      "isReExport": false
    },
    {
      "name": "printSNFVerification",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 255,
      "isReExport": false
    },
    {
      "name": "printSquare",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 278,
      "isReExport": false
    },
    {
      "name": "printSubset",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 471,
      "isReExport": false
    },
    {
      "name": "printTestSummary",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 517,
      "isReExport": false
    },
    {
      "name": "prism",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 80,
      "isReExport": false
    },
    {
      "name": "Prism",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "prismFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 105,
      "isReExport": false
    },
    {
      "name": "PrismLawReport",
      "type": "type",
      "file": "src/types/catkit-prisms.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "PrismWitness",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 106,
      "isReExport": false
    },
    {
      "name": "Prob",
      "type": "type",
      "file": "src/prob/Dist.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "probeCodense",
      "type": "function",
      "file": "src/types/codense-probe.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "probeCodensity",
      "type": "function",
      "file": "src/types/codensity-probe.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "product",
      "type": "function",
      "file": "src/top/Topology.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "Product",
      "type": "function",
      "file": "src/algebra/group/Group.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "productCarrier",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 303,
      "isReExport": false
    },
    {
      "name": "productEM",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "productGroup",
      "type": "function",
      "file": "src/structures/group/builders/Product.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "productGroupTuples",
      "type": "function",
      "file": "src/structures/group/builders/Product.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "productLift",
      "type": "function",
      "file": "src/structures/ab/AbCategory.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "ProductMonoid",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 270,
      "isReExport": false
    },
    {
      "name": "productPoset",
      "type": "function",
      "file": "src/order/Poset.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "productRing",
      "type": "function",
      "file": "src/structures/ring/RingCategory.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "productSet",
      "type": "function",
      "file": "src/algebra/group/SubgroupOps.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "productTopology",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 382,
      "isReExport": false
    },
    {
      "name": "Prof",
      "type": "interface",
      "file": "src/types/catkit-adjunction.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "ProfDict",
      "type": "interface",
      "file": "src/types/catkit-prisms.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "Profunctor",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "Profunctor2",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "ProfunctorFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "ProfunctorLens",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 170,
      "isReExport": false
    },
    {
      "name": "ProfunctorPrism",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 176,
      "isReExport": false
    },
    {
      "name": "ProfunctorTraversal",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "proj1",
      "type": "function",
      "file": "src/top/ProductUP.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "proj2",
      "type": "function",
      "file": "src/top/ProductUP.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "projections",
      "type": "function",
      "file": "src/structures/ring/RingCategory.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "projectionToQuotient",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 149,
      "isReExport": false
    },
    {
      "name": "projToQuotient",
      "type": "function",
      "file": "src/structures/group/Quotient.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "prompt",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "propLens",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "ProTrans",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1101,
      "isReExport": false
    },
    {
      "name": "pshCoequalizer",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "pshColimitGeneral",
      "type": "function",
      "file": "src/types/presheaf-colimits-general.ts",
      "line": 56,
      "isReExport": false
    },
    {
      "name": "pshCoproduct",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "pshLimitGeneral",
      "type": "function",
      "file": "src/types/presheaf-limits-general.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "pshPullbackGeneral",
      "type": "function",
      "file": "src/types/presheaf-limits-general.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "pshPushout",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 67,
      "isReExport": false
    },
    {
      "name": "pshPushoutGeneral",
      "type": "function",
      "file": "src/types/presheaf-pushout-general.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "PTraversal",
      "type": "type",
      "file": "src/types/advanced.ts",
      "line": 199,
      "isReExport": false
    },
    {
      "name": "PTraversalFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 189,
      "isReExport": false
    },
    {
      "name": "pullbackViaSlice",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "pure",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "Pure",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "pureOptics",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 204,
      "isReExport": false
    },
    {
      "name": "push",
      "type": "function",
      "file": "src/prob/Markov.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "pushforwardUltrafilter",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "pushL",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "pushout",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "pushoutQuiver",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 302,
      "isReExport": false
    },
    {
      "name": "PushoutResult",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "pushPrompt",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 117,
      "isReExport": false
    },
    {
      "name": "pushR",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "PVal",
      "type": "type",
      "file": "src/types/catkit-prisms.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "Q_ABC",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 215,
      "isReExport": false
    },
    {
      "name": "Q0",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 358,
      "isReExport": false
    },
    {
      "name": "Q1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 356,
      "isReExport": false
    },
    {
      "name": "Q2",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 357,
      "isReExport": false
    },
    {
      "name": "QCReport",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 297,
      "isReExport": false
    },
    {
      "name": "Qplus",
      "type": "const",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "QuasiCategory",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 441,
      "isReExport": false
    },
    {
      "name": "Quiver",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "QuiverMorphism",
      "type": "interface",
      "file": "src/types/quiver-pushout.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "quotient",
      "type": "function",
      "file": "src/set/Quotient.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "Quotient",
      "type": "interface",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "quotientAlgebra",
      "type": "function",
      "file": "src/universal/Congruence.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "quotientGroup",
      "type": "function",
      "file": "src/structures/group/builders/Quotient.ts",
      "line": 59,
      "isReExport": false
    },
    {
      "name": "QuotientGroup",
      "type": "function",
      "file": "src/algebra/group/QuotientGroup.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "quotientRing",
      "type": "function",
      "file": "src/structures/ring/Ideal.ts",
      "line": 51,
      "isReExport": false
    },
    {
      "name": "quotientSurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 95,
      "isReExport": false
    },
    {
      "name": "R_to_Cstar_expix",
      "type": "function",
      "file": "src/structures/group/homs/Examples24.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "randomBitRel",
      "type": "function",
      "file": "src/types/bitrel.ts",
      "line": 319,
      "isReExport": false
    },
    {
      "name": "range",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 273,
      "isReExport": false
    },
    {
      "name": "RanSet",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 232,
      "isReExport": false
    },
    {
      "name": "RanSetDirect",
      "type": "function",
      "file": "src/types/ran-set.ts",
      "line": 264,
      "isReExport": false
    },
    {
      "name": "Rational",
      "type": "type",
      "file": "src/number/Rational.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "Reader",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 72,
      "isReExport": false
    },
    {
      "name": "ReaderLens",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 176,
      "isReExport": false
    },
    {
      "name": "readerOps",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 113,
      "isReExport": false
    },
    {
      "name": "rectangle",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 325,
      "isReExport": false
    },
    {
      "name": "refines",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 180,
      "isReExport": false
    },
    {
      "name": "refl",
      "type": "const",
      "file": "src/gadt/Reduction.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "registerLawful",
      "type": "function",
      "file": "src/laws/registry.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "regularFunction",
      "type": "const",
      "file": "src/laws/examples/ESLintDemo.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "Rel",
      "type": "class",
      "file": "src/types/rel-equipment.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "REL_IMPL",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "relabel",
      "type": "function",
      "file": "src/algebra/group/iso/CanonicalTable.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "RelationalLawResults",
      "type": "type",
      "file": "src/types/rel-lawcheck.ts",
      "line": 50,
      "isReExport": false
    },
    {
      "name": "RelationGenerator",
      "type": "class",
      "file": "src/bench/rel-benchmark.ts",
      "line": 61,
      "isReExport": false
    },
    {
      "name": "RelBenchmark",
      "type": "class",
      "file": "src/bench/rel-benchmark.ts",
      "line": 175,
      "isReExport": false
    },
    {
      "name": "RelCat",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 776,
      "isReExport": false
    },
    {
      "name": "relEqual",
      "type": "function",
      "file": "src/types/allegory-witness.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "relEqWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 207,
      "isReExport": false
    },
    {
      "name": "RelEqWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "RelFactory",
      "type": "interface",
      "file": "src/types/rel-common.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "RelImpl",
      "type": "type",
      "file": "src/types/config.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "RelOrder",
      "type": "const",
      "file": "src/types/rel-equipment.ts",
      "line": 236,
      "isReExport": false
    },
    {
      "name": "relsEqualByInclusions",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1071,
      "isReExport": false
    },
    {
      "name": "RelStrategy",
      "type": "type",
      "file": "src/types/rel-common.ts",
      "line": 99,
      "isReExport": false
    },
    {
      "name": "renameVertices",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 290,
      "isReExport": false
    },
    {
      "name": "RenamingDoubleFunctor",
      "type": "class",
      "file": "src/types/double-functor.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "replaceAt",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 79,
      "isReExport": false
    },
    {
      "name": "Representable",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "req",
      "type": "const",
      "file": "src/algebra/ring/Ring.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "reset",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "resetDisplayConfig",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 498,
      "isReExport": false
    },
    {
      "name": "ResidualAdjunctionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 141,
      "isReExport": false
    },
    {
      "name": "reverse",
      "type": "function",
      "file": "src/types/fingertree.ts",
      "line": 314,
      "isReExport": false
    },
    {
      "name": "review",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 103,
      "isReExport": false
    },
    {
      "name": "rewrite",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 152,
      "isReExport": false
    },
    {
      "name": "RewritePrism",
      "type": "interface",
      "file": "src/types/optics-rewrite.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "RewriteRule",
      "type": "type",
      "file": "src/universal/rewrite/Rules.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "rewriteW",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 473,
      "isReExport": false
    },
    {
      "name": "rewriteWDetailed",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 501,
      "isReExport": false
    },
    {
      "name": "rewriteWithExistingOptic",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "Right",
      "type": "const",
      "file": "src/types/catkit-prisms.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "rightFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "RightKan_Set",
      "type": "re-export",
      "file": "src/types/kan-index.ts",
      "line": 12,
      "isReExport": true,
      "originalFile": "./catkit-kan.js"
    },
    {
      "name": "rightKanCommaCategory",
      "type": "function",
      "file": "src/types/catkit-comma-kan-bridge.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "rightPrism",
      "type": "function",
      "file": "src/types/catkit-prisms.ts",
      "line": 158,
      "isReExport": false
    },
    {
      "name": "rightResidual",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 298,
      "isReExport": false
    },
    {
      "name": "rightWhisker",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1338,
      "isReExport": false
    },
    {
      "name": "Ring",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "RingEq",
      "type": "type",
      "file": "src/structures/ring/Ring.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "ringHom",
      "type": "function",
      "file": "src/algebra/ring/Hom.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "RingHom",
      "type": "type",
      "file": "src/structures/ring/RingHom.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "RingWitnesses",
      "type": "interface",
      "file": "src/algebra/ring/Hom.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "Rope",
      "type": "type",
      "file": "src/types/rope.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "Rose",
      "type": "type",
      "file": "src/types/adt-rose.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "RoseF",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "roseHeight",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "roseLeaves",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 52,
      "isReExport": false
    },
    {
      "name": "roseSize",
      "type": "const",
      "file": "src/types/adt-rose.ts",
      "line": 46,
      "isReExport": false
    },
    {
      "name": "RProd",
      "type": "function",
      "file": "src/algebra/ring/Ring.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "rule",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 16,
      "isReExport": true,
      "originalFile": "./Rules"
    },
    {
      "name": "Rule",
      "type": "type",
      "file": "src/types/optics-rewrite.ts",
      "line": 157,
      "isReExport": false
    },
    {
      "name": "ruleFromExistingOptic",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "RuleRegistry",
      "type": "class",
      "file": "src/types/optics-rewrite.ts",
      "line": 307,
      "isReExport": false
    },
    {
      "name": "run",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "runAll",
      "type": "function",
      "file": "src/laws/registry.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "runAllExamples",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "runAllTests",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 429,
      "isReExport": false
    },
    {
      "name": "runComprehensiveLawChecks",
      "type": "function",
      "file": "src/types/rel-lawcheck-witnessed.ts",
      "line": 355,
      "isReExport": false
    },
    {
      "name": "runDelimited",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 153,
      "isReExport": false
    },
    {
      "name": "runEMMonoidDemo",
      "type": "function",
      "file": "src/examples/em-monoid-demo.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "runInterpreter",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 237,
      "isReExport": false
    },
    {
      "name": "runLaws",
      "type": "function",
      "file": "src/laws/Witness.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "runParityTests",
      "type": "function",
      "file": "src/types/rel-parity-guards.ts",
      "line": 456,
      "isReExport": false
    },
    {
      "name": "runQuickstartExamples",
      "type": "function",
      "file": "src/examples/quickstart-examples.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "S",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "s1",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 235,
      "isReExport": false
    },
    {
      "name": "safeDiv",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 172,
      "isReExport": false
    },
    {
      "name": "safeGetter",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 60,
      "isReExport": false
    },
    {
      "name": "SafeGetter",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "safeLens",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "SafeLens",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "safePrism",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 73,
      "isReExport": false
    },
    {
      "name": "SafePrism",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "safeTraversal",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "SafeTraversal",
      "type": "type",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "sameCoset",
      "type": "function",
      "file": "src/algebra/group/Quotient.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "sameIsoClass",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "Samples",
      "type": "const",
      "file": "src/prob/MarkovKernelIso.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "satisfies",
      "type": "function",
      "file": "src/universal/Equation.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "searchFillInnerHorn",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 955,
      "isReExport": false
    },
    {
      "name": "searchMathRecords",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "secondIsomorphism",
      "type": "function",
      "file": "src/algebra/group/SecondIso.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "SecondIsoResult",
      "type": "interface",
      "file": "src/algebra/group/SecondIso.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "selfPrism",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 124,
      "isReExport": false
    },
    {
      "name": "Semigroup",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "Semigroupoid",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "semilatticeNormalForm",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 26,
      "isReExport": true,
      "originalFile": "./Oriented"
    },
    {
      "name": "Semiring",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "sequenceFA",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 189,
      "isReExport": false
    },
    {
      "name": "sequenceRules",
      "type": "function",
      "file": "src/types/optics-rewrite-bridge.ts",
      "line": 116,
      "isReExport": false
    },
    {
      "name": "set",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 140,
      "isReExport": false
    },
    {
      "name": "setEqual",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 113,
      "isReExport": false
    },
    {
      "name": "setFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 120,
      "isReExport": false
    },
    {
      "name": "SetFunctor",
      "type": "interface",
      "file": "src/types/catkit-kan.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "setGlobalRelStrategy",
      "type": "function",
      "file": "src/types/rel-common.ts",
      "line": 200,
      "isReExport": false
    },
    {
      "name": "setHom",
      "type": "function",
      "file": "src/cat/set/SetCat.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "SetHom",
      "type": "interface",
      "file": "src/cat/set/SetCat.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "setL",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "SetMonad",
      "type": "interface",
      "file": "src/universal/rewrite/SetMonad.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "SetMonadFromTheory",
      "type": "interface",
      "file": "src/universal/monad/LawvereMonad.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "SetNat",
      "type": "interface",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "SetNatIso",
      "type": "interface",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "setO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 177,
      "isReExport": false
    },
    {
      "name": "SetObj",
      "type": "type",
      "file": "src/types/catkit-kan.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "SetValuedFunctor",
      "type": "type",
      "file": "src/types/codensity-set.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "SetWitnesses",
      "type": "interface",
      "file": "src/cat/set/SetCat.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "shift",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "shouldShowMore",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 351,
      "isReExport": false
    },
    {
      "name": "show",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "Show",
      "type": "interface",
      "file": "src/types/algebraic.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "show2Simplex",
      "type": "const",
      "file": "src/types/catkit-homology.ts",
      "line": 704,
      "isReExport": false
    },
    {
      "name": "showClasses",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1091,
      "isReExport": false
    },
    {
      "name": "showE",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 49,
      "isReExport": false
    },
    {
      "name": "showExpr",
      "type": "const",
      "file": "src/types/adt-expr-op.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "showHomologyPath",
      "type": "const",
      "file": "src/types/catkit-homology.ts",
      "line": 703,
      "isReExport": false
    },
    {
      "name": "showPath",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 238,
      "isReExport": false
    },
    {
      "name": "showSimplex",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 244,
      "isReExport": false
    },
    {
      "name": "showTerm",
      "type": "const",
      "file": "src/gadt/examples/Term.ts",
      "line": 50,
      "isReExport": false
    },
    {
      "name": "shrinkAdjunctionWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 321,
      "isReExport": false
    },
    {
      "name": "shrinkArray",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "shrinkLensCounterexample",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 309,
      "isReExport": false
    },
    {
      "name": "shrinkLensGetSetWitnessSpecific",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 511,
      "isReExport": false
    },
    {
      "name": "shrinkLensWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 223,
      "isReExport": false
    },
    {
      "name": "shrinkMonadLeftUnitWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 297,
      "isReExport": false
    },
    {
      "name": "shrinkMonadLeftUnitWitnessSpecific",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 486,
      "isReExport": false
    },
    {
      "name": "shrinkMonadWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 191,
      "isReExport": false
    },
    {
      "name": "shrinkNumber",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 109,
      "isReExport": false
    },
    {
      "name": "shrinkObject",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 148,
      "isReExport": false
    },
    {
      "name": "shrinkRelationalWitness",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 251,
      "isReExport": false
    },
    {
      "name": "ShrinkResult",
      "type": "interface",
      "file": "src/types/property-shrinking.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "ShrinkStrategy",
      "type": "type",
      "file": "src/types/property-shrinking.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "shrinkString",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "shrinkValue",
      "type": "function",
      "file": "src/types/property-shrinking.ts",
      "line": 179,
      "isReExport": false
    },
    {
      "name": "sierpinski",
      "type": "function",
      "file": "src/top/Spaces.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "sigma2",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 227,
      "isReExport": false
    },
    {
      "name": "Signature",
      "type": "type",
      "file": "src/universal/Signature.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "simpleGenerator",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 161,
      "isReExport": false
    },
    {
      "name": "simpleWitnessDemo",
      "type": "function",
      "file": "src/examples/simple-witness-demo.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "SimplicialSet",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 112,
      "isReExport": false
    },
    {
      "name": "single",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 54,
      "isReExport": false
    },
    {
      "name": "Single",
      "type": "const",
      "file": "src/types/fingertree.ts",
      "line": 83,
      "isReExport": false
    },
    {
      "name": "sizeMeasure",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 291,
      "isReExport": false
    },
    {
      "name": "slice",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 40,
      "isReExport": false
    },
    {
      "name": "SmallCategory",
      "type": "interface",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "smithNormalForm",
      "type": "function",
      "file": "src/types/catkit-homology.ts",
      "line": 174,
      "isReExport": false
    },
    {
      "name": "snd",
      "type": "const",
      "file": "src/types/gadt-expr.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "SNFCertificate",
      "type": "type",
      "file": "src/types/snf-witness.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "SNFVerificationWitness",
      "type": "interface",
      "file": "src/types/snf-surface-api.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "SNFWitness",
      "type": "type",
      "file": "src/types/snf-witness.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "snfWitnessDemo",
      "type": "function",
      "file": "src/examples/snf-witness-demo.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "Some",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "someFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 130,
      "isReExport": false
    },
    {
      "name": "SourceRef",
      "type": "type",
      "file": "src/types/math-trace-types.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "sp",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 439,
      "isReExport": false
    },
    {
      "name": "span",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "spec",
      "type": "function",
      "file": "src/structures/ring/Spec.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "SpecImpl",
      "type": "class",
      "file": "src/types/spec-impl.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "SpecImplFunctor",
      "type": "class",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "splitAt",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 302,
      "isReExport": false
    },
    {
      "name": "splitWith",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 205,
      "isReExport": false
    },
    {
      "name": "spTransportWitness",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 170,
      "isReExport": true,
      "originalFile": "./allegory-witness.js"
    },
    {
      "name": "square",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 148,
      "isReExport": false
    },
    {
      "name": "Square",
      "type": "type",
      "file": "src/types/double-lax-functor.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "squareCommutativityWitness",
      "type": "function",
      "file": "src/types/double-lax-functor-interface.ts",
      "line": 163,
      "isReExport": false
    },
    {
      "name": "squareHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 224,
      "isReExport": false
    },
    {
      "name": "SquareResult",
      "type": "type",
      "file": "src/universal/monad/Diagram.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "squareToStringDiagram",
      "type": "function",
      "file": "src/types/double-lax-functor.ts",
      "line": 104,
      "isReExport": false
    },
    {
      "name": "squareWitness",
      "type": "function",
      "file": "src/types/witnesses.ts",
      "line": 262,
      "isReExport": false
    },
    {
      "name": "SquareWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 43,
      "isReExport": false
    },
    {
      "name": "SSet02",
      "type": "type",
      "file": "src/types/catkit-homology.ts",
      "line": 631,
      "isReExport": false
    },
    {
      "name": "SSetUpTo3",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "Star",
      "type": "type",
      "file": "src/types/catkit-traversal.ts",
      "line": 63,
      "isReExport": false
    },
    {
      "name": "StarDict",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "starWander",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 178,
      "isReExport": false
    },
    {
      "name": "State",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "Stoch",
      "type": "type",
      "file": "src/prob/Markov.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "StrengthUnitWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 110,
      "isReExport": false
    },
    {
      "name": "StrictDoubleFunctor",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 47,
      "isReExport": false
    },
    {
      "name": "stringCategoryAbstraction",
      "type": "function",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "StringDiagram",
      "type": "interface",
      "file": "src/types/double-lax-functor.ts",
      "line": 98,
      "isReExport": false
    },
    {
      "name": "stringLengthAbstraction",
      "type": "function",
      "file": "src/types/spec-impl.ts",
      "line": 206,
      "isReExport": false
    },
    {
      "name": "StringMonoid",
      "type": "const",
      "file": "src/laws/examples/ESLintDemo.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "StringsOver",
      "type": "function",
      "file": "src/algebra/semiringlike/examples/Monoids.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Strong",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "StrongArray",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "StrongDict",
      "type": "interface",
      "file": "src/types/catkit-optics.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "StrongFn",
      "type": "const",
      "file": "src/types/catkit-optics.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "StrongForget",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 50,
      "isReExport": false
    },
    {
      "name": "StrongFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 45,
      "isReExport": false
    },
    {
      "name": "StrongMonad",
      "type": "interface",
      "file": "src/types/strong-monad.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "StrongMonadLawResults",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 203,
      "isReExport": false
    },
    {
      "name": "StrongMonadWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "StrongOption",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "StrongReader",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 74,
      "isReExport": false
    },
    {
      "name": "StrongState",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 96,
      "isReExport": false
    },
    {
      "name": "StrongWriter",
      "type": "const",
      "file": "src/types/strong-monad.ts",
      "line": 118,
      "isReExport": false
    },
    {
      "name": "Subgroup",
      "type": "interface",
      "file": "src/algebra/group/structures.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "subgroupFromPredicate",
      "type": "function",
      "file": "src/structures/group/Subgroup.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "subset",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 94,
      "isReExport": false
    },
    {
      "name": "Subset",
      "type": "class",
      "file": "src/types/rel-equipment.ts",
      "line": 27,
      "isReExport": false
    },
    {
      "name": "subsetPoset",
      "type": "function",
      "file": "src/order/dsl.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "subsetRel",
      "type": "const",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 813,
      "isReExport": false
    },
    {
      "name": "subspace",
      "type": "function",
      "file": "src/top/Subspace.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "subst",
      "type": "function",
      "file": "src/universal/Term.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "succ",
      "type": "const",
      "file": "src/gadt/basic/BFin.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "Sum",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "SumMonoid",
      "type": "const",
      "file": "src/types/measured-fingertree.ts",
      "line": 265,
      "isReExport": false
    },
    {
      "name": "support",
      "type": "function",
      "file": "src/prob/Dist.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "Surj",
      "type": "type",
      "file": "src/types/spec-impl.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Surjection",
      "type": "type",
      "file": "src/types/surjection-types.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "surjectionKernel",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 146,
      "isReExport": false
    },
    {
      "name": "SurjectionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "SurjectiveLaxDoubleFunctor",
      "type": "class",
      "file": "src/types/double-functor.ts",
      "line": 210,
      "isReExport": false
    },
    {
      "name": "surjectiveTo",
      "type": "function",
      "file": "src/structures/group/HomHelpers.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "Suspend",
      "type": "interface",
      "file": "src/types/advanced.ts",
      "line": 321,
      "isReExport": false
    },
    {
      "name": "T",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "tableProf",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 1058,
      "isReExport": false
    },
    {
      "name": "tableToGroup",
      "type": "function",
      "file": "src/algebra/group/iso/GroupToTable.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "tagCanonicalType",
      "type": "function",
      "file": "src/algebra/group/IsoClass.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "Tagged",
      "type": "type",
      "file": "src/types/catkit-prisms.ts",
      "line": 68,
      "isReExport": false
    },
    {
      "name": "TaggedMonoid",
      "type": "const",
      "file": "src/laws/examples/ESLintDemo.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "tagGuard",
      "type": "function",
      "file": "src/types/adt-match.ts",
      "line": 53,
      "isReExport": false
    },
    {
      "name": "take",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 307,
      "isReExport": false
    },
    {
      "name": "tAlgebraToUA",
      "type": "function",
      "file": "src/universal/em/Equivalence.ts",
      "line": 26,
      "isReExport": false
    },
    {
      "name": "TCarrier",
      "type": "interface",
      "file": "src/universal/monad/LawvereMonad.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "Term",
      "type": "type",
      "file": "src/universal/Term.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "termEq",
      "type": "function",
      "file": "src/universal/Term.ts",
      "line": 18,
      "isReExport": false
    },
    {
      "name": "TermF",
      "type": "type",
      "file": "src/gadt/examples/Term.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "terminalCodensity",
      "type": "function",
      "file": "src/types/codensity-monad.ts",
      "line": 169,
      "isReExport": false
    },
    {
      "name": "termInc",
      "type": "const",
      "file": "src/gadt/examples/Term.ts",
      "line": 57,
      "isReExport": false
    },
    {
      "name": "testAllegoryLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 279,
      "isReExport": false
    },
    {
      "name": "testBridgeSafety",
      "type": "function",
      "file": "src/examples/bridge-safety-test.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "testCompositionLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 349,
      "isReExport": false
    },
    {
      "name": "testCRTIsomorphism",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "testDivisibilityPoset",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "testEMMonoid",
      "type": "function",
      "file": "src/types/em-monoid-examples.ts",
      "line": 468,
      "isReExport": false
    },
    {
      "name": "testGaloisLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 206,
      "isReExport": false
    },
    {
      "name": "testLaxFunctorLaws",
      "type": "function",
      "file": "src/types/double-functor-lax-lawcheck.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "testMonadLaws",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 32,
      "isReExport": true,
      "originalFile": "./SetMonad"
    },
    {
      "name": "testPowersetLattice",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "testResidualLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 71,
      "isReExport": false
    },
    {
      "name": "testRingMultiplicativeLaws",
      "type": "function",
      "file": "src/laws/examples.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "testTransformerLaws",
      "type": "function",
      "file": "src/types/rel-lawcheck.ts",
      "line": 150,
      "isReExport": false
    },
    {
      "name": "Tet",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "thinCategory",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 34,
      "isReExport": false
    },
    {
      "name": "ThinMor",
      "type": "type",
      "file": "src/types/catkit-posets.ts",
      "line": 22,
      "isReExport": false
    },
    {
      "name": "thirdIsomorphism",
      "type": "function",
      "file": "src/algebra/group/ThirdIso.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "ThirdIsoResult",
      "type": "interface",
      "file": "src/algebra/group/ThirdIso.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "timeExecution",
      "type": "function",
      "file": "src/types/bitrel.ts",
      "line": 332,
      "isReExport": false
    },
    {
      "name": "timeOperation",
      "type": "function",
      "file": "src/bench/rel-benchmark.ts",
      "line": 96,
      "isReExport": false
    },
    {
      "name": "Tiny",
      "type": "const",
      "file": "src/order/dsl.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "tmatch",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 193,
      "isReExport": false
    },
    {
      "name": "toArray",
      "type": "function",
      "file": "src/types/measured-fingertree.ts",
      "line": 59,
      "isReExport": false
    },
    {
      "name": "toChainComplex",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 534,
      "isReExport": false
    },
    {
      "name": "toChurch",
      "type": "const",
      "file": "src/gadt/Church.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "toChurchFix",
      "type": "const",
      "file": "src/gadt/adapters.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "toDelimited",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 143,
      "isReExport": false
    },
    {
      "name": "toggleShowMore",
      "type": "function",
      "file": "src/types/display-helpers.ts",
      "line": 347,
      "isReExport": false
    },
    {
      "name": "toHomologyQuiver",
      "type": "function",
      "file": "src/types/catkit-homology-bridge.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "toListOf",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "toNumber",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Top",
      "type": "type",
      "file": "src/top/Topology.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "Topology",
      "type": "interface",
      "file": "src/types/topology.ts",
      "line": 32,
      "isReExport": false
    },
    {
      "name": "toProfunctorLens",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 90,
      "isReExport": false
    },
    {
      "name": "toProfunctorPrism",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 151,
      "isReExport": false
    },
    {
      "name": "toProfunctorTraversal",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 205,
      "isReExport": false
    },
    {
      "name": "toString",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "totalOrder",
      "type": "function",
      "file": "src/types/catkit-posets.ts",
      "line": 200,
      "isReExport": false
    },
    {
      "name": "toTrivial",
      "type": "function",
      "file": "src/structures/group/GrpCat.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "TraceReport",
      "type": "interface",
      "file": "src/types/math-trace-types.ts",
      "line": 33,
      "isReExport": false
    },
    {
      "name": "trampoline",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 173,
      "isReExport": false
    },
    {
      "name": "trampolined",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "TransformerAdjunctionWitness",
      "type": "type",
      "file": "src/types/witnesses.ts",
      "line": 151,
      "isReExport": false
    },
    {
      "name": "transformNatViaLens",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 260,
      "isReExport": false
    },
    {
      "name": "transitiveClosure",
      "type": "function",
      "file": "src/bench/rel-benchmark.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "transitiveClosureBit",
      "type": "function",
      "file": "src/bench/rel-benchmark.ts",
      "line": 140,
      "isReExport": false
    },
    {
      "name": "transportLeftKanAlongEquivalence",
      "type": "function",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 138,
      "isReExport": false
    },
    {
      "name": "transportRightKanAlongEquivalence",
      "type": "function",
      "file": "src/types/catkit-kan-transport.ts",
      "line": 188,
      "isReExport": false
    },
    {
      "name": "transportRightKanAlongEquivalenceDebug",
      "type": "function",
      "file": "src/types/catkit-kan-transport-fixed.ts",
      "line": 408,
      "isReExport": false
    },
    {
      "name": "transportRightKanAlongEquivalenceFixed",
      "type": "function",
      "file": "src/types/catkit-kan-transport-fixed.ts",
      "line": 89,
      "isReExport": false
    },
    {
      "name": "Traversable",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "traversal",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 103,
      "isReExport": false
    },
    {
      "name": "Traversal",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 135,
      "isReExport": false
    },
    {
      "name": "traversalFromPrism",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "TraversalWitness",
      "type": "type",
      "file": "src/types/optics-witness.ts",
      "line": 139,
      "isReExport": false
    },
    {
      "name": "traverseFA",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 197,
      "isReExport": false
    },
    {
      "name": "traverseWith",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 207,
      "isReExport": false
    },
    {
      "name": "treeHeight",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 38,
      "isReExport": false
    },
    {
      "name": "treeSize",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "treeToArray",
      "type": "const",
      "file": "src/types/adt-tree.ts",
      "line": 41,
      "isReExport": false
    },
    {
      "name": "Tri",
      "type": "type",
      "file": "src/types/sset-quasicat.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "TriangleResult",
      "type": "type",
      "file": "src/universal/monad/Diagram.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "trianglesHold",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 855,
      "isReExport": false
    },
    {
      "name": "Trifunctor",
      "type": "interface",
      "file": "src/types/functors.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "TripleKind",
      "type": "type",
      "file": "src/types/allegory-witness.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "trivial",
      "type": "function",
      "file": "src/structures/group/Group.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "Trivial",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "tupleScheme",
      "type": "function",
      "file": "src/structures/group/pairing/PairingScheme.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "TwoCategory",
      "type": "interface",
      "file": "src/types/two-category.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "TwoElt",
      "type": "type",
      "file": "src/algebra/group/FiniteGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Ty",
      "type": "type",
      "file": "src/types/gadt-expr.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "type FiniteSet",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 42,
      "isReExport": true,
      "originalFile": "../../set/Set"
    },
    {
      "name": "type FreeAlgebra",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 32,
      "isReExport": true,
      "originalFile": "./SetMonad"
    },
    {
      "name": "type RewriteRule",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 16,
      "isReExport": true,
      "originalFile": "./Rules"
    },
    {
      "name": "type SetMonad",
      "type": "re-export",
      "file": "src/universal/rewrite/index.ts",
      "line": 32,
      "isReExport": true,
      "originalFile": "./SetMonad"
    },
    {
      "name": "typeCheck",
      "type": "function",
      "file": "src/types/gadt-expr.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "typeSafeBridge",
      "type": "const",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 403,
      "isReExport": false
    },
    {
      "name": "U_underlying",
      "type": "function",
      "file": "src/algebra/semiringlike/free/FreeMonoid.ts",
      "line": 29,
      "isReExport": false
    },
    {
      "name": "UAAlgebra",
      "type": "type",
      "file": "src/universal/Algebra.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "UAHom",
      "type": "type",
      "file": "src/universal/Hom.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "uaModelToTAlgebra",
      "type": "function",
      "file": "src/universal/em/Equivalence.ts",
      "line": 7,
      "isReExport": false
    },
    {
      "name": "UF",
      "type": "const",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 25,
      "isReExport": false
    },
    {
      "name": "Ultrafilter",
      "type": "interface",
      "file": "src/types/ultrafilter.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "ultrafilterFromCodensity",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "ultrafilterToNatComponent",
      "type": "function",
      "file": "src/types/ultrafilter-nat-bridge.ts",
      "line": 42,
      "isReExport": false
    },
    {
      "name": "uncps",
      "type": "const",
      "file": "src/types/cont.ts",
      "line": 127,
      "isReExport": false
    },
    {
      "name": "unfold",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 62,
      "isReExport": false
    },
    {
      "name": "Unfoldable",
      "type": "interface",
      "file": "src/types/foldable.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "unfoldCofree",
      "type": "const",
      "file": "src/types/advanced.ts",
      "line": 235,
      "isReExport": false
    },
    {
      "name": "unfoldWithSuffix",
      "type": "const",
      "file": "src/types/adt-list.ts",
      "line": 82,
      "isReExport": false
    },
    {
      "name": "union",
      "type": "const",
      "file": "src/types/ultrafilter.ts",
      "line": 101,
      "isReExport": false
    },
    {
      "name": "unionViaOr",
      "type": "function",
      "file": "src/types/mini-finset.ts",
      "line": 337,
      "isReExport": false
    },
    {
      "name": "unit",
      "type": "const",
      "file": "src/types/adt-sum-prod.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Unit",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "unitHolds",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 204,
      "isReExport": false
    },
    {
      "name": "unitNaturalTransformation",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 263,
      "isReExport": false
    },
    {
      "name": "unitsAsAutos",
      "type": "function",
      "file": "src/structures/group/endo/End.ts",
      "line": 55,
      "isReExport": false
    },
    {
      "name": "UnitsMod",
      "type": "function",
      "file": "src/structures/group/Units.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "unitSquare",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 840,
      "isReExport": false
    },
    {
      "name": "unlines",
      "type": "function",
      "file": "src/types/rope.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "unpack",
      "type": "const",
      "file": "src/gadt/Reduction.ts",
      "line": 30,
      "isReExport": false
    },
    {
      "name": "URI_ExprF",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 217,
      "isReExport": false
    },
    {
      "name": "URI_IdFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 155,
      "isReExport": false
    },
    {
      "name": "URIS",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "URIS2",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "URIS2Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "URIS3",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "URIS3Free",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "URISFree",
      "type": "type",
      "file": "src/types/optics-free.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "URISProf",
      "type": "type",
      "file": "src/types/hkt.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "URItoKind",
      "type": "interface",
      "file": "src/types/hkt.ts",
      "line": 2,
      "isReExport": false
    },
    {
      "name": "URItoKind2",
      "type": "interface",
      "file": "src/types/hkt.ts",
      "line": 9,
      "isReExport": false
    },
    {
      "name": "URItoKind2Free",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "URItoKind3",
      "type": "interface",
      "file": "src/types/hkt.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "URItoKind3Free",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "URItoKindFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "URItoKindProf",
      "type": "interface",
      "file": "src/types/hkt.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "v",
      "type": "const",
      "file": "src/types/optics-rewrite.ts",
      "line": 66,
      "isReExport": false
    },
    {
      "name": "V",
      "type": "function",
      "file": "src/structures/ring/Spec.ts",
      "line": 48,
      "isReExport": false
    },
    {
      "name": "V4",
      "type": "function",
      "file": "src/algebra/group/finite/StandardGroups.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "validateInnerHorn2",
      "type": "function",
      "file": "src/types/category-to-nerve-sset.ts",
      "line": 403,
      "isReExport": false
    },
    {
      "name": "validateMathTag",
      "type": "function",
      "file": "src/types/math-trace-annot.ts",
      "line": 64,
      "isReExport": false
    },
    {
      "name": "validateOpticEnhanced",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 413,
      "isReExport": false
    },
    {
      "name": "validateOpticLaws",
      "type": "function",
      "file": "src/types/optics-profunctor-bridge-safe.ts",
      "line": 309,
      "isReExport": false
    },
    {
      "name": "validateRegistry",
      "type": "function",
      "file": "src/types/math-trace-registry.ts",
      "line": 92,
      "isReExport": false
    },
    {
      "name": "validateSSet",
      "type": "function",
      "file": "src/types/sset-quasicat.ts",
      "line": 122,
      "isReExport": false
    },
    {
      "name": "Validation",
      "type": "type",
      "file": "src/types/freeapp-coyo.ts",
      "line": 84,
      "isReExport": false
    },
    {
      "name": "validationOps",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 91,
      "isReExport": false
    },
    {
      "name": "Var",
      "type": "const",
      "file": "src/universal/Term.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "vComp",
      "type": "function",
      "file": "src/types/double-functor.ts",
      "line": 76,
      "isReExport": false
    },
    {
      "name": "vcons",
      "type": "const",
      "file": "src/gadt/basic/Vec.ts",
      "line": 39,
      "isReExport": false
    },
    {
      "name": "Vec",
      "type": "type",
      "file": "src/types/finvect.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "vecConViaLan",
      "type": "function",
      "file": "src/gadt/basic/Vec.Lan.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "VecF",
      "type": "type",
      "file": "src/gadt/basic/Vec.ts",
      "line": 19,
      "isReExport": false
    },
    {
      "name": "verifyAlgebraLaws",
      "type": "function",
      "file": "src/types/adt-fix.ts",
      "line": 165,
      "isReExport": false
    },
    {
      "name": "verifyColimitUniversal",
      "type": "function",
      "file": "src/types/finset-colimits-general.ts",
      "line": 88,
      "isReExport": false
    },
    {
      "name": "verifyCompactHausdorff",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 134,
      "isReExport": false
    },
    {
      "name": "verifyConvergence",
      "type": "function",
      "file": "src/types/em-algebra-discrete.ts",
      "line": 154,
      "isReExport": false
    },
    {
      "name": "verifyCoproductUniversal",
      "type": "function",
      "file": "src/types/finset-colimits.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "verifyDiagramFunctor",
      "type": "function",
      "file": "src/types/diagram.ts",
      "line": 28,
      "isReExport": false
    },
    {
      "name": "verifyEMViaLimits",
      "type": "function",
      "file": "src/types/topology-convergence.ts",
      "line": 70,
      "isReExport": false
    },
    {
      "name": "verifyEndNatRoundtrip",
      "type": "function",
      "file": "src/types/codensity-nat-bridge.ts",
      "line": 81,
      "isReExport": false
    },
    {
      "name": "verifyGaloisChain",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 370,
      "isReExport": false
    },
    {
      "name": "verifyLimitUniversal",
      "type": "function",
      "file": "src/types/finset-limits.ts",
      "line": 69,
      "isReExport": false
    },
    {
      "name": "verifyNaturality",
      "type": "function",
      "file": "src/types/codensity-nat-view.ts",
      "line": 210,
      "isReExport": false
    },
    {
      "name": "verifyPointwiseLimitTransport",
      "type": "function",
      "file": "src/types/pointwise-limit-util.ts",
      "line": 77,
      "isReExport": false
    },
    {
      "name": "verifyPresheafColimitNaturality",
      "type": "function",
      "file": "src/types/presheaf-colimits-general.ts",
      "line": 303,
      "isReExport": false
    },
    {
      "name": "verifyPresheafColimits",
      "type": "function",
      "file": "src/types/presheaf-colimits.ts",
      "line": 102,
      "isReExport": false
    },
    {
      "name": "verifyPrincipalProperty",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 253,
      "isReExport": false
    },
    {
      "name": "verifyProductUniversalProperty",
      "type": "function",
      "file": "src/types/topology.ts",
      "line": 482,
      "isReExport": false
    },
    {
      "name": "verifyProductUP",
      "type": "function",
      "file": "src/structures/group/cat/GroupCat.ts",
      "line": 23,
      "isReExport": false
    },
    {
      "name": "verifyPushoutUniversal",
      "type": "function",
      "file": "src/types/quiver-pushout.ts",
      "line": 437,
      "isReExport": false
    },
    {
      "name": "verifySNF",
      "type": "function",
      "file": "src/types/snf-surface-api.ts",
      "line": 129,
      "isReExport": false
    },
    {
      "name": "verifySNFProperties",
      "type": "function",
      "file": "src/types/snf-witness.ts",
      "line": 140,
      "isReExport": false
    },
    {
      "name": "verifySpecImplFunctor",
      "type": "function",
      "file": "src/types/spec-impl-refactored.ts",
      "line": 249,
      "isReExport": false
    },
    {
      "name": "verifySurjection",
      "type": "function",
      "file": "src/types/surjection-types.ts",
      "line": 75,
      "isReExport": false
    },
    {
      "name": "verifyUltrafilter",
      "type": "function",
      "file": "src/types/ultrafilter-monad.ts",
      "line": 108,
      "isReExport": false
    },
    {
      "name": "verifyUltrafilterLaws",
      "type": "function",
      "file": "src/types/ultrafilter.ts",
      "line": 121,
      "isReExport": false
    },
    {
      "name": "Vertex",
      "type": "type",
      "file": "src/types/quiver-pushout.ts",
      "line": 13,
      "isReExport": false
    },
    {
      "name": "viaLens",
      "type": "function",
      "file": "src/types/freeapp-coyo.ts",
      "line": 182,
      "isReExport": false
    },
    {
      "name": "view",
      "type": "function",
      "file": "src/types/catkit-optics.ts",
      "line": 78,
      "isReExport": false
    },
    {
      "name": "viewFree",
      "type": "const",
      "file": "src/types/optics-free.ts",
      "line": 124,
      "isReExport": false
    },
    {
      "name": "viewO",
      "type": "function",
      "file": "src/types/catkit-traversal.ts",
      "line": 200,
      "isReExport": false
    },
    {
      "name": "vnil",
      "type": "const",
      "file": "src/gadt/basic/Vec.ts",
      "line": 36,
      "isReExport": false
    },
    {
      "name": "Void",
      "type": "type",
      "file": "src/types/adt-sum-prod.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "WanderDict",
      "type": "interface",
      "file": "src/types/catkit-traversal.ts",
      "line": 65,
      "isReExport": false
    },
    {
      "name": "WanderFree",
      "type": "interface",
      "file": "src/types/optics-free.ts",
      "line": 170,
      "isReExport": false
    },
    {
      "name": "wheel",
      "type": "function",
      "file": "src/types/diagram-dsl.ts",
      "line": 320,
      "isReExport": false
    },
    {
      "name": "withHMap",
      "type": "function",
      "file": "src/higher/HFix.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "withMap",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "withSubCont",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 125,
      "isReExport": false
    },
    {
      "name": "WithWitnesses",
      "type": "type",
      "file": "src/algebra/group/WitnessGuard.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "WITNESS_LEVEL",
      "type": "const",
      "file": "src/types/config.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "witnessDemo",
      "type": "function",
      "file": "src/examples/comprehensive-witness-demo.ts",
      "line": 20,
      "isReExport": false
    },
    {
      "name": "WitnessLevel",
      "type": "type",
      "file": "src/types/config.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "WitnessPredicate",
      "type": "type",
      "file": "src/types/property-shrinking.ts",
      "line": 8,
      "isReExport": false
    },
    {
      "name": "witnessProgressDemo",
      "type": "function",
      "file": "src/examples/witness-propagation-progress.ts",
      "line": 12,
      "isReExport": false
    },
    {
      "name": "Word",
      "type": "type",
      "file": "src/algebra/semiringlike/free/FreeMonoid.ts",
      "line": 6,
      "isReExport": false
    },
    {
      "name": "wp",
      "type": "function",
      "file": "src/types/rel-equipment.ts",
      "line": 428,
      "isReExport": false
    },
    {
      "name": "wpTransportWitness",
      "type": "re-export",
      "file": "src/types/index.ts",
      "line": 170,
      "isReExport": true,
      "originalFile": "./allegory-witness.js"
    },
    {
      "name": "writer",
      "type": "function",
      "file": "src/types/optics-rewrite.ts",
      "line": 361,
      "isReExport": false
    },
    {
      "name": "Writer",
      "type": "type",
      "file": "src/types/strong-monad.ts",
      "line": 116,
      "isReExport": false
    },
    {
      "name": "writerArrayEMMonoid",
      "type": "const",
      "file": "src/types/em-monoid-examples.ts",
      "line": 24,
      "isReExport": false
    },
    {
      "name": "xor2",
      "type": "const",
      "file": "src/types/mini-finset.ts",
      "line": 219,
      "isReExport": false
    },
    {
      "name": "yield_",
      "type": "const",
      "file": "src/types/shift-reset.ts",
      "line": 96,
      "isReExport": false
    },
    {
      "name": "Yoneda",
      "type": "function",
      "file": "src/types/yoneda.ts",
      "line": 10,
      "isReExport": false
    },
    {
      "name": "Z",
      "type": "const",
      "file": "src/gadt/basic/Nat.ts",
      "line": 4,
      "isReExport": false
    },
    {
      "name": "Z_to_Q",
      "type": "function",
      "file": "src/structures/group/homs/Examples24.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "Z2",
      "type": "const",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Z3",
      "type": "const",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "Z4",
      "type": "const",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 16,
      "isReExport": false
    },
    {
      "name": "Z5",
      "type": "const",
      "file": "src/structures/ab/examples/AbelianGroups.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "Z8",
      "type": "const",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 17,
      "isReExport": false
    },
    {
      "name": "zero",
      "type": "function",
      "file": "src/structures/ab/AbCategory.ts",
      "line": 21,
      "isReExport": false
    },
    {
      "name": "zeroHom",
      "type": "function",
      "file": "src/structures/ab/AbGroup.ts",
      "line": 37,
      "isReExport": false
    },
    {
      "name": "zeroMor",
      "type": "function",
      "file": "src/structures/ab/builders/KernelsCokernels.ts",
      "line": 35,
      "isReExport": false
    },
    {
      "name": "zeroObject",
      "type": "function",
      "file": "src/structures/ab/builders/KernelsCokernels.ts",
      "line": 31,
      "isReExport": false
    },
    {
      "name": "zeros",
      "type": "function",
      "file": "src/types/finvect.ts",
      "line": 14,
      "isReExport": false
    },
    {
      "name": "Zmod",
      "type": "function",
      "file": "src/algebra/ring/Ring.ts",
      "line": 15,
      "isReExport": false
    },
    {
      "name": "ZmodAdd",
      "type": "function",
      "file": "src/algebra/group/examples.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "ZmodAsMonoid",
      "type": "function",
      "file": "src/universal/examples/MonoidSig.ts",
      "line": 11,
      "isReExport": false
    },
    {
      "name": "Zn",
      "type": "function",
      "file": "src/structures/group/util/FiniteGroups.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "ZnAdd",
      "type": "function",
      "file": "src/algebra/semiringlike/examples/Monoids.ts",
      "line": 3,
      "isReExport": false
    },
    {
      "name": "ZnRing",
      "type": "function",
      "file": "src/structures/ring/Ring.ts",
      "line": 58,
      "isReExport": false
    },
    {
      "name": "Zplus",
      "type": "const",
      "file": "src/algebra/group/NumberGroups.ts",
      "line": 5,
      "isReExport": false
    },
    {
      "name": "zygo",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 87,
      "isReExport": false
    },
    {
      "name": "zygoPair",
      "type": "const",
      "file": "src/types/adt-fix.ts",
      "line": 120,
      "isReExport": false
    }
  ]
}